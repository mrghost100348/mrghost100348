{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api.prod-p-us.sibros.tech"
    }
  ],
  "info": {
    "title": "SIBROS API",
    "version": "2.0",
    "description": "Welcome to the Sibros API. You will find the list of resources on the left. \nOur API is based on REST (Representational State Transfer). As a REST API it shows the following elements and qualities: \n\n# API Information\nResources are provided in form of URLs with endpoints, methods, and parameters.\n- Endpoints are part of the URL.  \n- Methods control what a request is about. \n- Parameters allow to refine the request and the returned information further. \n\nRequests can be passed in any programming language, as long as they are sent via HTTPS. \n\nPlease note: Calls made over plain HTTP will fail. All request headers must carry authentication. (For more information please see the section on authentication.)\n\nThe server does not store any state about the client session. It will treat every request as new. The client must include all information for the server to fulfill \nthe requestâ€”whether as a part of query or path parameters, headers or URL. The client knows which version of the data it has from a previous response, because the \nresponse is time stamped. This way the client does not have to request data more often than needed. If you need particular API functions, contact Sibros Support and\nwe will tailor the API available to you accordingly. \n\n# Authentication\nThe Sibros API offers two ways to authenticate a request: \n- **Authentication via API Key:** A master token key pair can be generated on the Portal. Anyone with a valid master token key and secret will have access to the API. \n  This can be compared to a persisted password. A master token can be created in the Web Portal. It is strongly advised to store keys in a safe place and follow standard safety precautions using them. \n  Provide the master token key as **X-Master-Api-Key** and the secret as **X-Master-Api-Secret** in the form of request headers.\n- **Bearer Authentication:** The bearer token is an encrypted string, usually generated by the server in response to a login request. This is a runtime generated token. \n  Once a user logs out, the token is invalidated. All communication inside of the Web Portal is conducted through bearer authentication.\n\n# General Return Messages and Errors\nSibros API uses conventional HTTP response codes to indicate the success or failure of an API request. Every error will also include an application level error code with a description to provide more granularity within a HTTP status code. Please find the list of HTTP status codes and application level error codes below.\n\n**HTTP Status Code Summary** \n| Status Code | Status Text | Description |\n| -- | -- | -- |\n| 200 | Ok | Everything worked as expected. |\n| 400 | Bad Request | The request is malformed. |\n| 401 | Unauthorized | The request lacks authentication credentials. |\n| 403 | Access Forbidden | The user does not have permissions to perform this request. |\n| 404 | Not Found | The resource could not be located. |\n| 409 | Conflict | The request could not be processed due to a conflict, posibly related to keys or simulated processes. |\n| 422 | Unprocessable Entity | The request was understood but it contains errors often involving invalid data. |\n| 424 | Failed Dependency | The request could not be performed because the request depends on another action which failed. |\n| 429 | Too Many Requests | The number of requests sent in the given time was too high. |\n| 50x | Server Error | Something went wrong on Sibros' end (these are very rare) |\n\n**E010: Unauthorized**\n- **Description:** Proper authentication was not provided.\n- **Action:** Please refer to the authentication section above and ensure you've provided valid credentials. If credentials are provided, check the following:\n    - **Authentication via API Key:**  Your API key might have been deleted so please check and create a new one if needed.\n    - **Bearer Authentication:** Your bearer token might be expired so login again to generate a new bearer token.\n\n**E020: Forbidden** \n- **Description:** The request is not allowed due to restricted operations or insufficient user permissions\n- **Action:** Ensure your request is intended and valid under current policies. \n    - **Insufficient User Permissions:** If the error results from a lack of user permissions, please contact your administrator.\n    - **Restricted Request:** If the error is due to a restriction imposed by Sibros, and you believe your use case justifies an exception, please discuss your request with Sibros support.\n\n**E030: Unverified User** \n- **Description:** The user's account is not verified\n- **Action:** Ensure your account is verified. This might involve an email verification. \n\n**E110: Invalid Input Parameter**\n- **Description:** The request contains one or more parameters that are either incorrect, unsupported, or missing.\n- **Action:** Verify all parameters are accurate as per the API documentation. Adjust any inaccuracies and retry the request. \n\n**E130: Resource Already Exists** \n- **Description:** The resource the request attempts to create already exists. \n- **Action:** Verify the uniqueness of the resource. If the intention was to update, please use an update endpoint. Otherwise, please review the fields that are required to be unique and adjust your request accordingly.\n\n**E140: Replayed Version Report** \n- **Description:** A new version report for an ECU was received with a counter value that is not higher than the previous one, indicating a possible replay or error in version tracking.\n- **Action:** Ensure the version report's counter is correctly incremented. Verify the source of the report for authenticity, and if necessary, resubmit with the correct counter value. If issues persist, contact support for further assistance.\n\n**E150: Failed Dependency** \n- **Description:** The request could not be performed because the requested action depended on another action, and that action failed.\n- **Action:** Investigate the dependency chain and address the root cause of the failure in the preceding request(s). Once the dependency issues are resolved, retry the request.\n\n**E160: Unprocessable Request Entity** \n- **Description:** The request was understood, but it contains semantic errors, often involving a request that is logically erroneous\n- **Action:** Evaluate the request data to confirm its alignment with the API documentation in terms of data validity and logical coherence for processing.\n\n**E230: Resource Not Found** \n- **Description:** The resource could not be located.\n- **Action:** Verify that the resource path in the URL is spelled correctly\n\n**E250: Invalid Foreign Key** \n- **Description:** UUID provided in the request does not reference a valid resource.\n- **Action:** Verify that the UUID is entered correctly and references a valid resource.\n\n**E260: Too many requests** \n- **Description:** The rate of requests exceeds the limits allowed within a specified time period.\n- **Action:** Reduce the frequency of your requests to comply with the API's rate limits. Consider batching requests where possible and review guidance on rate limiting policies.\n\n**E290: Device not connected** \n- **Description:**  The device targeted by the request is not connected or available.\n- **Action:** Verify the device's network connection and ensure it is online. If the issue persists, restart the device or check its configuration settings. Contact support if the problem continues.\n\n# Server URL\nThe server URL for accessing the Sibros API is:\n\nhttps://api.prod-p-us.sibros.tech\n",
    "x-logo": {
      "url": ""
    }
  },
  "paths": {
    "/core/v2/bulk/devices": {
      "post": {
        "description": "Creates multiple devices. Attributes for device creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDevicesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddDevicesResponse",
                  "type": "AddDevicesEndpoint decodeHTTPAddDevicesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Bulk Add Devices",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/command-definitions": {
      "get": {
        "description": "Retrieves the command definitions. Supports filtering by device id or decoder mapping id",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "query",
            "name": "deviceId",
            "required": false,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "query",
            "name": "decoderMappingId",
            "required": false,
            "schema": {
              "example": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commands": [
                    {
                      "commandId": 200,
                      "description": "Send and receive UDS payloads",
                      "group": "UDS",
                      "name": "UDS",
                      "requestPayloadFields": [
                        {
                          "description": "Logical address (if DoIP) or UDS request ID (if CAN) in hex string format",
                          "fieldName": "ecuAddress",
                          "inputOptions": {
                            "required": true,
                            "stringType": "HEX"
                          },
                          "inputType": "STRING",
                          "label": "ECU Address (Hex)"
                        },
                        {
                          "description": "UDS request payload in hex string format",
                          "fieldName": "hexString",
                          "inputOptions": {
                            "required": true,
                            "stringType": "HEX"
                          },
                          "inputType": "STRING",
                          "label": "Payload (Hex)"
                        }
                      ],
                      "responsePayloadFields": [
                        {
                          "description": "16 or 11/29 bit ECU address",
                          "displayOptions": {
                            "stringType": "HEX"
                          },
                          "fieldName": "ecuAddress",
                          "label": "ECU Address",
                          "outputType": "STRING"
                        },
                        {
                          "description": "UDS response payload in hex string format",
                          "displayOptions": {
                            "stringType": "HEX"
                          },
                          "fieldName": "hexString",
                          "label": "Hex Payload",
                          "outputType": "STRING"
                        }
                      ]
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandDefinitionsResponse",
                  "type": "GetAllCommandDefinitionsEndpoint decodeHTTPGetAllCommandDefinitionsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Command Definitions",
        "tags": [
          "Command Metadata"
        ]
      }
    },
    "/core/v2/command-requests": {
      "get": {
        "description": "Retrieves all command requests, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "query",
            "name": "deviceId",
            "required": false,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence request.",
            "in": "query",
            "name": "commandSequenceRequestId",
            "required": false,
            "schema": {
              "example": "8481c742-1140-414a-951b-94b45c7ff604",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command requests after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command requests before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandSequencePosition": null,
                    "commandSequenceRequestId": null,
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:26:44.950605Z",
                    "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                    "decoderMappingId": "9465d3c-e9d5-4cda-98ed-bed6cef07626",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "expiresBy": "2022-06-18T03:36:51.827053Z",
                    "metadata": null,
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": "22f111"
                    },
                    "responseTimeout": null,
                    "status": "RESPONSE_PENDING",
                    "updatedAt": "2022-06-18T03:26:51.827053Z"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandRequestsResponse",
                  "type": "GetAllCommandRequestsEndpoint decodeHTTPGetAllCommandRequestsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Command Requests",
        "tags": [
          "Command Request"
        ]
      },
      "post": {
        "description": "Creates a command request. Attributes for command request creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "commandId": 200,
                "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                "expiresBy": "2022-06-18T03:36:51.827053Z",
                "payload": {
                  "ecuAddress": "601",
                  "hexString": "22f111"
                },
                "responseTimeout": 5500
              },
              "schema": {
                "$ref": "#/components/schemas/AddCommandRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandId": 200,
                  "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                  "commandSequencePosition": null,
                  "commandSequenceRequestId": null,
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-06-18T03:26:44.950605Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                  "expiresBy": "2022-06-18T03:36:51.827053Z",
                  "metadata": null,
                  "payload": {
                    "ecuAddress": "601",
                    "hexString": "22f111"
                  },
                  "responseTimeout": 5500,
                  "status": "RESPONSE_PENDING",
                  "updatedAt": "2022-06-18T03:26:51.827053Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandRequestByIDResponse",
                  "type": "AddCommandRequestEndpoint decodeHTTPAddCommandRequestReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful POST request. Some fields are generated by the API."
          }
        },
        "summary": "Add Command Request",
        "tags": [
          "Command Request"
        ]
      }
    },
    "/core/v2/command-requests/{commandRequestID}": {
      "get": {
        "description": "Retrieves a command request. The command request is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command request.",
            "in": "path",
            "name": "commandRequestID",
            "required": true,
            "schema": {
              "example": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandId": 200,
                  "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                  "commandSequencePosition": null,
                  "commandSequenceRequestId": null,
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-06-18T03:26:44.950605Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                  "expiresBy": "2022-06-18T03:36:51.827053Z",
                  "metadata": null,
                  "payload": {
                    "ecuAddress": "601",
                    "hexString": "22f111"
                  },
                  "responseTimeout": 5500,
                  "status": "RESPONSE_PENDING",
                  "updatedAt": "2022-06-18T03:26:51.827053Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandRequestByIDResponse",
                  "type": "GetCommandRequestByIDEndpoint decodeHTTPGetCommandRequestByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Command Request",
        "tags": [
          "Command Request"
        ]
      }
    },
    "/core/v2/command-requests/{commandRequestID}/command-responses": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command responses associated with a command request, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command request.",
            "in": "path",
            "name": "commandRequestID",
            "required": true,
            "schema": {
              "example": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandResponseId": "fc9850cd-77a4-4504-a183-1a6f29e73283",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:28:44.950605Z",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "deviceTimestamp": "2022-06-18T03:27:44.950605Z",
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": ""
                    },
                    "status": "COMPLETED"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandResponsesResponse",
                  "type": "GetAllCommandResponsesByCommandRequestIDEndpoint decodeHTTPGetAllCommandResponsesByCommandRequestIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Command Responses by Command Request ID",
        "tags": [
          "Command Response"
        ]
      }
    },
    "/core/v2/command-responses": {
      "get": {
        "description": "Retrieves all command responses, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "query",
            "name": "deviceId",
            "required": false,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command request.",
            "in": "query",
            "name": "commandRequestId",
            "required": false,
            "schema": {
              "example": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence request.",
            "in": "query",
            "name": "commandSequenceRequestId",
            "required": false,
            "schema": {
              "example": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandResponseId": "fc9850cd-77a4-4504-a183-1a6f29e73283",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:28:44.950605Z",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "deviceTimestamp": "2022-06-18T03:27:44.950605Z",
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": ""
                    },
                    "status": "COMPLETED"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandResponsesResponse",
                  "type": "GetAllCommandResponsesEndpoint decodeHTTPGetAllCommandResponsesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Command Responses",
        "tags": [
          "Command Response"
        ]
      }
    },
    "/core/v2/command-responses/{commandResponseID}": {
      "get": {
        "description": "Retrieves a command response. The command response is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command response.",
            "in": "path",
            "name": "commandResponseID",
            "required": true,
            "schema": {
              "example": "fc9850cd-77a4-4504-a183-1a6f29e73283",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandId": 200,
                  "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                  "commandResponseId": "fc9850cd-77a4-4504-a183-1a6f29e73283",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-06-18T03:28:44.950605Z",
                  "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                  "deviceTimestamp": "2022-06-18T03:27:44.950605Z",
                  "payload": {
                    "ecuAddress": "601",
                    "hexString": ""
                  },
                  "status": "COMPLETED"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandResponseByIDResponse",
                  "type": "GetCommandResponseByIDEndpoint decodeHTTPGetCommandResponseByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Command Response",
        "tags": [
          "Command Response"
        ]
      }
    },
    "/core/v2/command-responses/{commandResponseID}/decoded-uds": {
      "get": {
        "deprecated": true,
        "description": "Retrieves a decoded version of a UDS command response. The command response is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the UDS command response.",
            "in": "path",
            "name": "commandResponseID",
            "required": true,
            "schema": {
              "example": "fc9850cd-77a4-4504-a183-1a6f29e73283",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandId": 200,
                  "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                  "commandResponseId": "fc9850cd-77a4-4504-a183-1a6f29e73283",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-06-18T03:28:44.950605Z",
                  "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                  "deviceTimestamp": "2022-06-18T03:27:44.950605Z",
                  "payload": {
                    "id": "SOME_ID",
                    "long_name": "LongerName",
                    "parameters": [
                      {
                        "short_name": "ShortName2",
                        "value": "0x50"
                      }
                    ],
                    "short_name": "ShortName"
                  },
                  "status": "COMPLETED"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandResponseByIDResponse",
                  "type": "GetDecodedUDSCommandResponseByIDEndpoint decodeHTTPGetCommandResponseByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Decoded UDS Command Response",
        "tags": [
          "Command Response"
        ]
      }
    },
    "/core/v2/command-sequence-definitions": {
      "get": {
        "description": "Retrieves all command sequence definitions, with the option to set limit and offset.",
        "parameters": [
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "An array of unique decoder mapping identifiers.",
            "in": "query",
            "name": "decoderMappingIds",
            "required": false,
            "schema": {
              "example": "d9465d3c-e9d5-4cda-98ed-bed6cef07626,d9465d3c-e9d5-4cda-98ed-bed6cef07627",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "query",
            "name": "deviceModelId",
            "required": false,
            "schema": {
              "example": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter command sequence definitions by name pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandRequests": [
                      {
                        "commandId": 200,
                        "commandRequestId": "",
                        "companyId": "",
                        "createdAt": "",
                        "creatorUserId": "c1904cef-68bb-4557-836b-a775d1f4513f",
                        "deviceId": "00000000-0000-0000-0000-000000000000",
                        "payload": {
                          "ecuAddress": "601",
                          "hexString": "22f111"
                        },
                        "responseTimeout": 5500,
                        "status": "",
                        "updatedAt": ""
                      }
                    ],
                    "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-05-25T17:19:32.320762Z",
                    "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                    "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                    "description": "Example sequence definition with one UDS request",
                    "inUse": false,
                    "name": "ExampleSequence",
                    "updatedAt": "2022-06-15T04:11:17.517174Z"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/CommandSequenceDefinitionsPage",
                  "type": "GetAllCommandSequenceDefinitionsEndpoint decodeHTTPGetAllCommandSequenceDefinitionsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Command Sequence Definitions",
        "tags": [
          "Command Sequence Definition"
        ]
      },
      "post": {
        "description": "Creates a command sequence definition. Attributes for command sequence definition creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "commandRequests": [
                  {
                    "commandId": 200,
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": "22f111"
                    }
                  }
                ],
                "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                "description": "Example sequence definition with one UDS request",
                "name": "ExampleSequence"
              },
              "schema": {
                "$ref": "#/components/schemas/CommandSequenceDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandRequests": [
                    {
                      "commandId": 200,
                      "commandRequestId": "",
                      "companyId": "",
                      "createdAt": "",
                      "creatorUserId": null,
                      "deviceId": "00000000-0000-0000-0000-000000000000",
                      "payload": {
                        "ecuAddress": "601",
                        "hexString": "22f111"
                      },
                      "responseTimeout": 5500,
                      "status": "",
                      "updatedAt": ""
                    }
                  ],
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-05-25T17:19:32.320762Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "description": "Example sequence definition with one UDS request",
                  "inUse": false,
                  "name": "ExampleSequence",
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceDefinitionByIDResponse",
                  "type": "AddCommandSequenceDefinitionEndpoint decodeHTTPAddCommandSequenceDefinitionReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful POST request. Some returned fields are generated by the API."
          }
        },
        "summary": "Add Command Sequence Definition",
        "tags": [
          "Command Sequence Definition"
        ]
      }
    },
    "/core/v2/command-sequence-definitions/{commandSequenceDefinitionID}": {
      "get": {
        "description": "Retrieves a command sequence definition. The command sequence definition is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence definition.",
            "in": "path",
            "name": "commandSequenceDefinitionID",
            "required": true,
            "schema": {
              "example": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandRequests": [
                    {
                      "commandId": 200,
                      "commandRequestId": "",
                      "companyId": "",
                      "createdAt": "",
                      "creatorUserId": null,
                      "deviceId": "00000000-0000-0000-0000-000000000000",
                      "payload": {
                        "ecuAddress": "601",
                        "hexString": "22f111"
                      },
                      "responseTimeout": 5500,
                      "status": "",
                      "updatedAt": ""
                    }
                  ],
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-05-25T17:19:32.320762Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "description": "Example sequence definition with one UDS request",
                  "inUse": false,
                  "name": "ExampleSequence",
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceDefinitionByIDResponse",
                  "type": "GetCommandSequenceDefinitionByIDEndpoint decodeHTTPGetCommandSequenceDefinitionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Command Sequence Definition",
        "tags": [
          "Command Sequence Definition"
        ]
      },
      "patch": {
        "description": "Updates the command sequence definition, provided that the command sequence definition is not in use. The command sequence definition is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence definition.",
            "in": "path",
            "name": "commandSequenceDefinitionID",
            "required": true,
            "schema": {
              "example": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommandSequenceDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandRequests": [
                    {
                      "commandId": 201,
                      "commandRequestId": "",
                      "companyId": "",
                      "createdAt": "",
                      "creatorUserId": null,
                      "deviceId": "00000000-0000-0000-0000-000000000000",
                      "payload": {
                        "duration": 10000,
                        "ecuAddress": "601",
                        "period": 1000,
                        "responseType": "NONE"
                      },
                      "responseTimeout": null,
                      "status": "",
                      "updatedAt": ""
                    }
                  ],
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-05-25T17:19:32.320762Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "description": "Example sequence definition with one UDS request",
                  "inUse": false,
                  "name": "ExampleSequence",
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceDefinitionByIDResponse",
                  "type": "UpdateCommandSequenceDefinitionEndpoint decodeHTTPUpdateCommandSequenceDefinitionReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful PATCH request."
          }
        },
        "summary": "Update Command Sequence Definition",
        "tags": [
          "Command Sequence Definition"
        ]
      }
    },
    "/core/v2/command-sequence-definitions/{commandSequenceDefinitionID}/command-requests": {
      "patch": {
        "deprecated": true,
        "description": "Updates the sequenced command requests of a command sequence definition, provided that the command sequence definition is not in use. The command sequence definition is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence definition.",
            "in": "path",
            "name": "commandSequenceDefinitionID",
            "required": true,
            "schema": {
              "example": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "commandRequests": [
                  {
                    "commandId": 201,
                    "payload": {
                      "duration": 10000,
                      "ecuAddress": "601",
                      "period": 1000,
                      "responseType": "NONE"
                    }
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCommandSequenceDefinitionCommandRequestsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandRequests": [
                    {
                      "commandId": 201,
                      "commandRequestId": "",
                      "companyId": "",
                      "createdAt": "",
                      "creatorUserId": null,
                      "deviceId": "00000000-0000-0000-0000-000000000000",
                      "payload": {
                        "duration": 10000,
                        "ecuAddress": "601",
                        "period": 1000,
                        "responseType": "NONE"
                      },
                      "status": "",
                      "updatedAt": ""
                    }
                  ],
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-05-25T17:19:32.320762Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "description": "Example sequence definition with one UDS request",
                  "inUse": false,
                  "name": "ExampleSequence",
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceDefinitionByIDResponse",
                  "type": "UpdateCommandSequenceDefinitionCommandRequestsEndpoint decodeHTTPUpdateCommandSequenceDefinitionCommandRequestsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful PATCH request."
          }
        },
        "summary": "Update Command Sequence Definition Command Requests",
        "tags": [
          "Command Sequence Definition"
        ]
      }
    },
    "/core/v2/command-sequence-definitions/{commandSequenceDefinitionID}/name-and-description": {
      "patch": {
        "deprecated": true,
        "description": "Updates ONLY the name and description of a command sequence definition. The command sequence definition is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence definition.",
            "in": "path",
            "name": "commandSequenceDefinitionID",
            "required": true,
            "schema": {
              "example": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "description": "Updated description for ExampleSequence",
                "name": "ExampleSequenceUPDATED"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCommandSequenceDefinitionNameAndDescriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandRequests": [
                    {
                      "commandId": 200,
                      "commandRequestId": "",
                      "companyId": "",
                      "createdAt": "",
                      "creatorUserId": null,
                      "deviceId": "00000000-0000-0000-0000-000000000000",
                      "payload": {
                        "ecuAddress": "601",
                        "hexString": "22f111"
                      },
                      "status": "",
                      "updatedAt": ""
                    }
                  ],
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-05-25T17:19:32.320762Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                  "description": "\"Updated description for ExampleSequence\"",
                  "inUse": false,
                  "name": "ExampleSequenceUPDATED",
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceDefinitionByIDResponse",
                  "type": "UpdateCommandSequenceDefinitionNameAndDescriptionEndpoint decodeHTTPUpdateCommandSequenceDefinitionNameAndDescriptionReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful PATCH request."
          }
        },
        "summary": "Update Command Sequence Definition Name and Description",
        "tags": [
          "Command Sequence Definition"
        ]
      }
    },
    "/core/v2/command-sequence-requests": {
      "get": {
        "description": "Retrieves all command sequence requests, with the option to set limit and offset.",
        "parameters": [
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "query",
            "name": "deviceId",
            "required": false,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "A unique identifier for the associated command sequence definition.",
            "in": "query",
            "name": "commandSequenceDefinitionId",
            "required": false,
            "schema": {
              "example": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command sequence requests after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command sequence requests before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "results": [
                    {
                      "commandSequenceDefinitionId": "373078e7-6892-473e-9c0d-3fc57d137d8c",
                      "commandSequenceRequestId": "8481c742-1140-414a-951b-94b45c7ff604",
                      "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                      "createdAt": "2022-06-15T04:11:17.517174Z",
                      "creatorUserId": "b16e0675-0bd9-43a3-bd81-40d125d2e4a4",
                      "deviceId": "8476d31b-f514-4f0f-a363-0633b1b602df",
                      "expiresBy": "2022-06-18T03:36:51.827053Z",
                      "status": "REQUEST_PENDING",
                      "statusHistory": [
                        {
                          "reason": "command sequence request created",
                          "setAt": "2022-06-15T04:11:17.517174Z",
                          "status": "REQUEST_PENDING"
                        }
                      ],
                      "updatedAt": "2022-06-15T04:11:17.517174Z"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandSequenceRequestsResponse",
                  "type": "GetAllCommandSequenceRequestsEndpoint decodeHTTPGetAllCommandSequenceRequestsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Command Sequence Requests",
        "tags": [
          "Command Sequence Request"
        ]
      },
      "post": {
        "description": "Creates a command sequence request using an existing command sequence definition. The target device and the command sequence definition must be linked to the same decoder mapping.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                "expiresBy": "2022-06-18T03:36:51.827053Z"
              },
              "schema": {
                "$ref": "#/components/schemas/AddCommandSequenceRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-06-15T04:11:17.517174Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                  "expiresBy": "2022-06-18T03:36:51.827053Z",
                  "status": "REQUEST_PENDING",
                  "statusHistory": [
                    {
                      "reason": "command sequence request created",
                      "setAt": "2022-06-15T04:11:17.517174Z",
                      "status": "REQUEST_PENDING"
                    }
                  ],
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceRequestByIDResponse",
                  "type": "AddCommandSequenceRequestEndpoint decodeHTTPAddCommandSequenceRequestReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful POST request. Some fields are generated by the API"
          }
        },
        "summary": "Add Command Sequence Request",
        "tags": [
          "Command Sequence Request"
        ]
      }
    },
    "/core/v2/command-sequence-requests/{commandSequenceRequestID}": {
      "get": {
        "description": "Retrieves a command sequence request. The command sequence request is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence request.",
            "in": "path",
            "name": "commandSequenceRequestID",
            "required": true,
            "schema": {
              "example": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                  "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
                  "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                  "createdAt": "2022-06-15T04:11:17.517174Z",
                  "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                  "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                  "expiresBy": "2022-06-18T03:36:51.827053Z",
                  "status": "REQUEST_PENDING",
                  "statusHistory": [
                    {
                      "reason": "command sequence request created",
                      "setAt": "2022-06-15T04:11:17.517174Z",
                      "status": "REQUEST_PENDING"
                    }
                  ],
                  "updatedAt": "2022-06-15T04:11:17.517174Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCommandSequenceRequestByIDResponse",
                  "type": "GetCommandSequenceRequestByIDEndpoint decodeHTTPGetCommandSequenceRequestByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Command Sequence Request",
        "tags": [
          "Command Sequence Request"
        ]
      }
    },
    "/core/v2/command-sequence-requests/{commandSequenceRequestID}/command-requests": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command requests associated with a command sequence request, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence request.",
            "in": "path",
            "name": "commandSequenceRequestID",
            "required": true,
            "schema": {
              "example": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "af1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandSequencePosition": 1,
                    "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:26:44.950605Z",
                    "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                    "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "metadata": null,
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": "22f111"
                    },
                    "status": "RESPONSE_PENDING",
                    "updatedAt": "2022-06-18T03:26:51.827053Z"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandRequestsResponse",
                  "type": "GetAllCommandRequestsByCommandSequenceRequestIDEndpoint decodeHTTPGetAllCommandRequestsByCommandSequenceRequestIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Device Command Requests",
        "tags": [
          "Command Request"
        ]
      }
    },
    "/core/v2/command-sequence-requests/{commandSequenceRequestID}/command-responses": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command responses associated with a command sequence request, with the option to set limit and offset. The command sequence request is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the command sequence request.",
            "in": "path",
            "name": "commandSequenceRequestID",
            "required": true,
            "schema": {
              "example": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandResponseId": "fc9850cd-77a4-4504-a183-1a6f29e73283",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:28:44.950605Z",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "deviceTimestamp": "2022-06-18T03:27:44.950605Z",
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": ""
                    },
                    "status": "COMPLETED"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandResponsesResponse",
                  "type": "GetAllCommandResponsesByCommandSequenceRequestIDEndpoint decodeHTTPGetAllCommandResponsesByCommandSequenceRequestIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Command Sequence Request Command Responses",
        "tags": [
          "Command Response"
        ]
      }
    },
    "/core/v2/companies": {
      "get": {
        "deprecated": true,
        "description": "",
        "parameters": [
          {
            "deprecated": false,
            "description": "An array of company IDs for which company information is desired.",
            "in": "query",
            "name": "companyIDs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompaniesPage",
                  "type": "GetCompanyInformationByCompanyIDsEndpoint decodeHTTPGetCompanyInformationFromCompanyIDsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Company information for each company given an array of Company IDs.",
        "tags": [
          "Company Information"
        ]
      }
    },
    "/core/v2/company/{companyID}/notarycollections": {
      "get": {
        "deprecated": true,
        "description": "Retrieves a notary collections request associated with a company. The company is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the company.",
            "in": "path",
            "name": "companyID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotaryCollectionsResponse",
                  "type": "GetNotaryCollectionsByCompanyIDEndpoint decodeHTTPGetNotaryCollectionsByCompanyIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Notary Collections Request by Company ID",
        "tags": [
          "Notary Collection"
        ]
      }
    },
    "/core/v2/configurations": {
      "post": {
        "deprecated": true,
        "description": "Creates a device configuration. Attributes for device configuration creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyID": "7d003be4-f28a-4367-b6f9-946432001800",
                "configurationStatus": "ACTIVE",
                "deviceID": "57865465-5832-430d-9e4c-ca0874105e0e",
                "downloadURL": "example-download.url",
                "file": {
                  "downloadURL": "example-download.url",
                  "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                  "fileName": "file2.tar",
                  "fileSizeBytes": 67,
                  "fileStatus": "NOT_UPLOADED",
                  "path": "/some/path",
                  "uploadURL": "example-upload.url"
                },
                "fileID": "3bafad2f-fb8f-437e-9098-433665cfcf2d",
                "uploadURL": "example-upload.url"
              },
              "schema": {
                "$ref": "#/components/schemas/AddDeviceConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceConfiguration",
                  "type": "AddDeviceConfigurationEndpoint decodeHTTPAddConfigurationReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Configuration",
        "tags": [
          "Device Configuration"
        ]
      }
    },
    "/core/v2/configurations/{configurationID}": {
      "get": {
        "deprecated": true,
        "description": "Retrieves a configuration. The configuration is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the configuration.",
            "in": "path",
            "name": "configurationID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceConfiguration",
                  "type": "GetDeviceConfigurationByIDEndpoint decodeHTTPGetConfigurationByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Configuration",
        "tags": [
          "Device Configuration"
        ]
      }
    },
    "/core/v2/configurations/{configurationID}/file": {
      "patch": {
        "deprecated": true,
        "description": "Updates the file of the device configuration. The configuration is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the configuration.",
            "in": "path",
            "name": "configurationID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "NOT_UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceConfigFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceConfiguration",
                  "type": "UpdateDeviceConfigurationFileEndpoint decodeHTTPUpdateConfigurationStatusReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Configuration File",
        "tags": [
          "Device Configuration"
        ]
      }
    },
    "/core/v2/consents/{consentID}": {
      "get": {
        "description": "Retrieves the info regarding user consent. The consent is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the consent.",
            "in": "path",
            "name": "consentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consent",
                  "type": "GetConsentByIDEndpoint decodeHTTPGetConsentReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get User Consent Info",
        "tags": [
          "User Consent"
        ]
      },
      "patch": {
        "description": "Updates the info regarding user consent. The consent is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the consent.",
            "in": "path",
            "name": "consentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchConsentStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consent",
                  "type": "UpdateConsentStatusEndpoint decodeHTTPPatchConsentStatusReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update User Consent Info",
        "tags": [
          "User Consent"
        ]
      }
    },
    "/core/v2/controllers": {
      "get": {
        "description": "Retrieves all controllers, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the component.",
            "in": "query",
            "name": "componentID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllersPage",
                  "type": "GetControllersEndpoint decodeHTTPGetControllersReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Controllers",
        "tags": [
          "Controller"
        ]
      },
      "post": {
        "description": "Creates a controller. Attributes for controller creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "abbreviation": "BMS",
                "companyID": "f95c2b3d-c56b-4cf6-97ca-0a9d4e9fdfa7",
                "componentID": "1",
                "dependencies": [
                  "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77"
                ],
                "deviceModelID": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
                "name": "Battery Management System",
                "updateable": true
              },
              "schema": {
                "$ref": "#/components/schemas/AddControllerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Controller",
                  "type": "AddControllerEndpoint decodeHTTPAddControllerReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Controller",
        "tags": [
          "Controller"
        ]
      }
    },
    "/core/v2/controllers/{controllerID}": {
      "delete": {
        "description": "Permanently deletes a controller. The controller is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the controller.",
            "in": "path",
            "name": "controllerID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteControllerByIDResponse",
                  "type": "DeleteControllerByIDEndpoint decodeHTTPDeleteControllerByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Controller",
        "tags": [
          "Controller"
        ]
      },
      "get": {
        "description": "Retrieves controllers. The controllers are identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the controller.",
            "in": "path",
            "name": "controllerID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Controller",
                  "type": "GetControllerByIDEndpoint decodeHTTPGetControllerByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Controller",
        "tags": [
          "Controller"
        ]
      },
      "put": {
        "description": "Updates a controller. The controller is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the controller.",
            "in": "path",
            "name": "controllerID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "abbreviation": "BMS",
                "componentID": "1",
                "dependencies": [
                  "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77"
                ],
                "deviceModelID": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
                "name": "Battery Management System",
                "updateable": true
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateControllerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Controller",
                  "type": "UpdateControllerByIDEndpoint decodeHTTPUpdateControllerByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Controller",
        "tags": [
          "Controller"
        ]
      }
    },
    "/core/v2/controllers/{controllerID}/hardware-revisions": {
      "get": {
        "description": "Retrieves the hardware revisions associated with a controller.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the controller.",
            "in": "path",
            "name": "controllerID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by assembly ID.",
            "in": "query",
            "name": "assemblyID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by PCB ID.",
            "in": "query",
            "name": "pcbID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by usage ID.",
            "in": "query",
            "name": "usageID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device model IDs.",
            "in": "query",
            "name": "deviceModelIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareRevisionsPage",
                  "type": "GetHardwareRevisionsEndpoint decodeHTTPGetHardwareRevisionsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Hardware Revisions of Controller",
        "tags": [
          "Controller"
        ]
      }
    },
    "/core/v2/converted-files": {
      "get": {
        "description": "Retrieves all file conversion requests.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by an array of file statuses of the converted files.",
            "in": "query",
            "name": "fileStatuses",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by an array of target file formats of the converted files.",
            "in": "query",
            "name": "targetFileFormats",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertedFilesPage",
                  "type": "GetConvertedFilesEndpoint decodeHTTPGetConvertedFilesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Converted Files",
        "tags": [
          "Converted Files"
        ]
      },
      "post": {
        "description": "Converts an array of device log IDs to a particular target format. All device logs must be of the same type.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddConvertedFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertedFile",
                  "type": "AddConvertedFileEndpoint decodeHTTPAddConvertedFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Convert Array of Device Log IDs to Particular Target Format",
        "tags": [
          "Converted Files"
        ]
      }
    },
    "/core/v2/converted-files/{convertedFileID}": {
      "delete": {
        "description": "Permanently deletes a converted file.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the converted file.",
            "in": "path",
            "name": "convertedFileID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteConvertedFile",
                  "type": "DeleteConvertedFileByIDEndpoint decodeHTTPDeleteConvertedFileByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete a Converted File",
        "tags": [
          "Converted Files"
        ]
      },
      "get": {
        "description": "Retrieves a converted file. The converted file is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the converted file.",
            "in": "path",
            "name": "convertedFileID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertedFile",
                  "type": "GetConvertedFileByIDEndpoint decodeHTTPGetConvertedFileByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get a Converted File",
        "tags": [
          "Converted Files"
        ]
      }
    },
    "/core/v2/customer-files": {
      "get": {
        "description": "Retrieves customer files filtered by parameters.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A list of unique customer file identifiers. Only customer files with IDs in this list will be in the result set.",
            "in": "query",
            "name": "customerFileIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerFilesPage",
                  "type": "GetCustomerFilesEndpoint decodeHTTPGetCustomerFilesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Customer Files",
        "tags": [
          "Customer File"
        ]
      },
      "post": {
        "description": "Create a customer file. Attributes for customer file creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustomerFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerFile",
                  "type": "AddCustomerFileEndpoint decodeHTTPAddCustomerFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Customer File",
        "tags": [
          "Customer File"
        ]
      }
    },
    "/core/v2/customer-files/{customerFileID}": {
      "put": {
        "description": "Updates a customer file. The customer file is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the customer file. An ID will be generated every time a customer file is created.",
            "in": "path",
            "name": "customerFileID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "file": {
                  "downloadURL": "example-download.url",
                  "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                  "fileName": "file2.tar",
                  "fileSizeBytes": 67,
                  "fileStatus": "UPLOADED",
                  "path": "/some/path",
                  "uploadURL": "example-upload.url"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerFile",
                  "type": "UpdateCustomerFileEndpoint decodeHTTPUpdateCustomerFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Customer File",
        "tags": [
          "Customer File"
        ]
      }
    },
    "/core/v2/decodermappings": {
      "get": {
        "description": "Retrieves multiple decoder mappings, with the option to set limit and offset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_name"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_namePattern"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_deviceModelID"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_decoderMappingIDs"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_customDataMappingID"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllDecoderMappingsResponse",
                  "type": "GetDecoderMappingsEndpoint decodeHTTPGetDecoderMappingsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Decoder Mappings",
        "tags": [
          "Decoder Mapping"
        ]
      },
      "post": {
        "description": "Creates a new decoder mapping. Attributes for decoder mapping creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyID": "10064144-520f-447e-aa64-d39bf770b96e",
                "content": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\", \"senders\": [\"DU\"]}}`",
                "customCommands": null,
                "decoderFiles": [
                  {
                    "abbreviation": "SIB",
                    "busID": 0,
                    "companyID": "212b485b-eab0-47b8-91e5-bad79521f9e0",
                    "createdAt": "2020-02-02T20:20:20.202Z",
                    "decoderFileID": "6759e253-1c39-49aa-97b3-b49da8c549a7",
                    "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                    "description": "Sibros",
                    "downloadURL": "example-download.url",
                    "file": {
                      "downloadURL": "example-download.url",
                      "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                      "fileName": "file2.tar",
                      "fileSizeBytes": 67,
                      "fileStatus": "NOT_UPLOADED",
                      "path": "/some/path",
                      "uploadURL": "example-upload.url"
                    },
                    "fileID": "c49cbb97-29ae-449b-b014-6cde9ac92172",
                    "updatedAt": "2020-03-02T20:20:20.202Z",
                    "uploadURL": "example-upload.url"
                  }
                ],
                "decoderMappingName": "main_dbc",
                "decoderMappingStatus": "IN_PROGRESS",
                "deviceModelID": "cfa1decf-f550-43a0-818a-7a21883432d3",
                "nameValueMappings": "[{\"name\":\"signalA\",\"unit\":\"km\",\"valueType\":\"Integer\",\"enumMappings\":null},{\"name\":\"signalB\",\"unit\":\"\",\"valueType\":\"Enum\",\"enumMappings\":[{\"name\":\"ENUM_1\",\"value\":\"1\"},{\"name\":\"ENUM_2\",\"value\":\"2\"}]}]"
              },
              "schema": {
                "$ref": "#/components/schemas/AddDecoderMappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecoderMapping",
                  "type": "AddDecoderMappingEndpoint decodeHTTPAddDecoderMappingReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Decoder Mapping",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingID}": {
      "delete": {
        "description": "Permanently deletes a decoder mapping.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDecoderMappingResponse",
                  "type": "DeleteDecoderMappingEndpoint decodeHTTPDeleteDecoderMappingByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Decoder Mapping",
        "tags": [
          "Decoder Mapping"
        ]
      },
      "get": {
        "description": "Retrieves a decoder mapping. The decoder mapping is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecoderMapping",
                  "type": "GetDecoderMappingByIDEndpoint decodeHTTPGetDecoderMappingByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Decoder Mapping",
        "tags": [
          "Decoder Mapping"
        ]
      },
      "patch": {
        "description": "Updates a decoder mapping. The decoder mapping is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "content": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\", \"senders\": [\"DU\"]}}`",
                "customCommands": null,
                "decoderFiles": [
                  {
                    "abbreviation": "SIB",
                    "busID": 0,
                    "companyID": "212b485b-eab0-47b8-91e5-bad79521f9e0",
                    "createdAt": "2020-02-02T20:20:20.202Z",
                    "decoderFileID": "6759e253-1c39-49aa-97b3-b49da8c549a7",
                    "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                    "description": "Sibros",
                    "downloadURL": "example-download.url",
                    "file": {
                      "downloadURL": "example-download.url",
                      "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                      "fileName": "file2.tar",
                      "fileSizeBytes": 67,
                      "fileStatus": "NOT_UPLOADED",
                      "path": "/some/path",
                      "uploadURL": "example-upload.url"
                    },
                    "fileID": "c49cbb97-29ae-449b-b014-6cde9ac92172",
                    "updatedAt": "2020-03-02T20:20:20.202Z",
                    "uploadURL": "example-upload.url"
                  }
                ],
                "decoderMappingName": "main_dbc",
                "decoderMappingStatus": "IN_PROGRESS",
                "deviceModelID": "cfa1decf-f550-43a0-818a-7a21883432d3"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDecoderMappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecoderMapping",
                  "type": "UpdateDecoderMappingEndpoint decodeHTTPUpdateDecoderMappingReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Decoder Mapping",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingID}/combined-decoder-file": {
      "patch": {
        "description": "Updates the status and other file fields, such as size, hash, and other file entity fields, of the combined decoder file of a decoder mapping.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCombinedDecoderFileStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDecoderMappingResponse",
                  "type": "UpdateCombinedDecoderFileStatusEndpoint decodeHTTPUpdateCombinedDecoderFileStatusReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Combined Decoder File Status",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingID}/defined-commands": {
      "get": {
        "deprecated": true,
        "description": "Retrieves the defined commands associated with a decoder mapping. The decoder mapping is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the associated decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "example": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commands": [
                    {
                      "commandId": 200,
                      "description": "Send and receive UDS payloads",
                      "group": "UDS",
                      "name": "UDS",
                      "requestPayloadFields": [
                        {
                          "description": "Logical address (if DoIP) or UDS request ID (if CAN) in hex string format",
                          "fieldName": "ecuAddress",
                          "inputOptions": {
                            "required": true,
                            "stringType": "HEX"
                          },
                          "inputType": "STRING",
                          "label": "ECU Address (Hex)"
                        },
                        {
                          "description": "UDS request payload in hex string format",
                          "fieldName": "hexString",
                          "inputOptions": {
                            "required": true,
                            "stringType": "HEX"
                          },
                          "inputType": "STRING",
                          "label": "Payload (Hex)"
                        }
                      ],
                      "responsePayloadFields": [
                        {
                          "description": "16 or 11/29 bit ECU address",
                          "displayOptions": {
                            "stringType": "HEX"
                          },
                          "fieldName": "ecuAddress",
                          "label": "ECU Address",
                          "outputType": "STRING"
                        },
                        {
                          "description": "UDS response payload in hex string format",
                          "displayOptions": {
                            "stringType": "HEX"
                          },
                          "fieldName": "hexString",
                          "label": "Hex Payload",
                          "outputType": "STRING"
                        }
                      ]
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/GetDefinedCommandsResponse",
                  "type": "GetDefinedCommandsByDecoderMappingIDEndpoint decodeHTTPGetDefinedCommandsByDecoderMappingIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Decoder Mapping Defined Commands",
        "tags": [
          "Command Metadata"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingID}/diagnostics/{diagnosticFileID}/file": {
      "patch": {
        "description": "Updates the status and associated diagnostic file of a decoder mapping. Decoder mapping and diagnostic file are identified by IDs.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the diagnostic file.",
            "in": "path",
            "name": "diagnosticFileID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "NOT_UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDecoderMappingDiagnosticFileFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDecoderMappingResponse",
                  "type": "UpdateDecoderMappingStatusAndDiagnosticFileEndpoint decodeHTTPUpdateDecoderMappingDiagnosticFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Decoder Mapping Status and Diagnostic File",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingID}/signal-fault-mode-maps": {
      "get": {
        "description": "Returns all the signal fault mode maps that belong to decoder mapping ID in the caller's context. An empty list is returned if no signal fault modes exist.",
        "parameters": [
          {
            "description": "A unique identifier for the data map (or decoder map)",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter Signal Fault Mode Maps by their respective IDs",
            "in": "query",
            "name": "signalFaultModeMapIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter Signal Fault Mode Maps by Fault Mode Map IDs they are associated with",
            "in": "query",
            "name": "faultModeMapIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignalFaultModePage",
                  "type": "GetSignalFaultModesEndpoint decodeHTTPGetSignalFaultModesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get All Associations of Signals with Fault Mode Maps for a Specific Data Map",
        "tags": [
          "Decoder Mapping"
        ]
      },
      "put": {
        "description": "Associate fault mode maps with J1939 signals defined in the data map in bulk. Note that this endpoint will allow you to assign only those signals that are defined by the DBC files already â€œUPLOADEDâ€ in the data map (Users can call GET /decodermappings/<id> to ensure that all/relevant decoderFiles have the status â€œUPLOADEDâ€).",
        "parameters": [
          {
            "description": "A unique identifier for the data map (or decoder map)",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UpdateSignalFaultModesByDecoderMappingIDRequest"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignalFaultModes",
                  "type": "UpdateSignalFaultModesForDecoderMapEndpoint decodeHTTPUpdateSignalFaultModesForDecoderMapReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Bulk Associate Signals with Fault Mode Maps for a Data Map",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingID}/{decoderFileID}/file": {
      "patch": {
        "description": "Updates the status and associated decoder file of a decoder mapping. Decoder mapping and decoder file are identified by IDs.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "path",
            "name": "decoderMappingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the decoder file.",
            "in": "path",
            "name": "decoderFileID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "NOT_UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDecoderMappingDecoderFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDecoderMappingResponse",
                  "type": "UpdateDecoderMappingStatusAndDecoderFileEndpoint decodeHTTPUpdateDecoderMappingDecoderFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Decoder Mapping Status and File",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/decodermappings/{decoderMappingName}/name/content": {
      "get": {
        "description": "Retrieves a decoder mapping associated with a decoder mapping name. The decoder mapping is identified by the name.",
        "parameters": [
          {
            "deprecated": false,
            "description": "The unique name of the decoder mapping.",
            "in": "path",
            "name": "decoderMappingName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecoderMapping",
                  "type": "GetDecoderMappingContentEndpoint decodeHTTPGetDecoderMappingContentByNameReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Decoder Mapping for Decoder Mapping Name",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/deep-logger-requests": {
      "get": {
        "description": "Retrieves all requests made to Deep Logger.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepLoggerRequestsPage",
                  "type": "GetDeepLoggerRequestsEndpoint decodeHTTPGetDeepLoggerRequestsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get All Deep Logger Requests",
        "tags": [
          "Deep Logger Request"
        ]
      },
      "post": {
        "description": "Sends a request to Deep Logger.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeepLoggerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepLoggerRequest",
                  "type": "AddDeepLoggerRequestEndpoint decodeHTTPAddDeepLoggerRequestReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a Deep Logger Request",
        "tags": [
          "Deep Logger Request"
        ]
      }
    },
    "/core/v2/deep-logger-requests/{deepLoggerRequestID}": {
      "get": {
        "description": "Retrieves a request made to Deep Logger. The request is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the Deep Logger request.",
            "in": "path",
            "name": "deepLoggerRequestID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepLoggerRequest",
                  "type": "GetDeepLoggerRequestByIDEndpoint decodeHTTPGetDeepLoggerRequestByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Deep Logger Request",
        "tags": [
          "Deep Logger Request"
        ]
      }
    },
    "/core/v2/deep-updater-initial-metadata": {
      "get": {
        "description": "Retrieves the initial metadata from both director and image auth repo and returns a zip file with all the metadata files",
        "parameters": [
          {
            "description": "Name of the notary collection for the image auth repository",
            "in": "query",
            "name": "collectionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/ZipFileResponse",
                  "type": "GetDeepUpdaterInitialMetadataEndpoint decodeHTTPGetDeepUpdaterInitialMetadataReq encodeHTTPGetDeepUpdaterInitialMetadataResp"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Initial Metadata for Deep Updater",
        "tags": [
          "Device Maintenance"
        ]
      }
    },
    "/core/v2/default-states": {
      "get": {
        "description": "Retrieves all default states, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "query",
            "name": "deviceModelID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllDefaultStatesResponse",
                  "type": "GetAllDefaultStatesEndpoint decodeHTTPGetAllDefaultStatesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Default States",
        "tags": [
          "Default State"
        ]
      },
      "post": {
        "description": "Creates a default state. Attributes for default state creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyId": "cc2cbc42-b3a7-428d-8456-5fd7d24e2628",
                "deviceGroupId": "86b65709-c79c-4d87-bb6e-ed6b8e2dbbf0",
                "deviceModelId": "084c9727-5bd7-4657-ad0e-67cc4766e4bc",
                "packageId": "f5883a08-fc43-468f-b9f6-b8eda7620949",
                "selectiveLogConfigId": "8b6d2d74-efe0-4c1c-8085-318b2d2507ec",
                "status": "ACTIVE"
              },
              "schema": {
                "$ref": "#/components/schemas/AddDefaultStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultState",
                  "type": "AddDefaultStateEndpoint decodeHTTPAddDefaultStateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Default State",
        "tags": [
          "Default State"
        ]
      }
    },
    "/core/v2/default-states/{defaultStateID}": {
      "delete": {
        "description": "Permanently deletes a default state.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the default state.",
            "in": "path",
            "name": "defaultStateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResourceDeleteResponse",
                  "type": "DeleteDefaultStateByIDEndpoint decodeHTTPDeleteDefaultStateByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Default State",
        "tags": [
          "Default State"
        ]
      },
      "get": {
        "description": "Retrieves a default state. The default state is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the default state.",
            "in": "path",
            "name": "defaultStateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultState",
                  "type": "GetDefaultStateByIDEndpoint decodeHTTPGetDefaultStateByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Default State",
        "tags": [
          "Default State"
        ]
      },
      "put": {
        "description": "Updates a default state. The default state is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the default state.",
            "in": "path",
            "name": "defaultStateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "deviceGroupId": "86b65709-c79c-4d87-bb6e-ed6b8e2dbbf0",
                "deviceModelId": "084c9727-5bd7-4657-ad0e-67cc4766e4bc",
                "packageId": "f5883a08-fc43-468f-b9f6-b8eda7620949",
                "selectiveLogConfigId": "8b6d2d74-efe0-4c1c-8085-318b2d2507ec",
                "status": "ACTIVE"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDefaultStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultState",
                  "type": "UpdateDefaultStateEndpoint decodeHTTPUpdateDefaultStateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Default State",
        "tags": [
          "Default State"
        ]
      }
    },
    "/core/v2/default-states/{defaultStateID}/active": {
      "put": {
        "description": "Updates the status of the default state to active.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the default state.",
            "in": "path",
            "name": "defaultStateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDefaultStateStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDefaultStateStatusResponse",
                  "type": "UpdateDefaultStateStatusEndpoint decodeHTTPUpdateDefaultStateStatusReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Default State Active Status",
        "tags": [
          "Default State"
        ]
      }
    },
    "/core/v2/default-states/{defaultStateID}/approval": {
      "put": {
        "description": "Updates a default state approver status.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the default state.",
            "in": "path",
            "name": "defaultStateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDefaultStateApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDefaultStateApprovalResponse",
                  "type": "UpdateDefaultStateApprovalEndpoint decodeHTTPUpdateDefaultStateApprovalReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Default State Approval",
        "tags": [
          "Default State"
        ]
      }
    },
    "/core/v2/deployment-alerts": {
      "get": {
        "description": "Retrieves deployment alerts matching given filter parameters",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filters to alerts for the identified deployment",
            "in": "query",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentAlert",
                  "type": "GetDeploymentAlertsEndpoint decodeHTTPGetDeploymentAlertsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Deployment Warnings",
        "tags": [
          "Deployment"
        ]
      }
    },
    "/core/v2/deployments": {
      "get": {
        "description": "Retrieves deployments with options for filtering, ordering, and pagination.",
        "parameters": [
          {
            "$ref": "#/components/parameters/deploymentFilter_deploymentType"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_statuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_substatuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceIDs"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceSerialNumber"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeLowerBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeUpperBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_rolloutID"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_provisioning"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdBefore"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/deploymentOrderBy"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentsPageResponse",
                  "type": "GetDeploymentsEndpoint decodeHTTPGetDeploymentsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Deployments",
        "tags": [
          "Deployment"
        ]
      },
      "post": {
        "description": "Creates a deployment. Attributes for deployment creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyID": "4a34ac45-e47c-4134-be78-176b3f8a1a41",
                "configurationID": null,
                "deploymentMetadata": null,
                "deploymentStatus": "REQUEST_RECEIVED",
                "deploymentType": "SOFTWARE_UPDATE",
                "desiredState": "UPDATE_COMPLETED",
                "deviceID": "66c56115-2570-4f47-895a-625ef042b531",
                "endTime": "2020-02-03T20:20:20.202Z",
                "packageID": "9bd28cf1-4314-40e8-8489-52af420c6534",
                "previousDeploymentID": "b3e806d3-4097-48ee-b1c6-1ca47aadb5ed",
                "previousPackageID": "9827dc6e-6468-4168-8bb3-b8ec82593fb9",
                "rolloutID": "ca7f5e2f-b84e-458f-bb95-939f75d3a973",
                "selectiveLogConfigID": "2df02452-ef0f-412c-89ed-baad58655fcd",
                "sentToDevice": true,
                "startTime": "2020-02-02T20:20:20.202Z",
                "statusChangeReason": ""
              },
              "schema": {
                "$ref": "#/components/schemas/AddDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment",
                  "type": "AddDeploymentEndpoint decodeHTTPAddDeploymentReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add New Deployment",
        "tags": [
          "Deployment"
        ]
      }
    },
    "/core/v2/deployments/{deploymentID}": {
      "delete": {
        "description": "Permanently deletes a deployment.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDeploymentByIDResponse",
                  "type": "DeleteDeploymentByIDEndpoint decodeHTTPDeleteDeploymentByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Deployment",
        "tags": [
          "Deployment"
        ]
      },
      "get": {
        "description": "Retrieves a deployment. The deployment is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment",
                  "type": "GetDeploymentByIDEndpoint decodeHTTPGetDeploymentByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Deployment",
        "tags": [
          "Deployment"
        ]
      },
      "patch": {
        "description": "Updates the deployment status.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeploymentStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment",
                  "type": "PatchDeploymentStatusEndpoint decodeHTTPPatchDeploymentStatusReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Deployment Status",
        "tags": [
          "Deployment"
        ]
      }
    },
    "/core/v2/deployments/{deploymentID}/consent": {
      "get": {
        "description": "Request the user consent for a deployment.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentConsentResponse",
                  "type": "GetDeploymentConsentsEndpoint decodeHTTPGetDeploymentConsentsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Request User Consents from Deployment ID",
        "tags": [
          "Deployment"
        ]
      },
      "post": {
        "description": "Request the user consent for a deployment. It defaults to a 30 second timeout.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeploymentConsentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddDeploymentConsentResponse",
                  "type": "AddDeploymentConsentEndpoint decodeHTTPAddDeploymentConsentReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Request User Consent",
        "tags": [
          "Deployment"
        ]
      }
    },
    "/core/v2/deployments/{deploymentID}/desiredstate": {
      "put": {
        "description": "Sets the desired state for a given deployment.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeploymentDesiredStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment",
                  "type": "PatchDeploymentDesiredStateEndpoint decodeHTTPPatchDeploymentDesiredStateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Set Desired State",
        "tags": [
          "Deployment"
        ]
      }
    },
    "/core/v2/deployments/{deploymentID}/logs": {
      "get": {
        "deprecated": true,
        "description": "Retrieves multiple deployment logs associated with a single deployment, with the option to set limit and offset. The deployment is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by deploymnt ID.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "Filter by text search.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "Filter by component type.",
            "in": "query",
            "name": "componentType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "Filter by log level.",
            "in": "query",
            "name": "logLevels",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "ERROR",
                  "WARN",
                  "INFO",
                  "DEBUG"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "Ordering is ascending or descending (ASC/DESC). It defaults to DESC.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentLogsResponse",
                  "type": "GetDeploymentLogsEndpoint decodeHTTPGetDeploymentLogsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Deployment Logs for Deployment",
        "tags": [
          "Deployment Log"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Creates multiple deployment logs for a single deployment. The deployment is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeploymentLogsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedDeploymentLogsResponse",
                  "type": "AddDeploymentLogsEndpoint decodeHTTPAddDeploymentLogsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Deployment Logs for Deployment",
        "tags": [
          "Deployment Log"
        ]
      }
    },
    "/core/v2/deployments/{deploymentID}/statuslogs": {
      "description": "Retrieves multiple status logs associated with a single deployment, with the option to set limit and offset. The deployment is identified by an ID.",
      "get": {
        "deprecated": true,
        "description": "Retrieves multiple status logs for a single deployment.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the deployment.",
            "in": "path",
            "name": "deploymentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllStatusLogsResponse",
                  "type": "GetAllStatusLogsEndpoint decodeHTTPGetAllStatusLogsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Status Logs for Deployment",
        "tags": [
          "Deployment Log"
        ]
      },
      "summary": "Get Multiple Status Logs for Deployment"
    },
    "/core/v2/device-attribute-keys": {
      "get": {
        "description": "Retrieves the attribute keys associated with a device. Examples are Brand, Year.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "query",
            "name": "deviceModelID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeviceAttributesResponse",
                  "type": "GetDeviceAttributeKeysEndpoint decodeHTTPGetDeviceAttributeKeysReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Attribute Keys",
        "tags": [
          "Device Attribute"
        ]
      }
    },
    "/core/v2/device-attribute-values": {
      "get": {
        "description": "Retrieves values that are associated with a device attribute key. Examples are Make, 2021. Enter an attribute as query parameter.",
        "parameters": [
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "An attribute to select. An attribute is a key, the endpoint will return the value. (Example - Color might return Blue, Red, Green.)",
            "in": "query",
            "name": "selectedAttribute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "query",
            "name": "deviceModelID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeviceAttributesResponse",
                  "type": "GetDeviceAttributeValuesEndpoint decodeHTTPGetDeviceAttributeValuesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Attribute Values",
        "tags": [
          "Device Attribute"
        ]
      }
    },
    "/core/v2/device-component-histories": {
      "get": {
        "description": "Retrieves the history of the component list of a device. The device is identified by an ID.",
        "parameters": [
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "in": "query",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceComponentHistory",
                  "type": "GetDeviceComponentHistoryByDeviceIDEndpoint decodeHTTPGetDeviceComponentHistoryByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Component History",
        "tags": [
          "Device Component"
        ]
      }
    },
    "/core/v2/device-groups": {
      "get": {
        "description": "Retrieves all device groups, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllDeviceGroupsResponse",
                  "type": "GetDeviceGroupsEndpoint decodeHTTPGetAllDeviceGroupsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Device Groups",
        "tags": [
          "Device Group"
        ]
      },
      "post": {
        "description": "Creates a device group. Attributes for device group creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyID": "fac2ee0c-3a1d-4529-bb0b-e65c07370ccc",
                "deviceGroupName": "Sibros Vehicle Group",
                "deviceModelID": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
                "filter": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"carModel1, carModel2\"]}, \"serialNumbers\":[\"serialNumber1\", \"serialNumber2\"]}"
              },
              "schema": {
                "$ref": "#/components/schemas/AddDeviceGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup",
                  "type": "AddDeviceGroupEndpoint decodeHTTPAddDeviceGroupReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Device Group",
        "tags": [
          "Device Group"
        ]
      }
    },
    "/core/v2/device-groups/{deviceGroupID}": {
      "delete": {
        "description": "Permanently deletes a device group. Only the group will be deleted, the devices in the group remain intact.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device group.",
            "in": "path",
            "name": "deviceGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDeviceGroupByIDResponse",
                  "type": "DeleteDeviceGroupByIDEndpoint decodeHTTPDeleteDeviceGroupByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Device Group",
        "tags": [
          "Device Group"
        ]
      },
      "get": {
        "description": "Retrieves a device group. The device group is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device group.",
            "in": "path",
            "name": "deviceGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup",
                  "type": "GetDeviceGroupByIDEndpoint decodeHTTPGetDeviceGroupByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Group",
        "tags": [
          "Device Group"
        ]
      },
      "put": {
        "description": "Updates a device group by setting the values within the request body. Attributes not provided will be left unchanged. The device group is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device group.",
            "in": "path",
            "name": "deviceGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "deviceGroupName": "Sibros Vehicle Group",
                "deviceModelID": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
                "filter": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"carModel1, carModel2\"]}, \"serialNumbers\":[\"serialNumber1\", \"serialNumber2\"]}"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup",
                  "type": "UpdateDeviceGroupEndpoint decodeHTTPUpdateDeviceGroupReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device Group",
        "tags": [
          "Device Group"
        ]
      }
    },
    "/core/v2/device-groups/{deviceGroupID}/device-ids": {
      "get": {
        "description": "Retrieves the device IDs of a device group. The device group is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device group.",
            "in": "path",
            "name": "deviceGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by serial number pattern.",
            "in": "query",
            "name": "serialNumberPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeviceIDsByDeviceGroupIDResponse",
                  "type": "GetDeviceIDsByDeviceGroupIDEndpoint decodeHTTPGetDeviceIDsByDeviceGroupIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device IDs of Device Group",
        "tags": [
          "Device Group"
        ]
      }
    },
    "/core/v2/device-logs": {
      "get": {
        "description": "Retrieves all device logs, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter device logs by start time.",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by end time.",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device log files by name pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by the log configuration that generated them.",
            "in": "query",
            "name": "selectiveLogConfigID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by the log rule that generated them.",
            "in": "query",
            "name": "logRuleID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by device model.",
            "in": "query",
            "name": "deviceModelID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceLogsPage",
                  "type": "GetAllDeviceLogsEndpoint decodeHTTPGetAllDeviceLogsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Device Logs",
        "tags": [
          "Device Log"
        ]
      }
    },
    "/core/v2/device-logs/{devicelogId}": {
      "delete": {
        "description": "Permanently deletes a device log.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device log.",
            "in": "path",
            "name": "devicelogId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDeviceLogByIDResponse",
                  "type": "DeleteDeviceLogByIDEndpoint decodeHTTPDeleteDeviceLogByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Device Log",
        "tags": [
          "Device Log"
        ]
      },
      "get": {
        "description": "Retrieves a device log.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device log.",
            "in": "path",
            "name": "devicelogId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDeviceLogResponse",
                  "type": "GetDeviceLogByIDEndpoint decodeHTTPGetDeviceLogByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Log",
        "tags": [
          "Device Log"
        ]
      },
      "patch": {
        "description": "Updates a device log.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device log.",
            "in": "path",
            "name": "devicelogId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceLogStatusAndFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDeviceLogResponse",
                  "type": "UpdateDeviceLogStatusAndFileEndpoint decodeHTTPUpdateDeviceLogStatusAndFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device Log",
        "tags": [
          "Device Log"
        ]
      },
      "put": {
        "description": "Updates a device log.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device log.",
            "in": "path",
            "name": "devicelogId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "comment": "some comments",
                "deviceID": "9748e046-6bbb-499e-8724-cb9f190bc13b",
                "deviceLogStatus": "UPLOADED",
                "downloadURL": "example-download.url",
                "endTime": "2020-02-03T20:20:20.202Z",
                "file": {
                  "downloadURL": "example-download.url",
                  "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                  "fileName": "file2.tar",
                  "fileSizeBytes": 67,
                  "fileStatus": "NOT_UPLOADED",
                  "path": "/some/path",
                  "uploadURL": "example-upload.url"
                },
                "fileID": "7f25616a-9a6d-47ab-a66d-e597c84e77b3",
                "releaseNotes": "1.0.0",
                "startTime": "2020-02-02T20:20:20.202Z",
                "uploadURL": "example-upload.url"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDeviceLogResponse",
                  "type": "UpdateDeviceLogEndpoint decodeHTTPUpdateDeviceLogReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device Log",
        "tags": [
          "Device Log"
        ]
      }
    },
    "/core/v2/device-models": {
      "get": {
        "description": "Retrieves all device models, with the option to set limit and offset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "deprecated": false,
            "description": "Filter device models by name pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device models by model code.",
            "in": "query",
            "name": "modelCode",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModelsPage",
                  "type": "GetDeviceModelsEndpoint decodeHTTPGetDeviceModelsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Device Models",
        "tags": [
          "Device Model"
        ]
      },
      "post": {
        "description": "Creates a device model. Attributes for device model creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyID": "b9ed14bb-b2ff-4ba3-a346-5cfa158db96e",
                "modelCodes": "[model1, model2]",
                "name": "Sibros Device Model"
              },
              "schema": {
                "$ref": "#/components/schemas/AddDeviceModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModel",
                  "type": "AddDeviceModelEndpoint decodeHTTPAddDeviceModelReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Device Model",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}": {
      "delete": {
        "description": "Permanently deletes a device model. The device model entry is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResourceDeleteResponse",
                  "type": "DeleteDeviceModelByIDEndpoint decodeHTTPDeleteDeviceModelByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Device Model",
        "tags": [
          "Device Model"
        ]
      },
      "get": {
        "description": "Retrieves a device model. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModel",
                  "type": "GetDeviceModelByIDEndpoint decodeHTTPGetDeviceModelByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model",
        "tags": [
          "Device Model"
        ]
      },
      "put": {
        "description": "Updates a device model. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "modelCodes": "[model1, model2]",
                "name": "Sibros Device Model"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModel",
                  "type": "UpdateDeviceModelByIDEndpoint decodeHTTPUpdateDeviceModelByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device Model",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/command-sequence-definitions": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command sequence definitions for the given device model, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "example": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "A unique identifier for the decoder mapping.",
            "in": "query",
            "name": "decoderMappingId",
            "required": false,
            "schema": {
              "example": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandRequests": [
                      {
                        "commandId": 200,
                        "commandRequestId": "",
                        "companyId": "",
                        "createdAt": "",
                        "creatorUserId": null,
                        "deviceId": "00000000-0000-0000-0000-000000000000",
                        "payload": {
                          "ecuAddress": "601",
                          "hexString": "22f111"
                        },
                        "status": "",
                        "updatedAt": ""
                      }
                    ],
                    "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-05-25T17:19:32.320762Z",
                    "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                    "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                    "description": "Example sequence definition with one UDS request",
                    "inUse": false,
                    "name": "ExampleSequence",
                    "updatedAt": "2022-06-15T04:11:17.517174Z"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/CommandSequenceDefinitionsPage",
                  "type": "GetAllCommandSequenceDefinitionsByDeviceModelIDEndpoint decodeHTTPGetAllCommandSequenceDefinitionsByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Device Model Command Sequence Definitions",
        "tags": [
          "Command Sequence Definition"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/controllers": {
      "get": {
        "description": "Retrieves all device model controllers, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the component.",
            "in": "query",
            "name": "componentID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllersPage",
                  "type": "GetControllersEndpoint decodeHTTPGetControllersReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Controllers",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/decoder-mappings": {
      "get": {
        "description": "Retrieves all device model decoder mappings, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_name"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_namePattern"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_decoderMappingIDs"
          },
          {
            "$ref": "#/components/parameters/decoderMappingsFilter_customDataMappingID"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecoderMappingsPage",
                  "type": "GetDecoderMappingsEndpoint decodeHTTPGetDecoderMappingsByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Decoder Mappings",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/default-state": {
      "get": {
        "description": "Retrieves the latest approved device model default state. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultState",
                  "type": "GetDefaultStateByDeviceModelIDEndpoint decodeHTTPGetDefaultStateByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Default State",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/deployments": {
      "get": {
        "description": "Retrieves deployments associated with a device model, with additional options for filtering, ordering, and pagination.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filters to deployments in the specified device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deploymentType"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceSerialNumber"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_statuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_substatuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeLowerBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeUpperBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentOrderBy"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentsPageResponse",
                  "type": "GetDeploymentsEndpoint decodeHTTPGetDeploymentsByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Deployments",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/device-groups": {
      "get": {
        "description": "Retrieves all device model device groups, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Any case-insensitive substring of a device group name.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupsPage",
                  "type": "GetDeviceGroupsEndpoint decodeHTTPGetDeviceGroupsByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Device Groups",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/devices": {
      "get": {
        "description": "Retrieves all devices of a device model, with the option to set limit and offset. Results can be filtered by a number of attributes. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device serial number pattern.",
            "in": "query",
            "name": "serialNumberPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device serial numbers.",
            "in": "query",
            "name": "deviceSerialNumbers",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device tags.",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device group IDs.",
            "in": "query",
            "name": "deviceGroupIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device IDs.",
            "in": "query",
            "name": "deviceIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device attributes.",
            "in": "query",
            "name": "attributes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device components.",
            "in": "query",
            "name": "components",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by current selective log config ID.",
            "in": "query",
            "name": "currentSelectiveLogConfigID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by devices created before the timestamp.",
            "in": "query",
            "name": "createdBefore",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by devices created after the timestamp.",
            "in": "query",
            "name": "createdAfter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesPage",
                  "type": "GetDevicesEndpoint decodeHTTPGetDevicesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Devices",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/package-groups": {
      "get": {
        "description": "Retrieves all device model package groups, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by package group name.",
            "in": "query",
            "name": "pkgGroupName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageGroupsPage",
                  "type": "GetPackageGroupsByDeviceModelIDEndpoint decodeHTTPGetPackageGroupsByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Package Groups",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/packages": {
      "get": {
        "description": "Retrieves all device model packages, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by package version.",
            "in": "query",
            "name": "pkgVersion",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackagesPage",
                  "type": "GetPackagesByDeviceModelIDEndpoint decodeHTTPGetPackagesByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Packages",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/device-models/{deviceModelID}/rollouts": {
      "get": {
        "description": "Retrieves all device model rollouts, with the option to set limit and offset. The device model is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device model.",
            "in": "path",
            "name": "deviceModelID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Type of the rollout, either SOFTWARE_UPDATE or SELECTIVE_LOG_CONFIG.",
            "in": "query",
            "name": "rolloutType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutsPage",
                  "type": "GetRolloutsEndpoint decodeHTTPGetRolloutsByDeviceModelIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Model Rollouts",
        "tags": [
          "Device Model"
        ]
      }
    },
    "/core/v2/devices": {
      "get": {
        "description": "Retrieves all devices, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by device serial number pattern.",
            "in": "query",
            "name": "serialNumberPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device serial numbers.",
            "in": "query",
            "name": "deviceSerialNumbers",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device tags.",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device group IDs.",
            "in": "query",
            "name": "deviceGroupIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device IDs.",
            "in": "query",
            "name": "deviceIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device attributes.",
            "in": "query",
            "name": "attributes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device components.",
            "in": "query",
            "name": "components",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device model IDs.",
            "in": "query",
            "name": "deviceModelIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by devices created before the timestamp.",
            "in": "query",
            "name": "createdBefore",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by devices created after the timestamp.",
            "in": "query",
            "name": "createdAfter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by current selective log config ID.",
            "in": "query",
            "name": "currentSelectiveLogConfigID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesPage",
                  "type": "GetDevicesEndpoint decodeHTTPGetDevicesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Devices",
        "tags": [
          "Device"
        ]
      },
      "post": {
        "description": "Creates a device. Attributes for device creation are under request body schema. Note - Devices must undergo provisioning to be fully connected.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "allowReprovisioning": false,
                "attributes": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
                "companyID": "8fbb6c25-5c00-48de-b445-a8c49b1df1f3",
                "components": "[{\"componentType\": \"BAT\", \"componentSerialNumber\": \"bin-number\", \"componentName\": \"\", \"attributes\": {\"bms\": \"bms-serial-number\"}]",
                "currentPackageId": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
                "currentSelectiveLogConfigId": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
                "decoderName": "example-decoder-mapping-name",
                "deviceModelID": "48b49aca-bc50-43f1-800b-bececba69a59",
                "deviceName": "Sibros Vehicle",
                "deviceSerialNumber": "SCA664S55CUX50961",
                "deviceType": "VEHICLE",
                "liveLogConfig": null,
                "tags": "[experimental,group1,anyString]"
              },
              "schema": {
                "$ref": "#/components/schemas/AddDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "AddDeviceEndpoint decodeHTTPAddDeviceReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/upsert": {
      "post": {
        "description": "Creates a device if it doesn't exist. Otherwise, updates the existing device.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDevicesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddDevicesResponse",
                  "type": "UpsertDevicesEndpoint decodeHTTPUpsertDevicesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update or Insert Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}": {
      "delete": {
        "description": "Permanently deletes a device. Note - All associated deployments and components will be automatically removed.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDeviceByIDResponse",
                  "type": "DeleteDeviceByIDEndpoint decodeHTTPDeleteDeviceByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Device",
        "tags": [
          "Device"
        ]
      },
      "get": {
        "description": "Retrieves a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "GetDeviceByIDEndpoint decodeHTTPGetDeviceByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device",
        "tags": [
          "Device"
        ]
      },
      "patch": {
        "description": "Updates specific fields of a device.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeviceByIDRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "PatchDeviceByIDEndpoint decodeHTTPPatchDeviceByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "description": "Updates a device by setting the values within the request body. Attributes not provided will be left unchanged.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "allowReprovisioning": false,
                "attributes": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
                "components": "[{\"componentType\": \"BAT\", \"componentSerialNumber\": \"bin-number\", \"componentName\": \"\", \"attributes\": {\"bms\": \"bms-serial-number\"}]",
                "currentPackageId": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
                "currentSelectiveLogConfigId": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
                "decoderName": "example-decoder-mapping-name",
                "deviceModelID": "48b49aca-bc50-43f1-800b-bececba69a59",
                "deviceName": "Sibros Vehicle",
                "deviceSerialNumber": "ABC664S55CUX50961",
                "deviceType": "VEHICLE",
                "liveLogConfig": null,
                "selectiveLogConfig": "{ \"messages\": [ { \"bus_id\": 1, \"message_id\": 32, \"frequency_ms\": 1000 } ], \"conditions\": [ { \"bus_id\": 1, \"message_id\": 16, \"compare_value\": 1, \"signal\": { \"operator\": \"==\", \"stop_bit\": 1, \"start_bit\": 0 } } ] }",
                "tags": "[experimental,group1,someString]"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "UpdateDeviceEndpoint decodeHTTPUpdateDeviceReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/active-selective-log-config": {
      "get": {
        "description": "Retrieves the active log configuration deployed to a device in json format.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfig",
                  "type": "GetActiveSelectiveLogByDeviceIDEndpoint decodeHTTPGetActiveSelectiveLogByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Active Device Log Configuration",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/allow-reprovisioning": {
      "put": {
        "description": "Sets a flag indicating whether a device should be allowed to reprovision.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": false,
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetAllowReprovisioningByDeviceIDResponse",
                  "type": "SetAllowReprovisioningByDeviceIDEndpoint decodeHTTPSetAllowReprovisioningByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Allow Device ReProvisioning",
        "tags": [
          "Device Maintenance"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/attributes": {
      "patch": {
        "deprecated": true,
        "description": "Updates the attributes associated with a device.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeviceByIDRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "PatchDeviceAttributesEndpoint decodeHTTPPatchDeviceByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device Attributes",
        "tags": [
          "Device Attribute"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/command-requests": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command requests associated with a device, with the option to set limit and offset. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command requests after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command requests before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandSequencePosition": null,
                    "commandSequenceRequestId": null,
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:26:44.950605Z",
                    "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                    "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "metadata": null,
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": "22f111"
                    },
                    "status": "RESPONSE_PENDING",
                    "updatedAt": "2022-06-18T03:26:51.827053Z"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandRequestsResponse",
                  "type": "GetAllCommandRequestsByDeviceIDEndpoint decodeHTTPGetAllCommandRequestsByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Device Command Requests",
        "tags": [
          "Command Request"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/command-responses": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command responses associated with a device, with the option to set limit and offset. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the command.",
            "in": "query",
            "name": "commandId",
            "required": false,
            "schema": {
              "example": 200,
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command responses before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandId": 200,
                    "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
                    "commandResponseId": "fc9850cd-77a4-4504-a183-1a6f29e73283",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-18T03:28:44.950605Z",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "deviceTimestamp": "2022-06-18T03:27:44.950605Z",
                    "payload": {
                      "ecuAddress": "601",
                      "hexString": ""
                    },
                    "status": "COMPLETED"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandResponsesResponse",
                  "type": "GetAllCommandResponsesByDeviceIDEndpoint decodeHTTPGetAllCommandResponsesByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Device Command Responses",
        "tags": [
          "Command Response"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/command-sequence-requests": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all command sequence requests for the given device, with the option to set limit and offset. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "A unique identifier for the associated command sequence definition.",
            "in": "query",
            "name": "commandSequenceDefinitionId",
            "required": false,
            "schema": {
              "example": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command sequence requests after the lower bound timestamp.",
            "in": "query",
            "name": "timestampLowerBound",
            "required": false,
            "schema": {
              "example": "2022-06-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Captures the command sequence requests before the upper bound timestamp.",
            "in": "query",
            "name": "timestampUpperBound",
            "required": false,
            "schema": {
              "example": "2022-08-18T03:26:51.827053Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
                    "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
                    "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
                    "createdAt": "2022-06-15T04:11:17.517174Z",
                    "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
                    "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
                    "status": "REQUEST_PENDING",
                    "statusHistory": [
                      {
                        "reason": "command sequence request created",
                        "setAt": "2022-06-15T04:11:17.517174Z",
                        "status": "REQUEST_PENDING"
                      }
                    ],
                    "updatedAt": "2022-06-15T04:11:17.517174Z"
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/GetAllCommandSequenceRequestsResponse",
                  "type": "GetAllCommandSequenceRequestsByDeviceIDEndpoint decodeHTTPGetAllCommandSequenceRequestsByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get All Device Command Sequence Requests",
        "tags": [
          "Command Sequence Request"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/components": {
      "patch": {
        "description": "Updates the component list of an individual device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceComponentsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "UpdateDeviceComponentsEndpoint decodeHTTPUpdateDeviceComponentsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Device Components",
        "tags": [
          "Device Component"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/components/{componentID}": {
      "get": {
        "description": "Retrieves the component of a device. A device typically represents a vehicle, the component represents a ECU. Device and component are identified by their IDs.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the device component.",
            "in": "path",
            "name": "componentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceComponent",
                  "type": "GetDeviceComponentByIDEndpoint decodeHTTPGetDeviceComponentByIDRequest encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Component",
        "tags": [
          "Device Component"
        ]
      },
      "put": {
        "description": "Replaces a singular component of an individual device. Device and component are identified by their IDs.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the device component.",
            "in": "path",
            "name": "componentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "attributes": "{\"partno\":\"DH191105\",\"revision\":\"02\"}",
                "componentName": "Sibros_TCU",
                "componentSerialNumber": "TCU_SN_1234",
                "componentType": "ECU"
              },
              "schema": {
                "$ref": "#/components/schemas/ReplaceDeviceComponentRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceComponent",
                  "type": "ReplaceDeviceComponentEndpoint decodeHTTPReplaceDeviceComponentsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Replace Device Component",
        "tags": [
          "Device Component"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/configurations": {
      "get": {
        "description": "Retrieves configurations associated with a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeviceConfigsByDeviceIDResponse",
                  "type": "GetDeviceConfigurationsByDeviceIDEndpoint decodeHTTPGetConfigurationsByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Configurations",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/connection-status": {
      "get": {
        "description": "Retrieves the connection status of a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "connected": true,
                  "timestamp": "2020-02-02T20:20:20.202Z"
                },
                "schema": {
                  "$ref": "#/components/schemas/DeviceConnectionStatus",
                  "type": "GetDeviceConnectionStatusByIDEndpoint decodeHTTPGetDeviceConnectionStatusByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Device Connection Status",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/decoder-id": {
      "patch": {
        "deprecated": true,
        "description": "Updates the decoder ID of a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device",
                  "type": "PatchDeviceDecoderNameEndpoint decodeHTTPPatchDeviceByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Decoder ID of Device",
        "tags": [
          "Decoder Mapping"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/default-state": {
      "get": {
        "description": "Retrieves the default state of a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDefaultPackageAndSLCIDsByDeviceIDResponse",
                  "type": "GetDefaultPackageAndSLCIDsByDeviceIDEndpoint decodeHTTPGetDefaultStateByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Default State",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/defined-commands": {
      "get": {
        "deprecated": true,
        "description": "Retrieves the defined commands associated with a device, based on the decoder mapping it is currently using. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commands": [
                    {
                      "commandId": 200,
                      "description": "Send and receive UDS payloads",
                      "group": "UDS",
                      "name": "UDS",
                      "requestPayloadFields": [
                        {
                          "description": "Logical address (if DoIP) or UDS request ID (if CAN) in hex string format",
                          "fieldName": "ecuAddress",
                          "inputOptions": {
                            "required": true,
                            "stringType": "HEX"
                          },
                          "inputType": "STRING",
                          "label": "ECU Address (Hex)"
                        },
                        {
                          "description": "UDS request payload in hex string format",
                          "fieldName": "hexString",
                          "inputOptions": {
                            "required": true,
                            "stringType": "HEX"
                          },
                          "inputType": "STRING",
                          "label": "Payload (Hex)"
                        }
                      ],
                      "responsePayloadFields": [
                        {
                          "description": "16 or 11/29 bit ECU address",
                          "displayOptions": {
                            "stringType": "HEX"
                          },
                          "fieldName": "ecuAddress",
                          "label": "ECU Address",
                          "outputType": "STRING"
                        },
                        {
                          "description": "UDS response payload in hex string format",
                          "displayOptions": {
                            "stringType": "HEX"
                          },
                          "fieldName": "hexString",
                          "label": "Hex Payload",
                          "outputType": "STRING"
                        }
                      ]
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/GetDefinedCommandsResponse",
                  "type": "GetDefinedCommandsEndpoint decodeHTTPGetDefinedCommandsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Device Defined Commands",
        "tags": [
          "Command Metadata"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/deploy-latest-package": {
      "post": {
        "description": "Deploys the latest package for the specified device. The latest package is defined as the package in the active deployment for the device, if any, or else the package in the latest completed or in-progress deployment to the device, if any, or else the default package. Calling this endpoint is equivalent to calling AddDevice with the package ID of the device's latest package",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "provisioning": true
              },
              "schema": {
                "$ref": "#/components/schemas/AddDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment",
                  "type": "DeployLatestPackageEndpoint decodeHTTPDeployLatestPackageReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Deploy Latest Package",
        "tags": [
          "Device Maintenance"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/deployments": {
      "get": {
        "description": "Retrieves deployments associated with a device, with additional options for filtering, ordering, and pagination.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deploymentType"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceSerialNumber"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_statuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_substatuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeLowerBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeUpperBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentOrderBy"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentsPageResponse",
                  "type": "GetDeploymentsEndpoint decodeHTTPGetDeploymentsByDeviceIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Deployments",
        "tags": [
          "Device"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/latest-signal-timestamp": {
      "get": {
        "description": "Retrieves the timestamp of the latest signal for a given device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLatestSignalTimestampResponse",
                  "type": "GetLatestSignalTimestampByDeviceIDEndpoint decodeHTTPGetDeviceByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Latest Signal Timestamp for Device",
        "tags": [
          "Signal"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/start-deep-updater-provisioning": {
      "post": {
        "description": "Starts Deep Updater provisioning for a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "bypassUserConsent": true,
                "noOp": false,
                "packageID": "9bd28cf1-4314-40e8-8489-52af420c6534"
              },
              "schema": {
                "$ref": "#/components/schemas/DeepUpdaterProvisioningDeploymentOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartDeepUpdaterProvisioningResponse",
                  "type": "StartDeepUpdaterProvisioningEndpoint decodeHTTPStartDeepUpdaterProvisioningReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Start Deep Updater Provisioning",
        "tags": [
          "Device Maintenance"
        ]
      }
    },
    "/core/v2/devices/{deviceID}/supported-commands": {
      "get": {
        "deprecated": true,
        "description": "Retrieves the supported commands associated with a device. The device is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "example": "25978d46-bc35-4047-a737-c563867966f9",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "commandIds": [
                    100,
                    101,
                    102,
                    200
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/GetSupportedCommandsResponse",
                  "type": "GetSupportedCommandsEndpoint decodeHTTPGetSupportedCommandsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": "Returned for a successful query."
          }
        },
        "summary": "Get Device Supported Commands",
        "tags": [
          "Command Metadata"
        ]
      }
    },
    "/core/v2/devices/{deviceId}/device-logs": {
      "get": {
        "description": "Retrieves a device log.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Offset defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Limit defaults to 20.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by start time.",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by end time.",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter device logs by name pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceLogsPage",
                  "type": "GetAllDeviceLogsEndpoint decodeHTTPGetAllDeviceLogsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Device Log",
        "tags": [
          "Device Log"
        ]
      },
      "post": {
        "description": "Creates a device log. Attributes for device log creation are under request body schema.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the device.",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeviceLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericDeviceLogResponse",
                  "type": "AddDeviceLogEndpoint decodeHTTPAddDeviceLogReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Device Log",
        "tags": [
          "Device Log"
        ]
      }
    },
    "/core/v2/fault-mode-maps": {
      "get": {
        "description": "Retrieves all Fault Mode Maps, with the option to set limit and offset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "deprecated": false,
            "description": "Filter Fault Mode Maps by fault mode map IDs.",
            "in": "query",
            "name": "faultModeMapIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter Fault Mode Maps using isDefault flag.",
            "in": "query",
            "name": "isDefault",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "deprecated": false,
            "description": "Filter Fault Mode Maps using a name pattern. The pattern is applied as a case-insensitive substring match. '_' is a wildcard that matches any one character and '%' is a wildcard that matches any sequence of characters. '%' is implicitly added to the beginning and end of the pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllFaultModeMapsResponse",
                  "type": "GetFaultModeMapsEndpoint decodeHTTPGetFaultModeMapsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Fault Mode Maps",
        "tags": [
          "Fault Mode Map"
        ]
      },
      "post": {
        "description": "Creates a Fault Mode Map. Attributes for Fault Mode Map creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFaultModeMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaultModeMap",
                  "type": "AddFaultModeMapEndpoint decodeHTTPAddFaultModeMapReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Fault Mode Map",
        "tags": [
          "Fault Mode Map"
        ]
      }
    },
    "/core/v2/fault-mode-maps/{faultModeMapID}": {
      "delete": {
        "description": "Permanently deletes a Fault Mode Map. The Fault Mode Map entry is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the Fault Mode Map.",
            "in": "path",
            "name": "faultModeMapID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFaultModeMapResponse",
                  "type": "DeleteFaultModeMapByIDEndpoint decodeHTTPDeleteFaultModeMapReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Fault Mode Map",
        "tags": [
          "Fault Mode Map"
        ]
      },
      "get": {
        "description": "Retrieves a Fault Mode Map. The Fault Mode Map is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the Fault Mode Map.",
            "in": "path",
            "name": "faultModeMapID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaultModeMap",
                  "type": "GetFaultModeMapByIDEndpoint decodeHTTPGetFaultModeMapReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Fault Mode Map",
        "tags": [
          "Fault Mode Map"
        ]
      },
      "put": {
        "description": "Updates the Fault Mode Map identified by ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the Fault Mode Map.",
            "in": "path",
            "name": "faultModeMapID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFaultModeMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaultModeMap",
                  "type": "UpdateFaultModeMapByIDEndpoint decodeHTTPUpdateFaultModeMapReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Fault Mode Map",
        "tags": [
          "Fault Mode Map"
        ]
      }
    },
    "/core/v2/hardware-revisions": {
      "get": {
        "description": "Retrieves all hardware revisions, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by assembly ID.",
            "in": "query",
            "name": "assemblyID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by PCB ID.",
            "in": "query",
            "name": "pcbID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by usage ID.",
            "in": "query",
            "name": "usageID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareRevisionsPage",
                  "type": "GetHardwareRevisionsEndpoint decodeHTTPGetHardwareRevisionsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Hardware Revisions",
        "tags": [
          "Hardware Revision"
        ]
      },
      "post": {
        "description": "Creates a hardware revision. Attributes for hardware revision creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "PCBID": "pcb1",
                "assemblyID": "assembly1",
                "companyID": "4b0d0934-c0b3-4812-9398-6355930879c7",
                "controllerID": "sibros-controller",
                "usageID": "usage1"
              },
              "schema": {
                "$ref": "#/components/schemas/AddHardwareRevisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareRevision",
                  "type": "AddHardwareRevisionEndpoint decodeHTTPAddHardwareRevisionReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Hardware Revision",
        "tags": [
          "Hardware Revision"
        ]
      }
    },
    "/core/v2/hardware-revisions/{hardwareRevisionID}": {
      "delete": {
        "description": "Permanently deletes a hardware revision. The hardware revision is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the hardware revision.",
            "in": "path",
            "name": "hardwareRevisionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResourceDeleteResponse",
                  "type": "DeleteHardwareRevisionByIDEndpoint decodeHTTPDeleteHardwareRevisionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Hardware Revision",
        "tags": [
          "Hardware Revision"
        ]
      },
      "get": {
        "description": "Retrieves hardware revisions. The hardware revisions are identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the hardware revision.",
            "in": "path",
            "name": "hardwareRevisionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareRevision",
                  "type": "GetHardwareRevisionByIDEndpoint decodeHTTPGetHardwareRevisionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Hardware Revision",
        "tags": [
          "Hardware Revision"
        ]
      },
      "put": {
        "description": "Updates a hardware revision. The hardware revision is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the hardware revision.",
            "in": "path",
            "name": "hardwareRevisionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "PCBID": "pcb1",
                "assemblyID": "assembly1",
                "controllerID": "sibros-controller",
                "usageID": "usage1"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateHardwareRevisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareRevision",
                  "type": "UpdateHardwareRevisionByIDEndpoint decodeHTTPUpdateHardwareRevisionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Hardware Revision",
        "tags": [
          "Hardware Revision"
        ]
      }
    },
    "/core/v2/hardware-revisions/{hardwareRevisionID}/image-regions": {
      "get": {
        "description": "Retrieves the image regions associated with a hardware revision. The hardware revision is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the hardware revision.",
            "in": "path",
            "name": "hardwareRevisionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by index in the image region.",
            "in": "query",
            "name": "index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageRegionsPage",
                  "type": "GetImageRegionsEndpoint decodeHTTPGetImageRegionsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Image Regions of Hardware Revision",
        "tags": [
          "Hardware Revision"
        ]
      }
    },
    "/core/v2/image-metadata": {
      "delete": {
        "description": "Deletes an image given image metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteImagesByMetadataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteImageByIDResponse",
                  "type": "DeleteImagesByMetadataEndpoint decodeHTTPDeleteImagesByMetadataReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Image",
        "tags": [
          "Image"
        ]
      },
      "post": {
        "description": "Creates an image given image metadata. Note that this will not upload images. Upload URLs will be returned in the response payload for each image. Images must be uploaded to these URLs before they can be used in packages.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddImagesByMetadataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddImagesByMetadataResponse",
                  "type": "AddImagesByMetadataEndpoint decodeHTTPAddImagesByMetadataReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Image",
        "tags": [
          "Image"
        ]
      }
    },
    "/core/v2/image-regions": {
      "get": {
        "description": "Retrieves all image regions, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by index in the image region.",
            "in": "query",
            "name": "index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by the hardware revision ID.",
            "in": "query",
            "name": "hardwareRevisionID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by device model IDs.",
            "in": "query",
            "name": "deviceModelIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageRegionsPage",
                  "type": "GetImageRegionsEndpoint decodeHTTPGetImageRegionsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Image Regions",
        "tags": [
          "Image Region"
        ]
      },
      "post": {
        "description": "Creates an image region. Attributes for image region creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyID": "810dcd8f-3984-40d5-97f4-9fe353990f89",
                "dependencies": "[fd73d717-6e10-4b9f-81ff-2d709e452fed]",
                "forcedUpdate": true,
                "hardwareRevisionID": "3a49b591-c96a-4890-95b4-0fe868f40f38",
                "index": 0,
                "name": "updateable application region",
                "type": "Application"
              },
              "schema": {
                "$ref": "#/components/schemas/AddImageRegionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageRegion",
                  "type": "AddImageRegionEndpoint decodeHTTPAddImageRegionReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Image Region",
        "tags": [
          "Image Region"
        ]
      }
    },
    "/core/v2/image-regions/{imageRegionID}": {
      "delete": {
        "description": "Permanently deletes an image region. The image region is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image region.",
            "in": "path",
            "name": "imageRegionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResourceDeleteResponse",
                  "type": "DeleteImageRegionByIDEndpoint decodeHTTPDeleteImageRegionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Image Region",
        "tags": [
          "Image Region"
        ]
      },
      "get": {
        "description": "Retrieves an image region. The image region is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image region.",
            "in": "path",
            "name": "imageRegionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageRegion",
                  "type": "GetImageRegionByIDEndpoint decodeHTTPGetImageRegionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Image Region",
        "tags": [
          "Image Region"
        ]
      },
      "put": {
        "description": "Updates an image region. The image region is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image region.",
            "in": "path",
            "name": "imageRegionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "dependencies": "[fd73d717-6e10-4b9f-81ff-2d709e452fed]",
                "forcedUpdate": true,
                "hardwareRevisionID": "3a49b591-c96a-4890-95b4-0fe868f40f38",
                "index": 0,
                "name": "updateable application region",
                "type": "Application"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateImageRegionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageRegion",
                  "type": "UpdateImageRegionByIDEndpoint decodeHTTPUpdateImageRegionByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Image Region",
        "tags": [
          "Image Region"
        ]
      }
    },
    "/core/v2/image-regions/{imageRegionID}/images": {
      "get": {
        "description": "Retrieves images. The images are identified by the ID of the image region.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image region.",
            "in": "path",
            "name": "imageRegionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesPage",
                  "type": "GetImagesByImageRegionIDEndpoint decodeHTTPGetImagesByImageRegionIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Images by Image Region ID",
        "tags": [
          "Image Region"
        ]
      }
    },
    "/core/v2/images": {
      "get": {
        "description": "Retrieves images filtered by a variety of parameters.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A list of unique image identifiers. Only images with IDs in this list will be in the result set.",
            "in": "query",
            "name": "imageIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the package. Only images included in this package will be in the result set.",
            "in": "query",
            "name": "packageID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the image region. Only images associated with this image region will be in the result set.",
            "in": "query",
            "name": "imageRegionID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "An image version. Only images with this version will be in the result set.",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "An image version pattern. Only images with versions matching this pattern will be in the result set.",
            "in": "query",
            "name": "versionPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesPage",
                  "type": "GetImagesEndpoint decodeHTTPGetImagesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Images",
        "tags": [
          "Image"
        ]
      }
    },
    "/core/v2/images/{imageID}": {
      "delete": {
        "description": "Permanently deletes an image. The image is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image. An ID will be generated every time an image is created.",
            "in": "path",
            "name": "imageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteImageByIDResponse",
                  "type": "DeleteImageByIDEndpoint decodeHTTPDeleteImageReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Image",
        "tags": [
          "Image"
        ]
      },
      "get": {
        "description": "Retrieves an image. The image is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image. An ID will be generated every time an image is created.",
            "in": "path",
            "name": "imageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image",
                  "type": "GetImageByIDEndpoint decodeHTTPGetImageByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Image",
        "tags": [
          "Image"
        ]
      },
      "put": {
        "description": "Updates an image. The image is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the image. An ID will be generated every time an image is created.",
            "in": "path",
            "name": "imageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "custom": null,
                "file": {
                  "downloadURL": "example-download.url",
                  "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                  "fileName": "file2.tar",
                  "fileSizeBytes": 67,
                  "fileStatus": "UPLOADED",
                  "path": "/some/path",
                  "uploadURL": "example-upload.url"
                },
                "fileFormat": "bin",
                "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
                "startAddress": 4096,
                "uptaneHashes": [
                  {
                    "method": "sha256",
                    "value": "AAAA="
                  }
                ],
                "uptaneImageId": "uptane-image-id",
                "version": "1.0.1"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateImageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image",
                  "type": "UpdateImageEndpoint decodeHTTPUpdateImageReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Image",
        "tags": [
          "Image"
        ]
      }
    },
    "/core/v2/log-rules": {
      "get": {
        "description": "Retrieves all log rules, with the option to set limit and offset. The query parameter decoderMappingID will filter the results based on the ones that are compatible with the vehicle intended to receive the deployment.",
        "parameters": [
          {
            "allowEmptyValue": false,
            "deprecated": false,
            "description": "Filter by decoder mapping.",
            "in": "query",
            "name": "decoderMappingID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter log rules by name pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter log rules by the status of locked.",
            "in": "query",
            "name": "locked",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "deprecated": false,
            "description": "Filter log rules by the status of active.",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRulesPage",
                  "type": "GetLogRulesEndpoint decodeHTTPGetLogRulesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get All Log Rules",
        "tags": [
          "Log Rule"
        ]
      },
      "post": {
        "description": "Creates a new log rule. A log rule is the fundamental unit of a log configuration. Log rules specify what data to log, under what conditions that data should be logged, and how to store and upload the data. When a log rule is created through the API, a log rule object will be created and returned.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLogRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRule",
                  "type": "AddLogRuleEndpoint decodeHTTPAddLogRuleReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Log Rule",
        "tags": [
          "Log Rule"
        ]
      }
    },
    "/core/v2/log-rules/{logRuleID}": {
      "delete": {
        "description": "Permanently deletes a log rule as long as it is not part of a config that has been deployed to a device.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log rule.",
            "in": "path",
            "name": "logRuleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteLogRuleResponse",
                  "type": "DeleteLogRuleEndpoint decodeHTTPDeleteLogRuleReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Existing Log Rule",
        "tags": [
          "Log Rule"
        ]
      },
      "get": {
        "description": "Retrieves a log rule. The log rule is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log rule.",
            "in": "path",
            "name": "logRuleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRule",
                  "type": "GetLogRuleByIDEndpoint decodeHTTPGetLogRuleByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Existing Log Rule",
        "tags": [
          "Log Rule"
        ]
      },
      "patch": {
        "description": "Updates the name and/or hidden status of a log rule. Any field specified on the payload will be patched.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log rule.",
            "in": "path",
            "name": "logRuleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchLogRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRule",
                  "type": "PatchLogRuleByIDEndpoint decodeHTTPPatchLogRuleByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an Existing Log Rule",
        "tags": [
          "Log Rule"
        ]
      },
      "put": {
        "description": "Updates a log rule as long as it is not part of a config that has been deployed to a device.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log rule.",
            "in": "path",
            "name": "logRuleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLogRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRule",
                  "type": "UpdateLogRuleEndpoint decodeHTTPUpdateLogRuleReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Existing Log Rule",
        "tags": [
          "Log Rule"
        ]
      }
    },
    "/core/v2/log-rules/{logRuleID}/metadata": {
      "get": {
        "description": "Retrieves metadata pertaining to a log rule, such as the number of devices that are currently using a log rule or have been deployed one.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log rule.",
            "in": "path",
            "name": "logRuleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLogRuleMetadataResponse",
                  "type": "GetLogRuleMetadataEndpoint decodeHTTPGetLogRuleMetadataReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Log Rule Metadata",
        "tags": [
          "Log Rule"
        ]
      }
    },
    "/core/v2/master-tokens": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all master tokens, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMasterTokensResponse",
                  "type": "GetAllMasterTokensEndpoint decodeHTTPGetAllMasterTokensReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Master Tokens",
        "tags": [
          "Master Token"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Creates a new master token key and secret. Attributes for master token key and secret creation are under request body schema.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterToken",
                  "type": "AddMasterTokenEndpoint decodeHTTPAddMasterTokenReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Master Token Key and Secret",
        "tags": [
          "Master Token"
        ]
      }
    },
    "/core/v2/master-tokens/{masterTokenKey}": {
      "delete": {
        "deprecated": true,
        "description": "Permanently deletes a master token.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Unique key of the master token.",
            "in": "path",
            "name": "masterTokenKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMasterTokenByKeyResponse",
                  "type": "DeleteMasterTokenByKeyEndpoint decodeHTTPDeleteMasterTokenByKeyReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Master Token",
        "tags": [
          "Master Token"
        ]
      },
      "patch": {
        "deprecated": true,
        "description": "Updates a master token.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Unique key of the master token.",
            "in": "path",
            "name": "masterTokenKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMasterTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMasterTokenResponse",
                  "type": "UpdateMasterTokenEndpoint decodeHTTPUpdateMasterTokenReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Master Token",
        "tags": [
          "Master Token"
        ]
      }
    },
    "/core/v2/package-attachments/{packageAttachmentID}": {
      "delete": {
        "description": "Removes a package attachment. A package attachment can only be removed if the package is not yet deployed.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package attachment.",
            "in": "path",
            "name": "packageAttachmentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericPackageAttachmentResponse",
                  "type": "DeletePackageAttachmentByIDEndpoint decodeHTTPDeletePackageAttachmentByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Package Attachment",
        "tags": [
          "Package Attachment"
        ]
      }
    },
    "/core/v2/package-files/{packageFileID}": {
      "patch": {
        "description": "Updates the file field of a package file entity.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package file.",
            "in": "path",
            "name": "packageFileID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "fileHash": "db1ff24cf4321a314808f4f393d00209",
                "fileSizeBytes": 43,
                "fileStatus": "UPLOADED",
                "path": "/some/path"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageFileFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePackageFileFileResponse",
                  "type": "UpdatePackageFileFileEndpoint decodeHTTPUpdatePackageFileFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update File Field of Package File",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/package-groups": {
      "get": {
        "description": "Retrieves all package groups, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by package group name.",
            "in": "query",
            "name": "pkgGroupName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPackageGroupsResponse",
                  "type": "GetPackageGroupsEndpoint decodeHTTPGetPackageGroupsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Package Groups",
        "tags": [
          "Package Group"
        ]
      },
      "post": {
        "description": "Creates a package group. Attributes for package group creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "approvers": "[db087484-6eef-4c26-b923-facf5af33d8c]",
                "companyID": "08013e2d-a9c6-4666-8a26-b86d97df6a02",
                "description": "testing package",
                "deviceModelID": "2fa725b3-9560-46bd-b00d-43be654038d9",
                "packageGroupName": "Sibros Package Group",
                "packageIDs": "[85cab4e2-5112-479a-9fea-47f0122ed2b6]"
              },
              "schema": {
                "$ref": "#/components/schemas/AddPackageGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericPackageGroupResponse",
                  "type": "AddPackageGroupEndpoint decodeHTTPAddPackageGroupReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Package Group",
        "tags": [
          "Package Group"
        ]
      }
    },
    "/core/v2/package-groups/{packageGroupID}": {
      "delete": {
        "description": "Permanently deletes a package group. Only the group will be deleted, the packages of the group remain intact.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package group.",
            "in": "path",
            "name": "packageGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePackageGroupByIDResponse",
                  "type": "DeletePackageGroupByIDEndpoint decodeHTTPDeletePackageGroupByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Package Group",
        "tags": [
          "Package Group"
        ]
      },
      "get": {
        "description": "Retrieves a package group. The package group is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package group.",
            "in": "path",
            "name": "packageGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericPackageGroupResponse",
                  "type": "GetPackageGroupByIDEndpoint decodeHTTPGetPackageGroupByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Group",
        "tags": [
          "Package Group"
        ]
      },
      "put": {
        "description": "Updates a package group. The package group is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package group.",
            "in": "path",
            "name": "packageGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "approvers": "[db087484-6eef-4c26-b923-facf5af33d8c]",
                "description": "testing package",
                "deviceModelID": "2fa725b3-9560-46bd-b00d-43be654038d9",
                "packageGroupName": "Sibros Package Group",
                "packageIDs": "[85cab4e2-5112-479a-9fea-47f0122ed2b6]"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericPackageGroupResponse",
                  "type": "UpdatePackageGroupEndpoint decodeHTTPUpdatePackageGroupReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Package Group",
        "tags": [
          "Package Group"
        ]
      }
    },
    "/core/v2/package-groups/{packageGroupID}/packages": {
      "get": {
        "description": "Retrieves the package version in a package group. The package group is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package group.",
            "in": "path",
            "name": "packageGroupID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by the package statuses. Valid package statuses are PREPARING, IN_APPROVAL, APPROVED, DEPLOYED, QUARANTINED.",
            "in": "query",
            "name": "statuses",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by the a package version pattern. The pattern is applied as a case-insensitive substring match. '_' is a wildcard that matches any one character and '%' is a wildcard that matches any sequence of characters. '%' is implicitly added to the beginning and end of the pattern.",
            "in": "query",
            "name": "pkgVersionPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackagesPage",
                  "type": "GetPackagesByPackageGroupIDEndpoint decodeHTTPGetPackagesByPackageGroupIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Version in Package Group",
        "tags": [
          "Package Group"
        ]
      }
    },
    "/core/v2/package-manifest-entries": {
      "get": {
        "description": "Retrieves package manifest entries filtered by a variety of parameters.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package. Only package manifest entries associated with this package will be in the result set.",
            "in": "query",
            "name": "packageId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "A unique identifier for the image. Only package manifest entries associated with this image will be in the result set.",
            "in": "query",
            "name": "imageID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageManifestEntriesPage",
                  "type": "GetPackageManifestEntriesEndpoint decodeHTTPGetPackageManifestEntriesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Manifest Entries",
        "tags": [
          "Package Manifest Entry"
        ]
      },
      "post": {
        "description": "Creates package manifest entries. Attributes for package manifest entry creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPackageManifestEntriesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageManifestEntries",
                  "type": "AddPackageManifestEntriesEndpoint decodeHTTPAddPackageManifestEntriesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Package Manifest Entries",
        "tags": [
          "Package Manifest Entry"
        ]
      }
    },
    "/core/v2/package-manifest-entries/{packageManifestEntryID}": {
      "delete": {
        "description": "Permanently deletes a package manifest entry. The package manifest entry is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package manifest entry. An ID will be generated every time a package manifest entry is created.",
            "in": "path",
            "name": "packageManifestEntryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePackageManifestEntryByIDResponse",
                  "type": "DeletePackageManifestEntryByIDEndpoint decodeHTTPDeletePackageManifestEntryReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Package Manifest Entry",
        "tags": [
          "Package Manifest Entry"
        ]
      },
      "get": {
        "description": "Retrieves package manifest entries. The package manifest entries are identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package manifest entry. An ID will be generated every time a package manifest entry is created.",
            "in": "path",
            "name": "packageManifestEntryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageManifestEntry",
                  "type": "GetPackageManifestEntryByIDEndpoint decodeHTTPGetPackageManifestEntryByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Manifest Entry",
        "tags": [
          "Package Manifest Entry"
        ]
      },
      "put": {
        "description": "Updates a package manifest entry. The package manifest entry is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package manifest entry. An ID will be generated every time a package manifest entry is created.",
            "in": "path",
            "name": "packageManifestEntryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
                "imageId": "cca26b54-2aca-4b50-aa78-91e09d0bcc1f",
                "imageRegionId": "91133a5d-0b9b-446d-ada0-84133fb4cc9b",
                "packageId": "cfa0c49c-cc47-4b54-b19f-abbf86ca8576"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageManifestEntryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageManifestEntry",
                  "type": "UpdatePackageManifestEntryEndpoint decodeHTTPUpdatePackageManifestEntryReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Package Manifest Entry",
        "tags": [
          "Package Manifest Entry"
        ]
      }
    },
    "/core/v2/packages": {
      "get": {
        "description": "Retrieves all packages associated with given IDs, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by package IDs.",
            "in": "query",
            "name": "pkgids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by package version.",
            "in": "query",
            "name": "pkgVersion",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by a package version pattern. The pattern is applied as a case-insensitive substring match. '_' is a wildcard that matches any one character and '%' is a wildcard that matches any sequence of characters. '%' is implicitly added to the beginning and end of the pattern.",
            "in": "query",
            "name": "pkgVersionPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by the package group ID. Get all packages contained within a particular package group.",
            "in": "query",
            "name": "pkgGroupID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by the package statuses. Valid package statuses are PREPARING, IN_APPROVAL, APPROVED, DEPLOYED, QUARANTINED.",
            "in": "query",
            "name": "statuses",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackagesPage",
                  "type": "GetAllPackagesEndpoint decodeHTTPGetAllPackagesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Packages with Package ID",
        "tags": [
          "Package"
        ]
      },
      "post": {
        "description": "Creates a package. Attributes for package creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "approvers": [
                  {
                    "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
                    "status": "PENDING"
                  }
                ],
                "companyID": "659e11aa-f6a0-4db4-9aab-d6405e09cea8",
                "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
                "downloadURL": "example-download.url",
                "errorDescription": "some description",
                "file": {
                  "downloadURL": "example-download.url",
                  "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                  "fileName": "file2.tar",
                  "fileSizeBytes": 67,
                  "fileStatus": "UPLOADED",
                  "path": "/some/path",
                  "uploadURL": "example-upload.url"
                },
                "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
                "internalNotes": "some notes",
                "manifest": "manifest",
                "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
                "packageGroupName": "Sibros Package",
                "packageStatus": "IN_APPROVAL",
                "packageVersion": "1.1",
                "releaseCandidate": "string",
                "releaseNotes": "release notes",
                "uploadURL": "example-upload.url",
                "vcsInfo": "1.1"
              },
              "schema": {
                "$ref": "#/components/schemas/AddPackageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponse",
                  "type": "AddPackageEndpoint decodeHTTPAddPackageReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Package Version",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}": {
      "delete": {
        "description": "Permanently deletes a package.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePackageByIDResponse",
                  "type": "DeletePackageByIDEndpoint decodeHTTPDeletePackageByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Package Version",
        "tags": [
          "Package"
        ]
      },
      "get": {
        "description": "Retrieves a package. The package is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponse",
                  "type": "GetPackageByIDEndpoint decodeHTTPGetPackageByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Version",
        "tags": [
          "Package"
        ]
      },
      "put": {
        "description": "Updates a package. The package is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "approvers": [
                  {
                    "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
                    "status": "PENDING"
                  }
                ],
                "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
                "downloadURL": "example-download.url",
                "errorDescription": "some description",
                "file": {
                  "downloadURL": "example-download.url",
                  "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                  "fileName": "file2.tar",
                  "fileSizeBytes": 67,
                  "fileStatus": "UPLOADED",
                  "path": "/some/path",
                  "uploadURL": "example-upload.url"
                },
                "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
                "internalNotes": "some notes",
                "manifest": "manifest",
                "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
                "packageGroupName": "Sibros Package",
                "packageStatus": "IN_APPROVAL",
                "packageVersion": "1.1",
                "releaseCandidate": "string",
                "releaseNotes": "release notes",
                "uploadURL": "example-upload.url",
                "vcsInfo": "1.1"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponse",
                  "type": "UpdatePackageEndpoint decodeHTTPUpdatePackageReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Package Version",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/approval": {
      "put": {
        "description": "Approves a package version. The package version is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePackageApprovalResponse",
                  "type": "UpdatePackageApprovalEndpoint decodeHTTPUpdatePackageApprovalReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Approve Package",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/attachments": {
      "get": {
        "description": "Returns the attachment associated with a package.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageAttachmentsPage",
                  "type": "GetPackageAttachmentsEndpoint decodeHTTPGetPackageAttachmentsByPackageIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Attachments",
        "tags": [
          "Package Attachment"
        ]
      },
      "post": {
        "description": "In the portal, this appears as Package Metadata. Adds an attachment to a package. Only one attachment may be added to a package. Package attachments cannot be added or modified after the package has already been deployed. The API should return an upload url, which can be used to upload the file. Supported file types include .txt, .jpg, .jpeg, .png, .gif, .bmp, .pdf, .mp3, .wav, .ogg, .mp4, .mov, .avi, .csv, .html, .htm, .zip, .tar, .taz.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "file": {
                  "fileName": "package_metadata"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PackageAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageAttachment",
                  "type": "AddPackageAttachmentEndpoint decodeHTTPAddPackageAttachmentReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Package Attachment",
        "tags": [
          "Package Attachment"
        ]
      }
    },
    "/core/v2/packages/{packageID}/file": {
      "patch": {
        "description": "Updates status and file of a package version.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageStatusAndFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponse",
                  "type": "UpdatePackageStatusAndFileEndpoint decodeHTTPUpdatePackageStatusAndFileReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Package Version Status and File",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/images": {
      "get": {
        "description": "Retrieves the images associated with a package version.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetImagesByPackageIDResponse",
                  "type": "GetImagesByPackageIDEndpoint decodeHTTPGetImagesByPackageIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Images in Package Version",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/package-files": {
      "delete": {
        "description": "Permanently deletes all package files associated with a package version.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePackageByIDResponse",
                  "type": "DeletePackageFilesByPackageIDEndpoint decodeHTTPDeletePackageByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Package Files by Version",
        "tags": [
          "Package"
        ]
      },
      "get": {
        "description": "Retrieves package files by version.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageFile",
                  "type": "GetPackageFilesByPackageIDEndpoint decodeHTTPGetPackageFilesByPackageIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Files",
        "tags": [
          "Package"
        ]
      },
      "post": {
        "description": "Creates new package version files. Attributes for package version file creation are under request body schema.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPackageFilesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageFile",
                  "type": "AddPackageFilesByPackageIDEndpoint decodeHTTPAddPackageFilesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Package Version Files",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/package-manifest-entries": {
      "get": {
        "description": "Retrieves the package manifest entries associated with a package version.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageManifestEntry",
                  "type": "GetPackageManifestEntriesEndpoint decodeHTTPGetPackageManifestEntriesByPackageIDReq encodeHTTPGetPackageManifestEntriesByPackageIDResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Manifest Entries for Package Version",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/rollouts": {
      "get": {
        "description": "Retrieves all rollouts associated with a package version, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllRolloutsResponse",
                  "type": "GetRolloutsEndpoint decodeHTTPGetRolloutsByPackageIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Rollouts by Package ID",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/statistics": {
      "get": {
        "description": "Retrieves statistics like current devices deployed count for a package.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageStatisticsResponse",
                  "type": "GetPackageStatisticsEndpoint decodeHTTPGetPackageStatisticsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Package Statistics",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/packages/{packageID}/status": {
      "patch": {
        "description": "Updates the package to a specific status. Valid package statuses are PREPARING, IN_APPROVAL, APPROVED, DEPLOYED, QUARANTINED.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the package.",
            "in": "path",
            "name": "packageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponse",
                  "type": "UpdatePackageStatusEndpoint decodeHTTPUpdatePackageStatusReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Package Status",
        "tags": [
          "Package"
        ]
      }
    },
    "/core/v2/roles": {
      "get": {
        "description": "Retrieves all roles. Examples are Admin, Viewer.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllRolesResponse",
                  "type": "GetAllRolesEndpoint decodeHTTPGetAllRolesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get All Roles",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      },
      "post": {
        "description": "Creates a new role.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role",
                  "type": "AddRoleEndpoint decodeHTTPAddRoleReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Role",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      }
    },
    "/core/v2/roles/{roleID}": {
      "delete": {
        "description": "Permanently deletes a role.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the role.",
            "in": "path",
            "name": "roleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRoleByIDResponse",
                  "type": "DeleteRoleByIDEndpoint decodeHTTPDeleteRoleByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Role",
        "tags": [
          "Role"
        ]
      },
      "get": {
        "description": "Get a Role.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the role.",
            "in": "path",
            "name": "roleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role",
                  "type": "GetRoleByIDEndpoint decodeHTTPGetRoleByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves a role. The role is identified by an ID.",
        "tags": [
          "Role"
        ]
      },
      "put": {
        "description": "Updates a role. The role is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the role.",
            "in": "path",
            "name": "roleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role",
                  "type": "UpdateRoleEndpoint decodeHTTPUpdateRoleReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Existing Role",
        "tags": [
          "Role"
        ]
      }
    },
    "/core/v2/roles/{roleID}/policies": {
      "get": {
        "description": "Retrieves the policies associated with a role. The role is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the role.",
            "in": "path",
            "name": "roleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoliciesByUserIDResponse",
                  "type": "GetPoliciesByRoleIDEndpoint decodeHTTPGetPoliciesByRoleIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Policies by Role ID",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      },
      "put": {
        "description": "Updates the policies for a role. The role is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the role.",
            "in": "path",
            "name": "roleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolePoliciesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRolePoliciesResponse",
                  "type": "UpdateRolePoliciesEndpoint decodeHTTPUpdateRolePolicies encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Policies by Role ID",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      }
    },
    "/core/v2/rollout-attachments/{rolloutAttachmentID}": {
      "delete": {
        "description": "Removes a rollout attachment. A rollout attachment can only be removed if the rollout is not yet started.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout attachment.",
            "in": "path",
            "name": "rolloutAttachmentID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericRolloutAttachmentResponse",
                  "type": "DeleteRolloutAttachmentByIDEndpoint decodeHTTPDeleteRolloutAttachmentByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Rollout Attachment",
        "tags": [
          "Rollout Attachment"
        ]
      }
    },
    "/core/v2/rollouts": {
      "get": {
        "description": "Retrieves all rollouts, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by type of the rollout, either SOFTWARE_UPDATE or SELECTIVE_LOG_CONFIG.",
            "in": "query",
            "name": "rolloutType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by rollout name. Rollouts with matching names will be returned.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllRolloutsResponse",
                  "type": "GetRolloutsEndpoint decodeHTTPGetRolloutsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Rollouts",
        "tags": [
          "Rollout"
        ]
      },
      "post": {
        "description": "Creates a new rollout. Attributes for rollout creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "approvers": "[70352bfc-ae4d-4203-ae39-c912e79048c2]",
                "companyID": "2ebf231d-c17b-4fb0-967c-87a08b04d5ed",
                "desiredState": "COMPLETED",
                "deviceGroupIDs": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
                "deviceModelID": "4fcea1ce-1604-4795-a716-42a872817ffd",
                "ownerID": "603bbd50-b981-401f-b94c-4037bb6d3f15",
                "packageID": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
                "rolloutName": "package-rollout",
                "rolloutType": "SOFTWARE_UPDATE",
                "scheduledStartTime": null,
                "selectiveLogConfigID": null,
                "stages": "[{\"stageNumber\": 1, \"startingStrategy\": \"ALL_OR_NOTHING\", \"failureThreshold\": 10, \"percentOfRolloutTarget\": 100, \"movingWindowPercentage\": 100, \"completeThreshold\": 100]",
                "startTime": "2020-02-02T20:20:40.202Z"
              },
              "schema": {
                "$ref": "#/components/schemas/AddRolloutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rollout",
                  "type": "AddRolloutEndpoint decodeHTTPAddRolloutReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add New Rollout",
        "tags": [
          "Rollout"
        ]
      }
    },
    "/core/v2/rollouts/{rolloutID}": {
      "delete": {
        "description": "Permanently deletes a rollout.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRolloutByIDResponse",
                  "type": "DeleteRolloutByIDEndpoint decodeHTTPDeleteRolloutByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Rollout",
        "tags": [
          "Rollout"
        ]
      },
      "get": {
        "description": "Retrieves a rollout. The rollout is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rollout",
                  "type": "GetRolloutByIDEndpoint decodeHTTPGetRolloutByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Rollout",
        "tags": [
          "Rollout"
        ]
      },
      "put": {
        "description": "Updates a rollout. The rollout is identified by an ID. A rollout can not be updated after is has started.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "approvers": "[70352bfc-ae4d-4203-ae39-c912e79048c2]",
                "desiredState": "COMPLETED",
                "deviceGroupIDs": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
                "deviceModelID": "4fcea1ce-1604-4795-a716-42a872817ffd",
                "ownerID": "603bbd50-b981-401f-b94c-4037bb6d3f15",
                "packageID": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
                "rolloutName": "package-rollout",
                "rolloutType": "SOFTWARE_UPDATE",
                "scheduledStartTime": null,
                "selectiveLogConfigID": null,
                "startTime": "2020-02-02T20:20:40.202Z"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateRolloutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rollout",
                  "type": "UpdateRolloutEndpoint decodeHTTPUpdateRolloutReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Rollout",
        "tags": [
          "Rollout"
        ]
      }
    },
    "/core/v2/rollouts/{rolloutID}/approval": {
      "put": {
        "description": "Updates the approval status of a rollout. The rollout is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolloutApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRolloutApprovalResponse",
                  "type": "UpdateRolloutApprovalEndpoint decodeHTTPUpdateRolloutApprovalReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Rollout Approval",
        "tags": [
          "Rollout"
        ]
      }
    },
    "/core/v2/rollouts/{rolloutID}/attachments": {
      "get": {
        "description": "Returns the attachment associated with a rollout.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutAttachmentsPage",
                  "type": "GetRolloutAttachmentsEndpoint decodeHTTPGetRolloutAttachmentsByRolloutIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Rollout Attachments",
        "tags": [
          "Rollout Attachment"
        ]
      },
      "post": {
        "description": "In the portal, this appears as Rollout Metadata. Adds an attachment to a rollout. Only one attachment may be added to a rollout. Rollout attachments cannot be added or modified after the rollout has started. The API should return an upload url, which can be used to upload the file. Supported file types include .txt, .jpg, .jpeg, .png, .gif, .bmp, .pdf, .mp3, .wav, .ogg, .mp4, .mov, .avi, .csv, .html, .htm, .zip, .tar, .taz.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "file": {
                  "fileName": "rollout_metadata"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/RolloutAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutAttachment",
                  "type": "AddRolloutAttachmentEndpoint decodeHTTPAddRolloutAttachmentReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Rollout Attachment",
        "tags": [
          "Rollout Attachment"
        ]
      }
    },
    "/core/v2/rollouts/{rolloutID}/deployments": {
      "get": {
        "description": "Retrieves deployments associated with a rollout, with the option to set limit and offset. The rollout is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deploymentType"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_statuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_substatuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceIDs"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceSerialNumber"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeLowerBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeUpperBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_provisioning"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentOrderBy"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentsResponse",
                  "type": "GetDeploymentsEndpoint decodeHTTPGetDeploymentsByRolloutIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Rollout Deployments",
        "tags": [
          "Rollout"
        ]
      }
    },
    "/core/v2/rollouts/{rolloutID}/desiredstate": {
      "put": {
        "description": "Start an update by setting a new desired state for the given rollout. The rollout is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDesiredRolloutStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDesiredRolloutStateResponse",
                  "type": "UpdateDesiredRolloutStateEndpoint decodeHTTPUpdateDesiredRolloutStateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Rollout Desired State",
        "tags": [
          "Rollout"
        ]
      }
    },
    "/core/v2/rollouts/{rolloutID}/progress": {
      "get": {
        "description": "Retrieves the status/progress of a rollout. The rollout is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the rollout.",
            "in": "path",
            "name": "rolloutID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutProgress",
                  "type": "GetRolloutProgressByRolloutIDEndpoint decodeHTTPGetRolloutProgressByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Rollout Progress",
        "tags": [
          "Rollout"
        ]
      }
    },
    "/core/v2/selective-log-configs": {
      "get": {
        "description": "Retrieves all log configurations in JSON format. To see log configurations that are compatible with your vehicle, specify the decoder mapping query parameter.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by log rule IDs.",
            "in": "query",
            "name": "logRuleID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by decoder mapping.",
            "in": "query",
            "name": "decoderMappingID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter log configurations by name pattern.",
            "in": "query",
            "name": "namePattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter log configurations by the status of locked.",
            "in": "query",
            "name": "locked",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "deprecated": false,
            "description": "Filter log configurations by the status of active.",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfigPage",
                  "type": "GetSelectiveLogConfigsEndpoint decodeHTTPGetSelectiveLogConfigsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Log Configurations",
        "tags": [
          "Selective Log Config"
        ]
      },
      "post": {
        "description": "Creates a log configuration. Attributes for log configuration creation are under request body schema. The log configuration is what actually gets sent down to the device during a deployment. The log configuration object is first created and then log rules are later joined on to them.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSelectiveLogConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfig",
                  "type": "AddSelectiveLogConfigEndpoint decodeHTTPAddSelectiveLogConfigReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Log Configuration",
        "tags": [
          "Selective Log Config"
        ]
      }
    },
    "/core/v2/selective-log-configs/{selectiveLogConfigID}": {
      "delete": {
        "description": "Permanently deletes a log configuration.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSelectiveLogConfigByIDResponse",
                  "type": "DeleteSelectiveLogConfigByIDEndpoint decodeHTTPDeleteSelectiveLogConfigByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Log Configuration",
        "tags": [
          "Selective Log Config"
        ]
      },
      "get": {
        "description": "Retrieves a log configuration. The log configuration is identified by an ID. Can be used to to confirm that the correct log rules are linked to the ID of this log configuration. These can be found in the field logRules.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfig",
                  "type": "GetSelectiveLogConfigByIDEndpoint decodeHTTPGetSelectiveLogConfigByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Log Configuration",
        "tags": [
          "Selective Log Config"
        ]
      },
      "patch": {
        "description": "Patches the name or hidden status of a log configuration.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchSelectiveLogConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfig",
                  "type": "PatchSelectiveLogConfigByIDEndpoint decodeHTTPPatchSelectiveLogConfigByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch Log Configuration",
        "tags": [
          "Selective Log Config"
        ]
      },
      "put": {
        "description": "Updates a log configuration. The log configuration is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSelectiveLogConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfig",
                  "type": "UpdateSelectiveLogConfigEndpoint decodeHTTPUpdateSelectiveLogConfigByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Log Configuration",
        "tags": [
          "Selective Log Config"
        ]
      }
    },
    "/core/v2/selective-log-configs/{selectiveLogConfigID}/log-rules": {
      "get": {
        "description": "Retrieves all log rules using a log configuration ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRulesPage",
                  "type": "GetLogRulesEndpoint decodeHTTPGetLogRulesBySelectiveLogConfigIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get All Log Rules by Log Configuration ID",
        "tags": [
          "Selective Log Config"
        ]
      },
      "put": {
        "description": "Updates the list of log rules associated with a log configuration. The list will only be updated if the log configuration has not yet been deployed.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "logRuleIDs": [
                  "f294957e-ab6b-4d72-bcaf-3ec301a8ff72",
                  "a359023f-ab7b-4d73-bcaf-3ec301a8ff72"
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateLogRulesForSelectiveLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectiveLogConfig",
                  "type": "UpdateSelectiveLogConfigLogRulesEndpoint decodeHTTPUpdateSelectiveLogConfigLogRulesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Log Rules for a Log Configuration",
        "tags": [
          "Selective Log Config"
        ]
      }
    },
    "/core/v2/selective-log-configs/{selectiveLogConfigID}/metadata": {
      "get": {
        "description": "Retrieves metadata pertaining to a log configuration, such as the number of devices that are currently using a log configuration or have been deployed one.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the log configuration.",
            "in": "path",
            "name": "selectiveLogConfigID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSelectiveLogConfigMetadataResponse",
                  "type": "GetSelectiveLogConfigMetadataEndpoint decodeHTTPGetSelectiveLogConfigMetadataReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Log Configuration Metadata",
        "tags": [
          "Selective Log Config"
        ]
      }
    },
    "/core/v2/signal-fault-mode-maps": {
      "post": {
        "description": "Associate a fault mode map with a J1939 Signal to log fault modes defined by the map for that signal. The signal must have a corresponding SPN defined in the DBC file and a signal can be mapped to only one fault mode map.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignalFaultMode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignalFaultMode",
                  "type": "AddSignalFaultModeEndpoint decodeHTTPAddSignalFaultModeReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Associate Signal with Fault Mode Map",
        "tags": [
          "Signal Fault Mode Map"
        ]
      }
    },
    "/core/v2/signal-fault-mode-maps/{signalFaultModeMapID}": {
      "delete": {
        "description": "Dissociate fault mode map from signal. Once dissociated, the signal cannot be mapped to any fault modes unless a new fault mode map is associated.",
        "parameters": [
          {
            "description": "A unique identifier for the Signal Fault Mode Map.",
            "in": "path",
            "name": "signalFaultModeMapID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSignalFaultModeResponse",
                  "type": "DeleteSignalFaultModeEndpoint decodeHTTPDeleteSignalFaultModeReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Dissociate Signal from Fault Mode Map",
        "tags": [
          "Signal Fault Mode Map"
        ]
      },
      "get": {
        "description": "Get the signal fault mode map associated with the ID. You can use this to find the fault mode map ID associated with some J1939 Signal",
        "parameters": [
          {
            "description": "A unique identifier for the Signal Fault Mode Map.",
            "in": "path",
            "name": "signalFaultModeMapID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignalFaultMode",
                  "type": "GetSignalFaultModeByIDEndpoint decodeHTTPGetSignalFaultModeByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Association of Signal with Fault Mode Map by ID",
        "tags": [
          "Signal Fault Mode Map"
        ]
      },
      "patch": {
        "description": "Associate a new fault mode map with a J1939 signal to enable creating log configurations for the fault modes in the new fault mode map.",
        "parameters": [
          {
            "description": "A unique identifier for the Signal Fault Mode Map.",
            "in": "path",
            "name": "signalFaultModeMapID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSignalFaultModeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignalFaultMode",
                  "type": "UpdateSignalFaultModeEndpoint decodeHTTPUpdateSignalFaultModeReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Fault Mode Map Associated with Signal",
        "tags": [
          "Signal Fault Mode Map"
        ]
      }
    },
    "/core/v2/stages/{stageID}": {
      "get": {
        "description": "Retrieves a stage. The stage is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the stage.",
            "in": "path",
            "name": "stageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stage",
                  "type": "GetStageByIDEndpoint decodeHTTPGetStageByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Stage",
        "tags": [
          "Stage"
        ]
      },
      "patch": {
        "description": "Updates specific fields of a stage.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the stage.",
            "in": "path",
            "name": "stageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStageByIDRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stage",
                  "type": "PatchStageByIDEndpoint decodeHTTPPatchStageByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Stage",
        "tags": [
          "Stage"
        ]
      }
    },
    "/core/v2/stages/{stageID}/deployments": {
      "get": {
        "description": "Retrieves deployments associated with a stage, with the option to set limit and offset.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the stage.",
            "in": "path",
            "name": "stageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deploymentType"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_statuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_substatuses"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceIDs"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_deviceSerialNumber"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeLowerBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_startTimeUpperBound"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_rolloutID"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_provisioning"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_queuedBefore"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdAfter"
          },
          {
            "$ref": "#/components/parameters/deploymentFilter_createdBefore"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/deploymentOrderBy"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeploymentsResponse",
                  "type": "GetDeploymentsEndpoint decodeHTTPGetDeploymentsByStageIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Stage Deployments",
        "tags": [
          "Stage"
        ]
      }
    },
    "/core/v2/stages/{stageID}/desiredstate": {
      "put": {
        "description": "Start an update by setting a new desired state for the given stage. The stage is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the stage.",
            "in": "path",
            "name": "stageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDesiredStageStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDesiredStageStateResponse",
                  "type": "UpdateDesiredStageStateEndpoint decodeHTTPUpdateDesiredStageStateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Desired State of Stage",
        "tags": [
          "Stage"
        ]
      }
    },
    "/core/v2/stages/{stageID}/progress": {
      "get": {
        "description": "Retrieves the status/progress of a stage.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the stage.",
            "in": "path",
            "name": "stageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageProgress",
                  "type": "GetStageProgressByStageIDEndpoint decodeHTTPGetStageProgressByStageIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Stage Progress",
        "tags": [
          "Stage"
        ]
      }
    },
    "/core/v2/statistics": {
      "post": {
        "description": "Retrieves resource statistics.",
        "parameters": [
          {
            "$ref": "#/components/parameters/statisticsResource"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse",
                  "type": "GetStatisticsEndpoint decodeHTTPGetStatisticsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Resource Statistics",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/core/v2/tags": {
      "get": {
        "deprecated": true,
        "description": "Retrieves all tags associated with a device, with the option to set limit and offset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTagsResponse",
                  "type": "GetAllTagsEndpoint decodeHTTPGetAllTagsReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Tags",
        "tags": [
          "Tag"
        ]
      }
    },
    "/core/v2/template-categories": {
      "get": {
        "description": "Retrieves all template categories, with the options to set limit and offset and order by parameters. The returned list is ordered by creation date by default.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Valid template types are dashboard, fleet-dashboard, query, config.",
            "in": "query",
            "name": "templateType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by search string.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "deprecated": false,
            "description": "Order by categoryName, createdAt, or updatedAt. The format is [\"columnName:{{asc/desc}}\", ...], with \"desc\" = DESCENDING and \"asc\" = ASCENDING.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTemplateCategoriesResponse",
                  "type": "GetAllTemplateCategoriesEndpoint decodeHTTPGetAllTemplateCategoriesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Template Categories",
        "tags": [
          "Template Category"
        ]
      },
      "post": {
        "description": "Creates a template category. Attributes for template category creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "categoryName": "main-template-category",
                "companyId": "a986d6b4-53b6-4fae-b4c3-f1153d2a205b",
                "templateType": "dashboard"
              },
              "schema": {
                "$ref": "#/components/schemas/AddTemplateCategoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateCategory",
                  "type": "AddTemplateCategoryEndpoint decodeHTTPAddTemplateCategoryReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Template Category",
        "tags": [
          "Template Category"
        ]
      }
    },
    "/core/v2/template-categories/{templateCategoryID}": {
      "delete": {
        "description": "Permanently deletes a template category.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template category.",
            "in": "path",
            "name": "templateCategoryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTemplateByIDResponse",
                  "type": "DeleteTemplateCategoryByIDEndpoint decodeHTTPDeleteTemplateCategoryByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Template Category",
        "tags": [
          "Template Category"
        ]
      },
      "get": {
        "description": "Retrieves a template category. The template category is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template category.",
            "in": "path",
            "name": "templateCategoryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateCategory",
                  "type": "GetTemplateCategoryByIDEndpoint decodeHTTPGetTemplateCategoryByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Template Category",
        "tags": [
          "Template Category"
        ]
      },
      "put": {
        "description": "Updates a template category by setting the values within the request body. Attributes not provided will be left unchanged. The template category is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template category.",
            "in": "path",
            "name": "templateCategoryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "categoryName": "main-template-category",
                "templateType": "dashboard"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateCategoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateCategory",
                  "type": "UpdateTemplateCategoryEndpoint decodeHTTPUpdateTemplateCategoryReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Template Category",
        "tags": [
          "Template Category"
        ]
      }
    },
    "/core/v2/template-categories/{templateCategoryID}/templates": {
      "get": {
        "description": "Retrieves the templates associated with a template category, with the option to set limit and offset. The template category is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template category.",
            "in": "path",
            "name": "templateCategoryID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTemplatesResponse",
                  "type": "GetAllTemplatesEndpoint decodeHTTPGetAllTemplatesByTemplateCategoryReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Templates of Template Category",
        "tags": [
          "Template Category"
        ]
      }
    },
    "/core/v2/templates": {
      "get": {
        "description": "Retrieves all templates, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Valid template types are dashboard, fleet-dashboard, query, config.",
            "in": "query",
            "name": "templateType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by search string.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "deprecated": false,
            "description": "Order by templateName, templateType, createdAt, or updatedAt. The format is [\"columnName:{{asc/desc}}\", ...], with \"desc\" = DESCENDING and \"asc\" = ASCENDING.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTemplatesResponse",
                  "type": "GetAllTemplatesEndpoint decodeHTTPGetAllTemplatesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Templates",
        "tags": [
          "Template"
        ]
      },
      "post": {
        "description": "Creates a template. Attributes for template creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "categoryId": "3fdfce85-8032-4fb6-97bd-bac6fa1d32b4",
                "companyId": "52f55a6f-2290-4e8c-858c-b9a230d106c1",
                "createdById": "f746d199-7408-4f5a-a9d7-5a4134310406",
                "decoderMappingId": "7025cce1-573d-4201-88a9-a2fd87328804",
                "domainName": "sibros",
                "shared": false,
                "templateContent": "[{\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 0, \\\"key\\\": \\\"1dca88f3-0cb7-424d-841f-ff323e9789db\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"DU_charging_status\\\", \\\"signals\\\": [{\\\"key\\\": \\\"DU_charging_status\\\", \\\"name\\\": \\\"\\\", \\\"type\\\": \\\"signal\\\", \\\"busId\\\": 0, \\\"color\\\": \\\"#A9D394\\\", \\\"messageId\\\": 16, \\\"querySource\\\": \\\"signals\\\", \\\"metricColumn\\\": \\\"signal_name\\\", \\\"thresholdValue\\\": {}}]}}, {\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 12, \\\"key\\\": \\\"85971f1f-4c18-43c1-a4e2-b0f7a50c039d\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"Title\\\", \\\"signals\\\": []}}]",
                "templateName": "main-template",
                "templateType": "dashboard"
              },
              "schema": {
                "$ref": "#/components/schemas/AddTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template",
                  "type": "AddTemplateEndpoint decodeHTTPAddTemplateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Template",
        "tags": [
          "Template"
        ]
      }
    },
    "/core/v2/templates/{templateID}": {
      "delete": {
        "description": "Permanently deletes a template.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template.",
            "in": "path",
            "name": "templateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTemplateByIDResponse",
                  "type": "DeleteTemplateByIDEndpoint decodeHTTPDeleteTemplateByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete Template",
        "tags": [
          "Template"
        ]
      },
      "get": {
        "description": "Retrieves a template. The template is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template.",
            "in": "path",
            "name": "templateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template",
                  "type": "GetTemplateByIDEndpoint decodeHTTPGetTemplateByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Template",
        "tags": [
          "Template"
        ]
      },
      "put": {
        "description": "Updates a template by setting the values within the request body. Attributes not provided will be left unchanged. The template is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the template.",
            "in": "path",
            "name": "templateID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "categoryId": "3fdfce85-8032-4fb6-97bd-bac6fa1d32b4",
                "createdById": "f746d199-7408-4f5a-a9d7-5a4134310406",
                "decoderMappingId": "7025cce1-573d-4201-88a9-a2fd87328804",
                "domainName": "sibros",
                "shared": false,
                "templateContent": "[{\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 0, \\\"key\\\": \\\"1dca88f3-0cb7-424d-841f-ff323e9789db\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"DU_charging_status\\\", \\\"signals\\\": [{\\\"key\\\": \\\"DU_charging_status\\\", \\\"name\\\": \\\"\\\", \\\"type\\\": \\\"signal\\\", \\\"busId\\\": 0, \\\"color\\\": \\\"#A9D394\\\", \\\"messageId\\\": 16, \\\"querySource\\\": \\\"signals\\\", \\\"metricColumn\\\": \\\"signal_name\\\", \\\"thresholdValue\\\": {}}]}}, {\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 12, \\\"key\\\": \\\"85971f1f-4c18-43c1-a4e2-b0f7a50c039d\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"Title\\\", \\\"signals\\\": []}}]",
                "templateName": "main-template",
                "templateType": "dashboard"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template",
                  "type": "UpdateTemplateEndpoint decodeHTTPUpdateTemplateReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Template",
        "tags": [
          "Template"
        ]
      }
    },
    "/core/v2/users": {
      "get": {
        "description": "Retrieves all users, with the option to set limit and offset. The returned list is ordered by creation date.",
        "parameters": [
          {
            "deprecated": false,
            "description": "Filter by user permissions.",
            "in": "query",
            "name": "permissions",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by user IDs.",
            "in": "query",
            "name": "userIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": false,
            "description": "Filter by user name or email pattern.",
            "in": "query",
            "name": "nameOrEmailPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllUsersResponse",
                  "type": "GetAllUsersEndpoint decodeHTTPGetAllUsersReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multiple Users",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      },
      "post": {
        "description": "Creates a user. Attributes for user creation are under request body schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "attributes": "{\"region\":\"europe\"}",
                "companyID": "d8323aa7-3db1-4577-bbb6-0dbebee0e7be",
                "email": "johndoe@sibros.tech",
                "externalID": "doe_john",
                "firstName": "John",
                "lastLoginAt": "2020-02-02T20:20:20.202Z",
                "lastName": "Doe",
                "permissions": "[{\"action\": 1, \"resource\": 10}, {\"action\": 1, \"resource\": 30}]",
                "phone": "555-555-5555",
                "roles": "[Admin, Release Manager]",
                "status": "ACTIVE",
                "userName": "johndoe1234"
              },
              "schema": {
                "$ref": "#/components/schemas/AddUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "type": "AddUserEndpoint decodeHTTPAddUserReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add New User",
        "tags": [
          "User"
        ]
      }
    },
    "/core/v2/users/{userID}": {
      "delete": {
        "description": "Permanently deletes a user.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserByIDResponse",
                  "type": "DeleteUserByIDEndpoint decodeHTTPDeleteUserByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete User",
        "tags": [
          "User"
        ]
      },
      "get": {
        "description": "Get a User",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "type": "GetUserByIDEndpoint decodeHTTPGetUserByIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get User by ID.",
        "tags": [
          "User"
        ]
      },
      "put": {
        "description": "Updates a user. The user is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "attributes": "{\"region\":\"europe\"}",
                "email": "johndoe@sibros.tech",
                "externalID": "doe_john",
                "firstName": "John",
                "lastLoginAt": "2020-02-02T20:20:20.202Z",
                "lastName": "Doe",
                "permissions": "[{\"action\": 1, \"resource\": 10}, {\"action\": 1, \"resource\": 30}]",
                "phone": "555-555-5555",
                "roles": "[Admin, Release Manager]",
                "status": "ACTIVE",
                "userName": "johndoe123"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "type": "UpdateUserEndpoint decodeHTTPUpdateUserReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update Existing User",
        "tags": [
          "User"
        ]
      }
    },
    "/core/v2/users/{userID}/activity": {
      "patch": {
        "description": "Updates the activity status of a user. The user is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchUserResponse",
                  "type": "PatchUserActivityEndpoint decodeHTTPPatchUserActivityReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update User Activity",
        "tags": [
          "User"
        ]
      }
    },
    "/core/v2/users/{userID}/favorites": {
      "delete": {
        "description": "Delete one user's favorite Dashboard list",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "templateID": "22d02aa4-ed0c-4559-ad9a-390f96bf881d"
              },
              "schema": {
                "$ref": "#/components/schemas/UserFavorite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserFavoriteByIDResponse",
                  "type": "DeleteUserFavoriteEndpoint decodeHTTPDeleteUserFavoriteReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete One User Favorite Dashboard",
        "tags": [
          "User"
        ]
      },
      "get": {
        "description": "Get user's favorite Dashboard list",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFavoritesPage",
                  "type": "GetUserFavoritesEndpoint decodeHTTPGetUserFavoritesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get User Favorite Dashboard",
        "tags": [
          "User"
        ]
      },
      "post": {
        "description": "Add to user's favorite Dashboard list",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "templateID": "22d02aa4-ed0c-4559-ad9a-390f96bf881d"
              },
              "schema": {
                "$ref": "#/components/schemas/UserFavorite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFavorite",
                  "type": "AddUserFavoriteEndpoint decodeHTTPAddUserFavoriteReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add User Favorite Dashboard",
        "tags": [
          "User"
        ]
      }
    },
    "/core/v2/users/{userID}/policies": {
      "get": {
        "description": "Retrieves the policies associated with a user. The user is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoliciesByUserIDResponse",
                  "type": "GetPoliciesByUserIDEndpoint decodeHTTPGetPoliciesByUserIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Policies by User ID",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      }
    },
    "/core/v2/users/{userID}/roles": {
      "get": {
        "description": "Retrieves the designated role of a user. The user is identified by an ID.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRolesByUserIDResponse",
                  "type": "GetRolesByUserIDEndpoint decodeHTTPGetRolesByUserIDReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Roles by User ID",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      },
      "put": {
        "description": "Update the role/permissions of a user. The user is identified by an ID. Note - The request accepts a roleId array with valid role IDs.",
        "parameters": [
          {
            "deprecated": false,
            "description": "A unique identifier for the user.",
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRolesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserRolesResponse",
                  "type": "UpdateUserRolesEndpoint decodeHTTPUpdateUserRolesReq encodeHTTPGenericResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update User Roles",
        "tags": [
          "Role-Based Access Control (RBAC)"
        ]
      }
    },
    "/data/v1/search/signals/time-range": {
      "post": {
        "description": "Retrieves signal values from multiple devices by a time range, optionally aggregated if defined in the request. Note - A v2 version is available for this endpoint in the beta section (Search Signals).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSignalsByTimeRangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSignalsByTimeRangeResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Signals by Time Range and DeviceIds",
        "tags": [
          "Signal"
        ]
      }
    },
    "/data/v2/locations/latest": {
      "post": {
        "description": "Retrieves the latest location data by specifying the filter. Currently, only 'deviceID' is supported as filter. See payload example. The 'deviceID' is required. If 'dimension' is left empty, no data will return.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetLocationsLatestValueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationsLatestValueResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Latest Locations",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/locations/metadata": {
      "get": {
        "description": "Retrieves the available dimensions and metrics for locations. The response can be used in other location query APIs. The dimensions can be set in 'dimensions', 'filter'. The best practice is to call this API once and cache the result locally instead of making this call every time before calling other APIs.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationsMetadataResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Metadata for Locations",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/locations/scan": {
      "post": {
        "description": "Queries locations by specifying start time, end time, dimensions, and metrics. Note - A limit of 10,000 returned points is applied to this endpoint and no downsampling is applied to this endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanLocationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanLocationsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Scan Locations",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/locations/search": {
      "post": {
        "description": "Searches locations by specifying start time, end time, dimensions, and metrics. Note - Auto-downsampling is applied in a best effort to return around 1000 data points.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchLocationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchLocationsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Search Locations",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/signals/latest": {
      "post": {
        "description": "Retrieves the latest signal values by specifying the filter. Currently, only 'deviceID' and 'name' (of the signal) are supported as filters. See payload example. The 'deviceID' is required. If 'name' is not specified, the values of all signals will be returned. The dimension should specify at least 'name'. To retrieve all dimensions and metrics available to query, the endpoint 'Get Metadata for Signals' can be used.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSignalsLatestValueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSignalsLatestValueResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Latest Signal Values",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/signals/metadata": {
      "get": {
        "description": "Retrieves the available dimensions and metrics for signals. The response can be used in other signal query APIs. The dimensions can be set in 'dimensions', 'filter'. The metrics can be set in 'filter', 'aggregations'. The best practice is to call this API once and cache the result locally instead of making this call every time before calling other APIs.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSignalsMetadataResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Metadata for Signals",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/signals/scan": {
      "post": {
        "description": "Queries signals by specifying start time, end time, filter, dimensions, and metrics. \nNote - A limit of 10,000 returned points is applied to this endpoint and no downsampling \nis applied to this endpoint.\n\nFor querying events, the `name` dimension can be used with the `contains` operator. \nPreviously, the actual event name (e.g., \"speeding\") was used as the value. However, \nthe system now requires using the format `uuid:<rule id of event>` as the value, where \n`<rule id of event>` can be obtained from the log rules via the \n`/core/v2/selective-log-configs/{selectiveLogConfigID}` API endpoint.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanSignalsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanSignalsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Scan Signals",
        "tags": [
          "Beta"
        ]
      }
    },
    "/data/v2/signals/search": {
      "post": {
        "description": "Searches signals by specifying start time, end time, filter, dimensions, and optionally aggregations. \nNote - Auto-downsampling is applied in a best effort to return around 100 data points.\n\nFor querying events, the `name` dimension can be used with the `contains` operator.\nPreviously, the actual event name (e.g., \"speeding\") was used as the value. However,\nthe system now requires using the format `uuid:<rule id of event>` as the value, where\n`<rule id of event>` can be obtained from the log rules via the\n`/core/v2/selective-log-configs/{selectiveLogConfigID}` API endpoint.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSignalsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSignalsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Search Signals",
        "tags": [
          "Beta"
        ]
      }
    },
    "/health/v1/status": {
      "get": {
        "description": "Get a global view of the health of Sibros per component.",
        "operationId": "GetHealthStatus",
        "parameters": [
          {
            "description": "The name of the component",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatusResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Health Status",
        "tags": [
          "Health"
        ]
      }
    },
    "/pandora/v1/devices/{deviceID}/certificate": {
      "post": {
        "description": "Provision a device with an existing signed Certificate",
        "operationId": "provisionWithCert",
        "parameters": [
          {
            "deprecated": false,
            "description": "deviceID for which the cert is being uploaded",
            "in": "path",
            "name": "deviceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisionWithCertificateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionWithCertificateResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "summary": "Provision a device with an existing signed Certificate",
        "tags": [
          "Provisioning"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddCommandRequestRequest": {
        "$ref": "#/components/schemas/CommandRequest"
      },
      "AddCommandSequenceRequestRequest": {
        "$ref": "#/components/schemas/CommandSequenceRequest"
      },
      "AddControllerRequest": {
        "$ref": "#/components/schemas/Controller"
      },
      "AddConvertedFile": {
        "properties": {
          "deviceLogIDs": {
            "description": "A list of device log IDs to take as input to create a single output file.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "sourceFileFormat": {
            "$ref": "#/components/schemas/SourceFileFormat"
          },
          "targetFileFormat": {
            "$ref": "#/components/schemas/TargetFileFormat"
          }
        },
        "required": [
          "targetFileFormat",
          "sourceFileFormat",
          "deviceLogIDs"
        ],
        "type": "object"
      },
      "AddCustomCommandRequest": {
        "$ref": "#/components/schemas/CustomCommand"
      },
      "AddCustomCommandResponse": {
        "$ref": "#/components/schemas/CustomCommand",
        "properties": {
          "results": {
            "description": "The list of custom commands.",
            "items": {
              "$ref": "#/components/schemas/CustomCommand"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddCustomerFileRequest": {
        "$ref": "#/components/schemas/CustomerFile"
      },
      "AddDecoderMappingRequest": {
        "$ref": "#/components/schemas/DecoderMapping"
      },
      "AddDeepLoggerRequest": {
        "example": {
          "deviceID": "7f3c3e07-8e56-4c58-818e-3162e949a2db",
          "requestContent": {
            "fileUploadRequest": {
              "endTime": "2020-02-03T20:20:20.202Z",
              "logRuleID": "8e4d4907-8e56-4c58-818e-3162e949a2db",
              "startTime": "2020-02-02T20:20:20.202Z"
            }
          },
          "requestType": "FILE_UPLOAD_REQUEST"
        },
        "properties": {
          "deviceID": {
            "description": "A unique identifier for the device.",
            "type": "string"
          },
          "requestContent": {
            "properties": {
              "fileUploadRequest": {
                "properties": {
                  "endTime": {
                    "description": "The end time of the files to be uploaded.",
                    "type": "string"
                  },
                  "logRuleID": {
                    "description": "The ID of the log rule that generated the files to be uploaded.",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "The start time of the files to be uploaded.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "requestType": {
            "description": "An enum representing the type of request.",
            "enum": [
              "FILE_UPLOAD_REQUEST"
            ],
            "type": "string"
          }
        },
        "required": [
          "deviceID",
          "requestType",
          "requestContent"
        ],
        "type": "object"
      },
      "AddDefaultStateRequest": {
        "$ref": "#/components/schemas/DefaultState"
      },
      "AddDeploymentConsentRequest": {
        "properties": {
          "expirationTimeLength": {
            "description": "The time to expiration for the consent. It defaults to 30 seconds.",
            "example": 60,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AddDeploymentConsentResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Consent for deployment 3d0db63f-aa61-4dd6-acd1-5441344d75c3 has been issued.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddDeploymentLogsRequest": {
        "example": {
          "deploymentID": "17d3ebba-c6ca-4d52-ad96-af34d6c5bbba",
          "proto": "proto.bin"
        },
        "properties": {
          "deploymentID": {
            "description": "A unique identifier for the deployment the deployment logs are associated with.",
            "type": "string"
          },
          "proto": {
            "description": "The protobuf binary containing the deployment and status logs to be added.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "AddDeploymentRequest": {
        "$ref": "#/components/schemas/Deployment"
      },
      "AddDeviceConfigRequest": {
        "$ref": "#/components/schemas/DeviceConfiguration"
      },
      "AddDeviceGroupRequest": {
        "$ref": "#/components/schemas/DeviceGroup"
      },
      "AddDeviceLogRequest": {
        "$ref": "#/components/schemas/DeviceLog"
      },
      "AddDeviceModelRequest": {
        "$ref": "#/components/schemas/DeviceModel"
      },
      "AddDeviceModelVariantRequest": {
        "$ref": "#/components/schemas/DeviceModelVariant"
      },
      "AddDeviceModelVariantVersionRequest": {
        "$ref": "#/components/schemas/DeviceModelVariantVersion"
      },
      "AddDeviceRequest": {
        "$ref": "#/components/schemas/Device"
      },
      "AddDevicesRequest": {
        "example": [
          {
            "allowReprovisioning": false,
            "attributes": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
            "companyID": "8fbb6c25-5c00-48de-b445-a8c49b1df1f3",
            "components": "[{\"componentType\": \"BAT\", \"componentSerialNumber\": \"bin-number\", \"componentName\": \"\", \"attributes\": {\"bms\": \"bms-serial-number\"}]",
            "currentPackageId": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
            "currentSelectiveLogConfigId": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
            "decoderName": "example-decoder-mapping-name",
            "deviceModelID": "48b49aca-bc50-43f1-800b-bececba69a59",
            "deviceName": "Sibros Vehicle",
            "deviceSerialNumber": "SCA664S55CUX50961",
            "deviceType": "VEHICLE",
            "liveLogConfig": null,
            "selectiveLogConfig": "{ \"messages\": [ { \"bus_id\": 1, \"message_id\": 32, \"frequency_ms\": 1000 } ], \"conditions\": [ { \"bus_id\": 1, \"message_id\": 16, \"compare_value\": 1, \"signal\": { \"operator\": \"==\", \"stop_bit\": 1, \"start_bit\": 0 } } ] }",
            "tags": "[experimental,group1,anyString]"
          },
          {
            "allowReprovisioning": false,
            "attributes": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
            "companyID": "8fbb6c25-5c00-48de-b445-a8c49b1df1f3",
            "components": "[{\"componentType\": \"BAT\", \"componentSerialNumber\": \"bin-number\", \"componentName\": \"\", \"attributes\": {\"bms\": \"bms-serial-number\"}]",
            "currentPackageId": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
            "currentSelectiveLogConfigId": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
            "decoderName": "example-decoder-mapping-name",
            "deviceModelID": "48b49aca-bc50-43f1-800b-bececba69a59",
            "deviceName": "Sibros Vehicle",
            "deviceSerialNumber": "ABC664S55CUX50961",
            "deviceType": "VEHICLE",
            "liveLogConfig": null,
            "selectiveLogConfig": "{ \"messages\": [ { \"bus_id\": 1, \"message_id\": 32, \"frequency_ms\": 1000 } ], \"conditions\": [ { \"bus_id\": 1, \"message_id\": 16, \"compare_value\": 1, \"signal\": { \"operator\": \"==\", \"stop_bit\": 1, \"start_bit\": 0 } } ] }",
            "tags": "[experimental,group1,someString]"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Device"
        },
        "type": "array"
      },
      "AddDevicesResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "20 devices have been created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddECUListRecordRequest": {
        "$ref": "#/components/schemas/ECUListRecord"
      },
      "AddFaultModeMapRequest": {
        "$ref": "#/components/schemas/FaultModeMap"
      },
      "AddHardwareRevisionRequest": {
        "$ref": "#/components/schemas/HardwareRevision"
      },
      "AddImageRegionRequest": {
        "$ref": "#/components/schemas/ImageRegion"
      },
      "AddImagesByMetadataRequest": {
        "properties": {
          "collection": {
            "description": "Collection name chosen during initial setup of the Image Authentication Repository on the cloud.",
            "example": "sibros_collection",
            "type": "string"
          },
          "imageMetadata": {
            "$ref": "#/components/schemas/ImageMetadata"
          }
        },
        "required": [
          "collection",
          "imageMetadata"
        ],
        "type": "object"
      },
      "AddImagesByMetadataResponse": {
        "items": {
          "$ref": "#/components/schemas/Image"
        },
        "type": "array"
      },
      "AddImagesRequest": {
        "example": [
          {
            "companyId": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
            "custom": null,
            "file": {
              "downloadURL": "example-download.url",
              "fileHash": "ab1ff24cf4321a314808f4f393d00209",
              "fileName": "file2.tar",
              "fileSizeBytes": 67,
              "fileStatus": "UPLOADED",
              "path": "/some/path",
              "uploadURL": "example-upload.url"
            },
            "fileFormat": "bin",
            "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
            "startAddress": 4096,
            "uptaneHashes": [
              {
                "method": "sha256",
                "value": "AAAA="
              }
            ],
            "uptaneImageId": "uptane-image-id",
            "version": "1.0.1"
          },
          {
            "companyId": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
            "custom": null,
            "file": {
              "downloadURL": "example-download.url",
              "fileHash": "ab1ff24cf4321a314808f4f393d00209",
              "fileName": "file2.tar",
              "fileSizeBytes": 67,
              "fileStatus": "UPLOADED",
              "path": "/some/path",
              "uploadURL": "example-upload.url"
            },
            "fileFormat": "bin",
            "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
            "startAddress": 4096,
            "uptaneHashes": [
              {
                "method": "sha256",
                "value": "AAAA="
              }
            ],
            "uptaneImageId": "uptane-image-id",
            "version": "1.0.1"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Image"
        },
        "type": "array"
      },
      "AddLogRuleRequest": {
        "$ref": "#/components/schemas/LogRule"
      },
      "AddPackageAttachmentsRequest": {
        "$ref": "#/components/schemas/PackageAttachment"
      },
      "AddPackageFilesRequest": {
        "example": [
          {
            "createdAt": "2020-02-02T20:20:20.202Z",
            "downloadURL": "example-download.url",
            "fileHash": "db1ff24cf4321a314808f4f393d00209",
            "fileName": "file1.tar",
            "fileSizeBytes": 43,
            "fileStatus": "UPLOADED",
            "path": "/some/path",
            "uploadURL": "example-upload.url"
          },
          {
            "createdAt": "2020-02-02T20:20:20.202Z",
            "downloadURL": "example-download.url",
            "fileHash": "ab1ff24cf4321a314808f4f393d00209",
            "fileName": "file2.tar",
            "fileSizeBytes": 67,
            "fileStatus": "NOT_UPLOADED",
            "path": "/some/path",
            "uploadURL": "example-upload.url"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/File"
        },
        "type": "array"
      },
      "AddPackageFilesResponse": {
        "example": [
          {
            "companyID": "81641cfa-729a-477a-9dae-e4d9f3ddd84d",
            "downloadURL": "example-download.url",
            "file": {
              "downloadURL": "example-download.url",
              "fileHash": "db1ff24cf4321a314808f4f393d00209",
              "fileName": "file1.tar",
              "fileSizeBytes": 43,
              "fileStatus": "UPLOADED",
              "path": "/some/path"
            },
            "fileID": "6cfd8a9b-48f0-480b-ab65-20dc4c26234c",
            "packageID": "7f1e1787-730b-4871-8835-791d6d7cdfd9",
            "uploadURL": "example-upload.url"
          },
          {
            "companyID": "81641cfa-729a-477a-9dae-e4d9f3ddd84d",
            "createdAt": "2020-02-02T20:20:20.202Z",
            "downloadURL": "example-download.url",
            "file": {
              "downloadURL": "example-download.url",
              "fileHash": "ab1ff24cf4321a314808f4f393d00209",
              "fileName": "file2.tar",
              "fileSizeBytes": 67,
              "fileStatus": "NOT_UPLOADED",
              "path": "/some/path"
            },
            "fileID": "ad2d8a9b-48f0-480b-ab65-20dc4c26234c",
            "packageID": "6f1e1787-730b-4871-8835-791d6d7cdfd9",
            "updatedAt": "2020-02-02T20:20:20.202Z",
            "uploadURL": "example-upload.url"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PackageFile"
        },
        "type": "array"
      },
      "AddPackageGroupRequest": {
        "$ref": "#/components/schemas/PackageGroup"
      },
      "AddPackageManifestEntriesRequest": {
        "example": [
          {
            "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
            "imageId": "cca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "imageRegionId": "91133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "packageId": "cfa0c49c-cc47-4b54-b19f-abbf86ca8576"
          },
          {
            "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
            "imageId": "1ca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "imageRegionId": "31133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "packageId": "2fa0c49c-cc47-4b54-b19f-abbf86ca8576"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PackageManifestEntry"
        },
        "type": "array"
      },
      "AddPackageRequest": {
        "$ref": "#/components/schemas/Package"
      },
      "AddRoleRequest": {
        "$ref": "#/components/schemas/Role"
      },
      "AddRolloutAttachmentsRequest": {
        "$ref": "#/components/schemas/RolloutAttachment"
      },
      "AddRolloutRequest": {
        "$ref": "#/components/schemas/Rollout"
      },
      "AddSelectiveLogConfigRequest": {
        "$ref": "#/components/schemas/SelectiveLogConfig"
      },
      "AddSignalFaultModeRequest": {
        "$ref": "#/components/schemas/SignalFaultMode"
      },
      "AddTemplateCategoryRequest": {
        "$ref": "#/components/schemas/TemplateCategory"
      },
      "AddTemplateRequest": {
        "$ref": "#/components/schemas/Template"
      },
      "AddTripResponse": {
        "properties": {
          "tripId": {
            "description": "A unique identifier for the trip.",
            "example": "6cf631b0-5d6b-4c59-96c0-bbc65e9490c5",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddUserRequest": {
        "$ref": "#/components/schemas/User"
      },
      "AddedDeploymentLogsResponse": {
        "example": {
          "deploymentLogsAdded": 150,
          "statusLogsAdded": 153
        },
        "properties": {
          "deploymentLogsAdded": {
            "description": "The number of deployment logs added from the provided protobuf binary.",
            "type": "number"
          },
          "statusLogsAdded": {
            "description": "The number of status logs added from the provided protobuf binary.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "BusMapping": {
        "description": "Stores the mapping between BusID and other bus details like BusName etc.",
        "properties": {
          "busAbbreviation": {
            "description": "Abbreviation for the bus",
            "example": "PAS",
            "type": "string"
          },
          "busID": {
            "description": "ID for the bus",
            "example": 1,
            "type": "integer"
          },
          "busName": {
            "description": "Name for the bus",
            "example": "Parking assist systems",
            "type": "string"
          },
          "createdAt": {
            "description": "The time of creation of the mapping",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CANIdentifier": {
        "properties": {
          "is_multiplexed": {
            "description": "A boolean value indicating whether the message to be logged has a multiplexer value. Only applies to CAN_SIGNAL source type.",
            "example": true,
            "type": "boolean"
          },
          "message_id": {
            "description": "This is used to uniquely identify the message ID of the CAN signal being evaluated for the condition. This message ID must be present in the DBC file associated with the bus specified in the previous field. This is only required if the source type is CAN_SIGNAL.",
            "example": 64,
            "type": "integer"
          },
          "multiplexer_value": {
            "description": "The multiplexer value of the signal in question. Only applies to CAN_SIGNAL source type.",
            "example": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CANLogMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogMessageProperties"
          },
          {
            "properties": {
              "bus_id": {
                "description": "The CAN bus ID of the CAN message.",
                "type": "number"
              },
              "is_multiplexed": {
                "description": "Indicates whether the message has a multiplexer value.",
                "type": "boolean"
              },
              "message_id": {
                "description": "Unique identifier for the CAN message.",
                "type": "string"
              },
              "multiplexer_value": {
                "description": "Multiplexer value of the message, if applicable.",
                "type": "number"
              },
              "name": {
                "description": "Name of the CAN message, matching the DBC file.",
                "type": "string"
              }
            },
            "required": [
              "bus_id",
              "message_id"
            ],
            "type": "object"
          }
        ],
        "example": {
          "bus_id": 0,
          "frequency_ms": 500,
          "message_id": "16",
          "name": "DU_Status",
          "source_type": "CAN"
        },
        "type": "object"
      },
      "CANSignalCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogConditionProperties"
          },
          {
            "properties": {
              "bus_id": {
                "description": "ID of the CAN bus where the signal originates.",
                "type": "number"
              },
              "is_multiplexed": {
                "description": "Indicates whether the message has a multiplexer signal.",
                "type": "boolean"
              },
              "message_id": {
                "description": "Unique identifier for the CAN signal message.",
                "type": "string"
              },
              "multiplexer_value": {
                "description": "Multiplexer value of the signal, if applicable.",
                "type": "number"
              },
              "name": {
                "description": "Name of the CAN signal, matching exactly what is found in the DBC file.",
                "type": "string"
              }
            },
            "required": [
              "bus_id",
              "message_id"
            ],
            "type": "object"
          }
        ],
        "example": {
          "bus_id": 0,
          "compare_value": 1,
          "message_id": "64",
          "name": "BMS_CHARGE_STATUS",
          "operator": "==",
          "source_type": "CAN_SIGNAL"
        },
        "type": "object"
      },
      "CANSignalLogMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogMessageProperties"
          },
          {
            "properties": {
              "bus_id": {
                "description": "The CAN bus ID of the CAN message.",
                "type": "number"
              },
              "is_multiplexed": {
                "description": "Indicates whether the message has a multiplexer value.",
                "type": "boolean"
              },
              "log_trigger_settings": {
                "properties": {
                  "onchange_settings": {
                    "properties": {
                      "threshold": {
                        "description": "Minimum signal change for logging.",
                        "type": "number"
                      },
                      "threshold_type": {
                        "description": "Type of threshold, currently only 'ABSOLUTE' is supported",
                        "enum": [
                          "ABSOLUTE"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "message_id": {
                "description": "Unique identifier for the CAN signal message.",
                "type": "string"
              },
              "multiplexer_value": {
                "description": "Multiplexer value of the signal, if applicable.",
                "type": "number"
              },
              "name": {
                "description": "Name of the CAN signal, matching the DBC file.",
                "type": "string"
              }
            },
            "required": [
              "bus_id",
              "message_id"
            ],
            "type": "object"
          }
        ],
        "example": {
          "bus_id": 1,
          "frequency_ms": 100,
          "is_multiplexed": true,
          "log_trigger_settings": {
            "onchange_settings": {
              "threshold": 5,
              "threshold_type": "ABSOLUTE"
            }
          },
          "message_id": "16",
          "multiplexer_value": 1,
          "name": "BMS_SOC",
          "source_type": "CAN_SIGNAL"
        },
        "type": "object"
      },
      "CommandDefinition": {
        "example": null,
        "properties": {
          "commandId": {
            "description": "A unique identifier for the command.",
            "type": "number"
          },
          "description": {
            "description": "A description of the command.",
            "type": "string"
          },
          "group": {
            "description": "The group that the command belongs to.",
            "type": "string"
          },
          "name": {
            "description": "The name of the command.",
            "type": "string"
          },
          "requestPayloadFields": {
            "description": "The request payload fields associated with the command.",
            "items": {
              "$ref": "#/components/schemas/RequestPayloadField"
            },
            "type": "array"
          },
          "responsePayloadFields": {
            "description": "The response payload fields associated with the command.",
            "items": {
              "$ref": "#/components/schemas/ResponsePayloadField"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CommandRequest": {
        "example": {
          "commandId": 200,
          "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
          "commandSequencePosition": 4,
          "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
          "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
          "createdAt": "2022-06-18T03:26:44.950605Z",
          "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
          "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
          "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
          "expiresBy": "2022-06-18T03:29:51.827053Z",
          "metadata": null,
          "payload": {
            "ecuAddress": "601",
            "hexString": "22f111"
          },
          "responseTimeout": 5500,
          "status": "RESPONSE_PENDING",
          "updatedAt": "2022-06-18T03:26:51.827053Z"
        },
        "properties": {
          "commandId": {
            "description": "A unique identifier for the command.",
            "type": "number"
          },
          "commandRequestId": {
            "description": "A unique identifier for the command request.",
            "type": "string"
          },
          "commandSequenceRequestId": {
            "description": "A unique identifier for the associated command sequence request.",
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the command request's creation.",
            "readOnly": true,
            "type": "string"
          },
          "creatorUserId": {
            "description": "A unique identifier for the user that created the command request.",
            "format": "uuid",
            "type": "string"
          },
          "decoderMappingId": {
            "description": "A unique identifier for the decoder mapping that was in use by the device when the command request was created.",
            "format": "uuid",
            "type": "string"
          },
          "deviceId": {
            "description": "A unique identifier for the device.",
            "format": "uuid",
            "type": "string"
          },
          "expiresBy": {
            "description": "The timestamp after which Command Manager will consider the command request expired. Expired command requests will not be executed.",
            "type": "string"
          },
          "metadata": {
            "description": "Additional details of the command request. This data is currently used internally by the Sibros Cloud. As such, changes to the JSON schema are frequent and API clients are not recommended to rely upon the field.",
            "type": "string"
          },
          "payload": {
            "description": "The contents of the command request vary by command ID, requiring different field names for each ID. Below are examples of payloads for various command IDs. For more detailed information, refer to the response payload specifications at GET /command-definitions.\n| Command ID              | Payload Example |\n|-------------------------|-------------|\n| 100                     | {\"wifiState\": \"ENABLED\"} |\n| 101                     | {\"ssid\": \"test_ssid\", \"encryption\": \"WPA2\", \"hiddenSSID\": false, \"passphrase\": \"password\"} |\n| 107                     | {} |\n| 10000+                  | {\"customPayload\": \"aGVsbG8hd29ybGQ=\"} |\n",
            "type": "object"
          },
          "responseTimeout": {
            "description": "This setting defines how long (in milliseconds) the Command Manager waits for a response before marking a request as timed out. For UDS (Unified Diagnostic Services) commands, the timeout is the lesser of the default UDS timeout and the timeout specified in the command request.",
            "type": "number"
          },
          "status": {
            "$ref": "#/components/schemas/CommandStatusEnum"
          },
          "updatedAt": {
            "description": "A timestamp of the command request's latest update.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deviceId"
        ],
        "type": "object"
      },
      "CommandResponse": {
        "example": {
          "commandId": null,
          "commandRequestId": null,
          "commandResponseId": null,
          "companyId": null,
          "createdAt": null,
          "deviceId": null,
          "deviceTimestamp": null,
          "payload": null,
          "status": null
        },
        "properties": {
          "commandId": {
            "description": "A unique identifier for the command.",
            "type": "number"
          },
          "commandRequestId": {
            "description": "A unique identifier for the command request.",
            "type": "string"
          },
          "commandResponseId": {
            "description": "A unique identifier for the command response.",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the command response's creation.",
            "type": "string"
          },
          "deviceId": {
            "description": "A unique identifier for the device.",
            "format": "uuid",
            "type": "string"
          },
          "deviceTimestamp": {
            "description": "A timestamp reported by the device.",
            "type": "string"
          },
          "payload": {
            "description": "The contents of the command response.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CommandStatusEnum"
          }
        },
        "type": "object"
      },
      "CommandSequenceDefinition": {
        "example": {
          "archived": false,
          "commandRequests": [
            {
              "commandId": 201,
              "commandRequestId": "",
              "companyId": "",
              "createdAt": "",
              "creatorUserId": null,
              "deviceId": "00000000-0000-0000-0000-000000000000",
              "payload": [
                {
                  "duration": 10000,
                  "ecuAddress": "601",
                  "period": 1000,
                  "responseType": "NONE"
                }
              ],
              "responseTimeout": 5000,
              "status": "",
              "updatedAt": ""
            },
            {
              "commandId": 200,
              "commandRequestId": "",
              "companyId": "",
              "createdAt": "",
              "creatorUserId": null,
              "deviceId": "00000000-0000-0000-0000-000000000000",
              "payload": [
                {
                  "ecuAddress": "601",
                  "hexString": "1001"
                }
              ],
              "responseTimeout": 5500,
              "status": "",
              "updatedAt": ""
            }
          ],
          "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
          "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
          "createdAt": "2022-05-25T17:19:32.320762Z",
          "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
          "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
          "description": "UDS Server Simulator test sequence!",
          "inUse": false,
          "name": "UDS Server Simulator Test Sequence",
          "updatedAt": "2022-06-15T04:11:17.517174Z"
        },
        "properties": {
          "archived": {
            "description": "A boolean value indicating whether the command sequence definition is archived. Archived command sequence definitions are read only and cannot be modified.",
            "type": "boolean"
          },
          "commandRequests": {
            "items": {
              "$ref": "#/components/schemas/CommandRequest"
            },
            "type": "array"
          },
          "commandSequenceDefinitionId": {
            "description": "A unique identifier for the command sequence definition.",
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the command sequence definition's creation.",
            "type": "string"
          },
          "creatorUserId": {
            "description": "A unique identifier for the user that created the command sequence definition.",
            "format": "uuid",
            "type": "string"
          },
          "decoderMappingId": {
            "description": "A unique identifier for the decoder mapping.",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "The description of the command sequence definition.",
            "type": "string"
          },
          "inUse": {
            "description": "A boolean value indicating whether the command sequence definition is currently in use. - Proceed with caution when modifying/deleting command sequence definitions that are in use because this often results in a cascade of unwanted changes.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the command sequence definition.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the command sequence definition's latest update.",
            "type": "string"
          }
        },
        "required": [
          "decoderMappingId",
          "name",
          "description"
        ],
        "type": "object"
      },
      "CommandSequenceDefinitionsPage": {
        "example": {
          "count": 1,
          "results": [
            {
              "archived": false,
              "commandRequests": [
                {
                  "commandId": 201,
                  "commandRequestId": "",
                  "companyId": "",
                  "createdAt": "",
                  "creatorUserId": "c1904cef-68bb-4557-836b-a775d1f4513f",
                  "deviceId": "00000000-0000-0000-0000-000000000000",
                  "payload": [
                    {
                      "duration": 10000,
                      "ecuAddress": "601",
                      "period": 1000,
                      "responseType": "NONE"
                    }
                  ],
                  "responseTimeout": 5000,
                  "status": "",
                  "updatedAt": ""
                },
                {
                  "commandId": 200,
                  "commandRequestId": "",
                  "companyId": "",
                  "createdAt": "",
                  "creatorUserId": "c1904cef-68bb-4557-836b-a775d1f4513f",
                  "deviceId": "00000000-0000-0000-0000-000000000000",
                  "payload": [
                    {
                      "ecuAddress": "601",
                      "hexString": "1001"
                    }
                  ],
                  "responseTimeout": 3000,
                  "status": "",
                  "updatedAt": ""
                }
              ],
              "commandSequenceDefinitionId": "3004d1cc-6838-4881-89db-c69d13aeaa5f",
              "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
              "createdAt": "2022-05-25T17:19:32.320762Z",
              "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
              "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
              "description": "UDS Server Simulator test sequence!",
              "inUse": false,
              "name": "UDS Server Simulator Test Sequence",
              "updatedAt": "2022-06-15T04:11:17.517174Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of command sequence definitions.",
            "items": {
              "$ref": "#/components/schemas/CommandSequenceDefinition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CommandSequenceRequest": {
        "example": {
          "commandId": 200,
          "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
          "commandSequencePosition": 1,
          "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
          "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
          "createdAt": "2022-06-18T03:26:44.950605Z",
          "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
          "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
          "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
          "metadata": null,
          "payload": {
            "ecuAddress": "601",
            "hexString": "22f111"
          },
          "responseTimeout": 5500,
          "status": "RESPONSE_PENDING",
          "updatedAt": "2022-06-18T03:26:51.827053Z"
        },
        "properties": {
          "commandSequenceDefinitionId": {
            "description": "A unique identifier for the command sequence definition.",
            "type": "string"
          },
          "commandSequenceRequestId": {
            "description": "A unique identifier for the command sequence request.",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the command sequence request's creation.",
            "readOnly": true,
            "type": "string"
          },
          "creatorUserId": {
            "description": "A unique identifier for the user that created the command sequence request.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deviceId": {
            "description": "A unique identifier for the device.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CommandSequenceRequestStatusEnum"
          },
          "statusHistory": {
            "description": "The status transition history of the command sequence request.",
            "items": {
              "$ref": "#/components/schemas/CommandSequenceRequestStatusChangeLog"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "A timestamp of the command sequence request's latest update.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deviceId",
          "commandSequenceDefinitionId"
        ],
        "type": "object"
      },
      "CommandSequenceRequestStatusChangeLog": {
        "example": {
          "reason": null,
          "setAt": null,
          "status": null
        },
        "properties": {
          "reason": {
            "description": "A short explanation of why the associated status was set.",
            "type": "string"
          },
          "setAt": {
            "description": "A timestamp of the time at which the associated status was set.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CommandSequenceRequestStatusEnum"
          }
        },
        "type": "object"
      },
      "CommandSequenceRequestStatusEnum": {
        "description": "The status of a command sequence request.\n| Enum Value              | Description |\n|-------------------------|-------------|\n| UNSPECIFIED             | The device responded with a status of \"UNSPECIFIED,\" indicating an unknown status for one or more commands in the CommandSequence. |\n| COMPLETED               | All commands in the command sequence were successfully executed and no failures were detected. |\n| COMPLETED_WITH_FAILURES | The command sequence finished executing. Some commands were executed successfully but some failed. |\n| FAILED                  | The command sequence finished executing but all commands failed. |\n| IN_PROGRESS             | At least one of the command requests is currently being processed. |\n| REQUEST_PENDING         | The cloud has sent the command sequence request to the device and is awaiting acknowledgement from the device. |\n| REQUEST_SENT_TIMED_OUT  | The cloud has sent the command sequence request to the device, but no acknowledgement was received from the device within 24 hours. |\n| INVALID                 | The device responded with a status that could not be interpreted by the cloud. This scenario differs from \"UNSPECIFIED,\" where the device explicitly signals a lack of awareness regarding its current status. |\n",
        "enum": [
          "UNSPECIFIED",
          "COMPLETED",
          "COMPLETED_WITH_FAILURES",
          "FAILED",
          "IN_PROGRESS",
          "REQUEST_PENDING",
          "REQUEST_SENT_TIMED_OUT",
          "INVALID"
        ],
        "type": "string"
      },
      "CommandStatusEnum": {
        "description": "The status of a command request or response.\n\n| Enum Value           | Description |\n|----------------------|-------------|\n| UNSPECIFIED          | The device responded with a status â€œUNSPECIFIEDâ€ which means an unknown status was detected on the device. |\n| COMPLETED            | The device successfully executed the command. |\n| FAILED               | The device failed to execute the command. |\n| RESPONSE_TIMEOUT     | The device received the command request but responded with a timeout response to the cloud. This typically indicates the command timed out when executing on the device. |\n| REQUEST_EXPIRED      | The command is past its expiration time so cannot be executed. |\n| PRECONDITION_FAILED  | The command will not be executed because its precondition failed. |\n| RESPONSE_PENDING     | The device received the command request but is yet to send a command response to the cloud. |\n| INVALID_ID           | The command ID provided for the command was not valid. |\n| INVALID_HANDLER      | The command had an invalid handler. |\n| INVALID_DATA         | The command received invalid data or parameters. |\n| REQUEST_PENDING      | The cloud has sent the command request to the device and is awaiting acknowledgement from the device. |\n| REQUEST_SENT_TIMED_OUT | The command request has been sent but the device did not send an acknowledgement within 24hrs. |\n| INVALID              | The device responded with a status that cannot be interpreted by the cloud. It is important to distinguish this scenario from cases characterized as \"UNSPECIFIED,\" wherein the device explicitly indicates a lack of awareness regarding its current status. |\n",
        "enum": [
          "UNSPECIFIED",
          "COMPLETED",
          "FAILED",
          "RESPONSE_TIMEOUT",
          "REQUEST_EXPIRED",
          "PRECONDITION_FAILED",
          "RESPONSE_PENDING",
          "INVALID_ID",
          "INVALID_HANDLER",
          "INVALID_DATA",
          "REQUEST_PENDING",
          "REQUEST_SENT_TIMED_OUT",
          "INVALID"
        ],
        "type": "string"
      },
      "CommonLogConditionProperties": {
        "properties": {
          "compare_value": {
            "description": "The value that triggers data logging (optional if within is used).",
            "format": "float",
            "type": "number"
          },
          "operator": {
            "description": "The operator used for evaluating the condition.",
            "enum": [
              "==",
              "!=",
              "<",
              "<=",
              ">=",
              ">",
              "Within"
            ],
            "type": "string"
          },
          "source_type": {
            "$ref": "#/components/schemas/SourceType"
          },
          "within_parameters": {
            "properties": {
              "max": {
                "description": "The maximum value of the range (required if operator is 'Within').",
                "format": "float",
                "type": "number"
              },
              "min": {
                "description": "The minimum value of the range (required if operator is 'Within').",
                "format": "float",
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "operator",
          "name",
          "source_type"
        ],
        "type": "object"
      },
      "CommonLogMessageProperties": {
        "properties": {
          "frequency_ms": {
            "description": "Sampling interval for logging data.",
            "type": "number"
          },
          "source_type": {
            "$ref": "#/components/schemas/SourceType"
          }
        },
        "required": [
          "frequency_ms",
          "name",
          "source_type"
        ],
        "type": "object"
      },
      "CompaniesPage": {
        "example": {
          "results": [
            {
              "approved": true,
              "companyDomain": "sibros.tech",
              "companyID": "f31af7d0-0383-4cd6-b7fe-f4283cd08e18",
              "companyName": "Sibros",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "imageURL": "someurl.png",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "userEmail": "example@sibros.tech"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of companies.",
            "items": {
              "$ref": "#/components/schemas/Company"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Company": {
        "example": {
          "approved": true,
          "companyDomain": "sibros.tech",
          "companyID": "f31af7d0-0383-4cd6-b7fe-f4283cd08e18",
          "companyName": "Sibros",
          "createdAt": "2020-02-02T20:20:20.202Z",
          "imageURL": "someurl.png",
          "updatedAt": "2020-02-02T20:20:20.202Z",
          "userEmail": "example@sibros.tech"
        },
        "properties": {
          "approved": {
            "description": "A boolean value indicating whether the company is approved.",
            "type": "boolean"
          },
          "companyDomain": {
            "description": "The domain/URL for the company.",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "companyName": {
            "description": "The name of the company.",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the company's creation in the database.",
            "type": "string"
          },
          "imageURL": {
            "description": "URL link to the location of the image for the company.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the last time the company record was updated in the database.",
            "type": "string"
          },
          "userEmail": {
            "description": "Email of the primary user for the company.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComponentType": {
        "enum": [
          "INVALID",
          "PACKAGE_MANAGER",
          "UPDATE_MANAGER",
          "ECU"
        ],
        "type": "string"
      },
      "ConfigType": {
        "description": "This field is used to denote the type of log rule.\n| Enum Value | Description |\n| --- | --- |\n| event_configuration | This type denotes log rule configurations that log data in specified windows when conditions are met. If `event_configuration` is used as the `config_type`, then the API will expect the `milliseconds_to_log_before` and `milliseconds_to_log_after` fields to be populated. |\n| log_configuration | This type denotes log rule configurations that log data continuously while conditions are true. |\n",
        "enum": [
          "event_configuration",
          "log_configuration"
        ],
        "type": "string"
      },
      "ConfigurableCustomCommand": {
        "properties": {
          "configurableCustomCommandId": {
            "description": "The UUID for configurable custom command",
            "example": "6e5c183a-1ee2-4ee1-9f6a-aa35a8d42382",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectionMedia": {
        "description": "Connection Media for deployments and rollouts\n",
        "enum": [
          "WIFI",
          "CELLULAR",
          "INVALID"
        ],
        "type": "string"
      },
      "ConnectionMediumType": {
        "properties": {
          "fieldName": {
            "$ref": "#/components/schemas/ConnectionMedia"
          }
        },
        "type": "object"
      },
      "ConnectionType": {
        "enum": [
          "INVALID",
          "WIFI",
          "CELLULAR",
          "WIRED"
        ],
        "type": "string"
      },
      "Consent": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.'",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "consentID": {
            "description": "A unique identifier for the consent.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the consent's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deploymentID": {
            "description": "A unique identifier for the deployment of the consent.",
            "example": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
            "format": "uuid",
            "type": "string"
          },
          "expirationTime": {
            "description": "A timestamp of the consent's expiration time.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ConsentStatus"
          },
          "updatedAt": {
            "description": "A timestamp of the consent's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConsentStatus": {
        "enum": [
          "CONSENT_ACCEPTED",
          "CONSENT_REJECTED"
        ],
        "type": "string"
      },
      "Controller": {
        "properties": {
          "abbreviation": {
            "description": "The abbreviation for the controller.",
            "example": "BMS",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "f95c2b3d-c56b-4cf6-97ca-0a9d4e9fdfa7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "componentID": {
            "description": "The component identifier for the controller.",
            "example": 1,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the controller's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          },
          "dependencies": {
            "description": "A list of controllerIDs that the controller depends on. Typically, these dependencies need to be updated before the controller can be updated.",
            "example": "[c2d0a83e-a551-4e97-ab2f-7bf7ab143e77]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "deviceModelID": {
            "description": "A unique identifier for the device model of the controller.",
            "example": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the controller.",
            "example": "96958c57-b4de-4b7e-a180-99d3dfe5d012",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "locked": {
            "description": "A boolean value indicating whether the controller can be edited.",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "The name for the controller.",
            "example": "Battery Management System",
            "type": "string"
          },
          "updateable": {
            "description": "A boolean value indicating whether the controller can be updated.",
            "example": true,
            "type": "boolean"
          },
          "updatedAt": {
            "description": "A timestamp of the controller's latest update.",
            "example": "2022-02-03T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ControllersPage": {
        "example": {
          "controllers": [
            {
              "abbreviation": "BMS",
              "companyID": "f95c2b3d-c56b-4cf6-97ca-0a9d4e9fdfa7",
              "componentID": "1",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "dependencies": [
                "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77"
              ],
              "deviceModelID": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
              "id": "96958c57-b4de-4b7e-a180-99d3dfe5d012",
              "name": "Battery Management System",
              "updateable": true,
              "updatedAt": "2022-02-03T20:20:20.202Z"
            },
            {
              "abbreviation": "TCS",
              "companyID": "f95c2b3d-c56b-4cf6-97ca-0a9d4e9fdfa7",
              "componentID": "1",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "dependencies": [
                "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77"
              ],
              "deviceModelID": "c2d0a83e-a551-4e97-ab2f-7bf7ab143e77",
              "id": "ab958c57-b4de-4b7e-a180-99d3dfe5d012",
              "name": "Thermal Controller System",
              "updateable": true,
              "updatedAt": "2022-02-03T20:20:20.202Z"
            }
          ],
          "count": 2
        },
        "properties": {
          "controllers": {
            "description": "A list of controllers.",
            "items": {
              "$ref": "#/components/schemas/Controller"
            },
            "type": "array"
          },
          "count": {
            "description": "The total count of all matching controllers, disregarding limit and offset.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ConvertedFile": {
        "properties": {
          "ID": {
            "description": "A unique identifier for the converted file.",
            "format": "uuid",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "The date and time the converted file was created.",
            "format": "date-time",
            "type": "string"
          },
          "deviceLogIDs": {
            "description": "A list of device log IDs that were used to create the converted file.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The converted file."
          },
          "lastInitiatedAt": {
            "description": "The date and time the converted file request was last initiated.",
            "format": "date-time",
            "type": "string"
          },
          "sourceFileFormat": {
            "$ref": "#/components/schemas/SourceFileFormat"
          },
          "targetFileFormat": {
            "$ref": "#/components/schemas/TargetFileFormat"
          },
          "userID": {
            "description": "The user ID of the user who made the file conversion request.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConvertedFilesPage": {
        "properties": {
          "count": {
            "description": "The number of converted files.",
            "type": "number"
          },
          "results": {
            "description": "A list of converted files.",
            "items": {
              "$ref": "#/components/schemas/ConvertedFile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CreatedAtFilter": {
        "properties": {
          "after": {
            "description": "Filter for devices created after the specified date",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "before": {
            "description": "Filter for devices created before the specified date",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomCommand": {
        "properties": {
          "commandId": {
            "description": "The ID of the custom command - unique within a decoder mapping.",
            "example": 10001,
            "type": "integer"
          },
          "decoderMappingId": {
            "description": "A unique identifier for the decoder mapping that maps to the custom command.",
            "example": "f1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "The description of the custom command.",
            "example": "Activates the passenger side ejection seat.",
            "type": "string"
          },
          "group": {
            "description": "The name of the group of the custom command.",
            "example": "Special Body Controls",
            "type": "string"
          },
          "inUse": {
            "description": "If the custom command has been issued to a device. - Proceed with caution when modifying or deleting custom commands that are in use, as this can often result in a cascade of unwanted changes.",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "The name of the custom command.",
            "example": "Activate Ejection Seat",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerFile": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "customerFileID": {
            "description": "The unique ID for the customer file",
            "example": "994b3f53-ef32-48cd-b0bb-730c98fe0ecb",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          }
        },
        "type": "object"
      },
      "CustomerFilesPage": {
        "properties": {
          "count": {
            "description": "The total count of all matching customer files, disregarding limit and offset.",
            "example": 1,
            "type": "integer"
          },
          "results": {
            "description": "A list of customer files.",
            "items": {
              "$ref": "#/components/schemas/CustomerFile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DecoderFile": {
        "properties": {
          "abbreviation": {
            "deprecated": true,
            "description": "An abbreviation for the decoder file.",
            "example": "PAS",
            "type": "string"
          },
          "busID": {
            "deprecated": true,
            "description": "A unique bus identifier.",
            "example": 1,
            "type": "integer"
          },
          "busMappings": {
            "description": "List of bus mappings associated with the file",
            "items": {
              "$ref": "#/components/schemas/BusMapping"
            },
            "type": "array"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the decoder file's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "decoderFileID": {
            "description": "A unique identifier for the decoder file.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the associated decoder mapping.",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "deprecated": true,
            "description": "A description for the decoder file.",
            "example": "Parking assist systems",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "updatedAt": {
            "description": "A timestamp of the decoder file's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DecoderMapping": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "10064144-520f-447e-aa64-d39bf770b96e",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "configurableCustomCommands": {
            "description": "A list of configurable custom commands",
            "items": {
              "$ref": "#/components/schemas/ConfigurableCustomCommand"
            },
            "type": "array"
          },
          "content": {
            "description": "A JSON byte array, containing the contents of the decoder mapping.",
            "example": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\",\"senders\": [\"DU\"]}}`",
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "A timestamp of the decoder mapping's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "customCommands": {
            "description": "A list of custom commands.",
            "items": {
              "$ref": "#/components/schemas/CustomCommand"
            },
            "type": "array"
          },
          "decoderFiles": {
            "description": "A list of decoder files.",
            "items": {
              "$ref": "#/components/schemas/DecoderFile"
            },
            "type": "array"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the decoder mapping.",
            "example": "d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "decoderMappingName": {
            "description": "The name of the decoder mapping.",
            "example": "dbc1",
            "type": "string"
          },
          "decoderMappingStatus": {
            "$ref": "#/components/schemas/DecoderMappingStatus"
          },
          "deviceModelID": {
            "description": "The device model associated with the decoder mapping.",
            "example": "f1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "type": "string"
          },
          "diagnosticFiles": {
            "description": "The diagnostic files associated with the decoder mapping.",
            "items": {
              "$ref": "#/components/schemas/DiagnosticFile"
            },
            "type": "array"
          },
          "localFiles": {
            "description": "A list of local files",
            "items": {
              "$ref": "#/components/schemas/LocalDirectory"
            },
            "type": "array"
          },
          "nameValueMappings": {
            "description": "The escaped JSON string of a list of custom signals. \"name\" and \"valueType\" are required. \"name\" must be unique within this list. \"valueType\" is one of {\"Integer\", \"Float\", \"Enum\"}. \"enumMappings\" is required only if \"valueType\" = \"Enum\". \"unit\" is optional.",
            "example": "[{\"name\": \"signalA\", \"valueType\": \"Integer\", \"unit\": \"km\"}, {\"name\": \"signalB\", \"valueType\": \"Float\", \"unit\": \"\"}, {\"name\": \"signalC\", \"valueType\": \"Enum\", \"unit\": null, \"enumMappings\": [{\"name\": \"ENUM_1\", \"value\": \"0\"}, {\"name\": \"ENUM_2\", \"value\": \"1\"}]}]",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the decoder mapping's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DecoderMappingStatus": {
        "enum": [
          "INVALID",
          "NOT_READY",
          "IN_PROGRESS",
          "READY",
          "ERROR"
        ],
        "type": "string"
      },
      "DecoderMappingsPage": {
        "example": {
          "count": 2,
          "decoderMappings": [
            {
              "companyID": "10064144-520f-447e-aa64-d39bf770b96e",
              "content": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\", \"senders\": [\"DU\"]}}`",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "customCommands": null,
              "decoderFiles": [
                {
                  "abbreviation": "SIB",
                  "busID": 0,
                  "companyID": "212b485b-eab0-47b8-91e5-bad79521f9e0",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderFileID": "6759e253-1c39-49aa-97b3-b49da8c549a7",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "description": "Sibros",
                  "downloadURL": "example-download.url",
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file2.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "fileID": "c49cbb97-29ae-449b-b014-6cde9ac92172",
                  "updatedAt": "2020-03-02T20:20:20.202Z",
                  "uploadURL": "example-upload.url"
                }
              ],
              "decoderMappingID": "d1fb0fe8-4d24-44ba-a075-36dca4d6031b",
              "decoderMappingName": "main_dbc",
              "decoderMappingStatus": "IN_PROGRESS",
              "deviceModelID": "cfa1decf-f550-43a0-818a-7a21883432d3",
              "diagnosticFiles": [
                {
                  "controllerID": "93e0c287-a497-46c4-a177-63b3c9225e13",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "diagnosticFileID": "6562ced3-ab34-4499-b79b-4e8c9e2a5414",
                  "ecuAddress": 385,
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file1.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "functionalAddress": 3584,
                  "updatedAt": "2020-03-02T20:20:20.202Z"
                }
              ],
              "updatedAt": "2020-02-03T20:20:20.202Z"
            },
            {
              "companyID": "10064144-520f-447e-aa64-d39bf770b96e",
              "content": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\", \"senders\": [\"DU\"]}}`",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "customCommands": null,
              "decoderFiles": [
                {
                  "abbreviation": "SIB",
                  "busID": 0,
                  "companyID": "212b485b-eab0-47b8-91e5-bad79521f9e0",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderFileID": "6759e253-1c39-49aa-97b3-b49da8c549a7",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "description": "Sibros",
                  "downloadURL": "example-download.url",
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file2.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "fileID": "c49cbb97-29ae-449b-b014-6cde9ac92172",
                  "updatedAt": "2020-03-02T20:20:20.202Z",
                  "uploadURL": "example-upload.url"
                }
              ],
              "decoderMappingID": "abfb0fe8-4d24-44ba-a075-36dca4d6031b",
              "decoderMappingName": "test_dbc",
              "decoderMappingStatus": "IN_PROGRESS",
              "deviceModelID": "cfa1decf-f550-43a0-818a-7a21883432d3",
              "diagnosticFiles": [
                {
                  "controllerID": "93e0c287-a497-46c4-a177-63b3c9225e13",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "diagnosticFileID": "6562ced3-ab34-4499-b79b-4e8c9e2a5414",
                  "ecuAddress": 385,
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file1.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "functionalAddress": 3584,
                  "updatedAt": "2020-03-02T20:20:20.202Z"
                }
              ],
              "updatedAt": "2020-02-03T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching decoder mappings, disregarding limit and offset.",
            "type": "number"
          },
          "decoderMappings": {
            "description": "A list of decoder mappings.",
            "items": {
              "$ref": "#/components/schemas/DecoderMapping"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeepLoggerRequest": {
        "example": [
          {
            "createdAt": "2020-02-03T20:20:20.202Z",
            "deviceID": "7f3c3e07-8e56-4c58-818e-3162e949a2db",
            "requestContent": {
              "fileUploadRequest": {
                "endTime": "2020-02-03T20:20:20.202Z",
                "logRuleID": "8e4d4907-8e56-4c58-818e-3162e949a2db",
                "startTime": "2020-02-02T20:20:20.202Z"
              }
            },
            "requestStatus": "REQUEST_SUCCEEDED",
            "requestType": "FILE_UPLOAD_REQUEST",
            "responseContent": {
              "fileUploadResponse": {
                "uploadFileCount": 1
              }
            },
            "responseTimestamp": "2020-02-03T20:20:20.202Z",
            "statusDetails": "",
            "updatedAt": "2020-02-03T20:20:20.202Z"
          },
          {
            "createdAt": "2020-02-03T20:20:20.202Z",
            "deviceID": "7f3c3e07-8e56-4c58-818e-3162e949a2db",
            "requestContent": {
              "fileUploadRequest": {
                "endTime": "2020-02-03T20:20:20.202Z",
                "logRuleID": "8e4d4907-8e56-4c58-818e-3162e949a2db",
                "startTime": "2020-02-02T20:20:20.202Z"
              }
            },
            "requestStatus": "REQUEST_FAILED",
            "requestType": "FILE_UPLOAD_REQUEST",
            "responseContent": {
              "fileUploadResponse": {
                "uploadFileCount": 0
              }
            },
            "responseTimestamp": "2020-02-03T20:20:20.202Z",
            "statusDetails": "",
            "updatedAt": "2020-02-03T20:20:20.202Z"
          }
        ],
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the company's creation in the database.",
            "type": "string"
          },
          "deviceID": {
            "description": "A unique identifier for the device.",
            "type": "string"
          },
          "requestContent": {
            "properties": {
              "fileUploadRequest": {
                "properties": {
                  "endTime": {
                    "description": "The end time of the files to be uploaded.",
                    "type": "string"
                  },
                  "logRuleID": {
                    "description": "The ID of the log rule that generated the files to be uploaded.",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "The start time of the files to be uploaded.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "requestStatus": {
            "description": "An enum representing the status of the request.",
            "enum": [
              "REQUEST_SUCCEEDED",
              "REQUEST_FAILED",
              "REQUEST_PENDING"
            ],
            "type": "string"
          },
          "requestType": {
            "description": "An enum representing the type of request.",
            "enum": [
              "DL_FILE_UPLOAD_REQUEST"
            ],
            "type": "string"
          },
          "responseContent": {
            "properties": {
              "fileUploadResponse": {
                "properties": {
                  "uploadFileCount": {
                    "description": "The number of files uploaded as a result of the request.",
                    "type": "number"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "responseTimestamp": {
            "description": "The timestamp of the response.",
            "type": "string"
          },
          "statusDetails": {
            "description": "A string containing details about the status of the request.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the last time the company record was updated in the database.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeepLoggerRequestsPage": {
        "properties": {
          "count": {
            "type": "number"
          },
          "deepLoggerRequests": {
            "items": {
              "$ref": "#/components/schemas/DeepLoggerRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeepUpdaterProvisioningDeploymentOptions": {
        "properties": {
          "bypassUserConsent": {
            "description": "Optional specifier for whether user consent should be bypassed. When unspecified, 'true' will be inferred",
            "example": true,
            "type": "boolean"
          },
          "noOp": {
            "description": "Optional specifier for whether the deployment should be a no-op. When unspecified, will be inferred from company settings",
            "example": true,
            "type": "boolean"
          },
          "packageID": {
            "description": "Optional package specifier. When unspecified, the device's deployment history will be used to infer the latest package deployed to the device",
            "example": "3383723e-6634-40a2-896e-8f2ec38b966b",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DefaultState": {
        "properties": {
          "approvers": {
            "description": "A list of default state approvers.",
            "items": {
              "$ref": "#/components/schemas/DefaultStateApprover"
            },
            "type": "array"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "cc2cbc42-b3a7-428d-8456-5fd7d24e2628",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the default state's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "defaultStateId": {
            "description": "A unique identifier for the default state.",
            "example": "9711cb1f-5b3a-407f-b586-bdffce5fd7e6",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deviceGroupId": {
            "description": "A unique identifier for the device group of the default state.",
            "example": "86b65709-c79c-4d87-bb6e-ed6b8e2dbbf0",
            "format": "uuid",
            "type": "string"
          },
          "deviceModelId": {
            "description": "A unique identifier for the device model of the default state.",
            "example": "084c9727-5bd7-4657-ad0e-67cc4766e4bc",
            "format": "uuid",
            "type": "string"
          },
          "ownerId": {
            "description": "A unique identifier for the owner of the default state.",
            "example": "6b9346d4-aaf6-4f1a-bd16-8454798bd8f2",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "packageId": {
            "description": "A unique identifier for the package of the default state.",
            "example": "f5883a08-fc43-468f-b9f6-b8eda7620949",
            "format": "uuid",
            "type": "string"
          },
          "selectiveLogConfigId": {
            "description": "A unique identifier for the default state's log configuration.",
            "example": "8b6d2d74-efe0-4c1c-8085-318b2d2507ec",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DefaultStateStatus"
          },
          "updatedAt": {
            "description": "A timestamp of the default state's latest update.",
            "example": "2022-03-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DefaultStateApprovalRequest": {
        "properties": {
          "approvalStatus": {
            "$ref": "#/components/schemas/DefaultStateApprovalStatus"
          }
        },
        "type": "object"
      },
      "DefaultStateApprovalStatus": {
        "description": "The default state approver status.\n",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED"
        ],
        "type": "string"
      },
      "DefaultStateApprover": {
        "properties": {
          "approvedAt": {
            "description": "A timestamp of the default state approver's approval.",
            "example": "2022-03-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "approverID": {
            "description": "A unique identifier for the default state approver.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the default state approver's creation.",
            "example": "2022-03-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DefaultStateApprovalStatus"
          },
          "updatedAt": {
            "description": "A timestamp of the default state approver's latest update.",
            "example": "2022-03-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "approverID"
        ],
        "type": "object"
      },
      "DefaultStateStatus": {
        "description": "The default state's status.\n",
        "enum": [
          "NOT_ACTIVE",
          "ACTIVE"
        ],
        "type": "string"
      },
      "DefaultStateStatusRequest": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DefaultStateStatus"
          }
        },
        "type": "object"
      },
      "DeleteCommandSequenceDefinitionResponse": {
        "example": {
          "result": "Command sequence definition 35cce610-3507-4a30-a0d7-6c6497c3370e has been deleted."
        },
        "properties": {
          "result": {
            "description": "A response message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteControllerByIDResponse": {
        "example": "Controller 55cce610-3507-4a30-a0d7-6c6497c3370e has been deleted.",
        "type": "string"
      },
      "DeleteConvertedFile": {
        "example": {
          "results": "successfully deleted converted file"
        },
        "properties": {
          "result": {
            "description": "A string containing a success message.",
            "type": "string"
          }
        },
        "type": "string"
      },
      "DeleteCustomCommandsByDecoderMappingResponse": {
        "description": "Number of custom commands that were deleted for the decoder mapping ID.",
        "example": "3 custom commands for decoder mapping ID d9465d3c-e9d5-4cda-98ed-bed6cef07626 have been deleted.",
        "type": "string"
      },
      "DeleteDeltaImageByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Delta image 8270fddc-99cb-4ffa-b334-637b2d6774e9 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteDeploymentByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Deployment 3d0db63f-aa61-4dd6-acd1-5441344d75c3 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteDeviceByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Device 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteDeviceGroupByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Device group 334baa75-d2c1-4133-ae0b-60a4b2ebfb08 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteDeviceLogByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Device log 4bfc797b-4dcf-4bf5-a5fa-008e0523300d has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteDeviceModelVariantResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "device model variant with ID 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 successfully deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteDeviceModelVariantVersionResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "device model variant version with ID 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 successfully deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteECUListRecordResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "ECU list record with ID 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 successfully deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteFaultModeMapResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "fault mode map with ID 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 successfully deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteImageByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Image 8270fddc-99cb-4ffa-b334-637b2d6774e9 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteImageMetadata": {
        "properties": {
          "ecuModel": {
            "$ref": "#/components/schemas/ImageECUModel"
          },
          "imageIndex": {
            "description": "This field uniquely identifies an image for ECUs with multiple images. This value must correspond to an image region defined in the relevant device model.",
            "example": 1,
            "type": "integer"
          },
          "originVersion": {
            "description": "The version of the full image that the delta image is based on. This field is required for delta images and must be null for full images.",
            "example": "1.0.0",
            "type": "string"
          },
          "version": {
            "description": "An identifier for the image that is unique for the given ECU model and image index.",
            "example": "1.0.0",
            "type": "string"
          }
        },
        "required": [
          "version",
          "ecuModel",
          "imageIndex"
        ],
        "type": "object"
      },
      "DeleteImagesByMetadataRequest": {
        "properties": {
          "collection": {
            "description": "Collection name chosen during initial setup of the Image Authentication Repository on the cloud.",
            "example": "sibros_collection",
            "type": "string"
          },
          "imageMetadata": {
            "$ref": "#/components/schemas/DeleteImageMetadata"
          }
        },
        "required": [
          "collection",
          "imageMetadata"
        ],
        "type": "object"
      },
      "DeleteLogRuleResponse": {
        "example": {
          "results": "Successfully deleted log rule."
        },
        "properties": {
          "results": {
            "description": "A string containing a success message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteMasterTokenByKeyResponse": {
        "example": {
          "result": "Master token 77a3ade680ce5bff has been deleted."
        },
        "properties": {
          "result": {
            "description": "A response message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeletePackageByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Package 9796671b-6e5e-415a-a07a-6094cae92ed4 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeletePackageGroupByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Package group 235c4527-81ec-43a9-892f-7f21b7d05324 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeletePackageManifestEntryByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Package manifest entry 6a9c9c29-ca45-493d-b9ce-20dc44031794 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteRoleByIDResponse": {
        "properties": {
          "result": {
            "description": "The deleted role message",
            "example": "role 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 successfully deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteRolloutByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Rollout 2f1df8dc-ae83-4aba-b75e-74f48e9ce8df has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteSelectiveLogConfigByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Selective log configuration 245c4527-81ec-43a9-892f-7f21b7d05325 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteSignalFaultModeResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Signal Fault Mode Map with ID 234baa75-d2c1-4133-ae0b-60a4b2ebfb08 successfully deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteTemplateByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Template c00ea4ce-0b54-4343-ab2d-6cd194ba1630 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteTemplateCategoryByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Template category c7097e28-9913-489f-a623-337f1b7992b0 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteUserByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "User 35cce610-3507-4a30-a0d7-6c6497c3370e has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteUserFavoriteByIDResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Template e79976aa-041f-48d3-be92-57cda246cd78 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeltaImage": {
        "properties": {
          "collection": {
            "description": "Collection name chosen during initial setup of the Image Authentication Repository on the cloud.",
            "example": "sibros_collection",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the delta image's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "custom": {
            "description": "Optional custom delta image metadata for custom update sequences. May be any JSON object. The provided content will be securely delivered to vehicles alongside the image file during OTA updates. Specify null if not needed.",
            "example": {},
            "type": "object"
          },
          "deltaImageId": {
            "description": "A unique identifier for the delta image. Note - This differs from the uptaneImageID.",
            "example": "f7e07e00-4def-45a8-955f-875a0542d697",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "fileFormat": {
            "description": "The file format of the delta image.",
            "example": "bin",
            "type": "string"
          },
          "fullImageId": {
            "description": "The unique identifier of the full image that the delta image belongs to",
            "example": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
            "format": "uuid",
            "type": "string"
          },
          "originVersion": {
            "description": "The software version that the delta image is a delta from",
            "example": "1.0.1",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the delta image's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "uptaneHashes": {
            "description": "A list of image uptane hashes.",
            "items": {
              "$ref": "#/components/schemas/Hash"
            },
            "type": "array"
          },
          "uptaneImageId": {
            "description": "The Uptane-specific image identifier.",
            "example": "F+e348pidvTXPKflaQebBzO3zN4bq9EIoM6R94Rjky0=",
            "type": "string"
          }
        },
        "required": [
          "uptaneImageId",
          "fullImageId"
        ],
        "type": "object"
      },
      "Deployment": {
        "description": "Represents the deployment of a single package or selective log config to a single device",
        "properties": {
          "attemptNum": {
            "description": "The number of times the deployment has been retried.",
            "example": 1,
            "type": "integer"
          },
          "bypassUserConsent": {
            "description": "False if user consent is bypassed for a deployment, true otherwise",
            "example": true,
            "type": "boolean"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "4a34ac45-e47c-4134-be78-176b3f8a1a41",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "configurationID": {
            "deprecated": true,
            "description": "A unique identifier for the configuration.",
            "example": "142eaef4-ed81-468c-a3ad-326219aaa24a",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the deployment's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deploymentID": {
            "description": "A unique identifier for the deployment. An ID will be generated every time a deployment is created.",
            "example": "526aeb3a-f95e-4275-8c4c-fcf23599112f",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deploymentMetadata": {
            "$ref": "#/components/schemas/DeploymentMetadata"
          },
          "deploymentStatus": {
            "$ref": "#/components/schemas/DeploymentStatusEnum"
          },
          "deploymentSubstatus": {
            "$ref": "#/components/schemas/DeploymentSubstatusEnum"
          },
          "deploymentType": {
            "$ref": "#/components/schemas/DeploymentType"
          },
          "desiredState": {
            "$ref": "#/components/schemas/DeploymentDesiredState"
          },
          "deviceID": {
            "description": "A unique identifier for the device. This is the device the deployment is targeting.",
            "example": "66c56115-2570-4f47-895a-625ef042b531",
            "format": "uuid",
            "type": "string"
          },
          "downloadMediaAllowed": {
            "description": "A list of allowed connection media.",
            "example": "[WIFI, CELLULAR]",
            "items": {
              "$ref": "#/components/schemas/ConnectionMediumType"
            },
            "type": "array"
          },
          "endTime": {
            "description": "The end time of the deployment. An RFC3339 timestamp.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "type": "string"
          },
          "noOp": {
            "description": "Marks the deployment as NoOp. A NoOp deployment is a deployment that is guaranteed not to trigger download or installation of any images",
            "example": false,
            "type": "boolean"
          },
          "packageID": {
            "description": "A unique identifier for the package being installed on the device. A deployment can have either a packageID or a selectiveLogConfigID.",
            "example": "9bd28cf1-4314-40e8-8489-52af420c6534",
            "format": "uuid",
            "type": "string"
          },
          "parameterUpdatesEnabled": {
            "description": "Toggle whether parameter updates should be enabled or disabled in this deployment",
            "example": true,
            "type": "boolean"
          },
          "previousDeploymentID": {
            "description": "ID of the previous deployment.",
            "example": "e27504c2-2ffb-4f62-b6a9-31da80b34529",
            "format": "uuid",
            "type": "string"
          },
          "previousPackageID": {
            "description": "ID of the previous package. The device will automatically revert to the package with this ID if a deployment fails.",
            "example": "9827dc6e-6468-4168-8bb3-b8ec82593fb9",
            "format": "uuid",
            "type": "string"
          },
          "provisioning": {
            "description": "A boolean value indicating whether the deployment is a Deep Updater provisioning deployment.",
            "example": false,
            "type": "boolean"
          },
          "queuedAt": {
            "description": "The time that the deployment was queued.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "rolloutID": {
            "description": "A unique identifier for the rollout. Designates the rollout the deployment is under.",
            "example": "ca7f5e2f-b84e-458f-bb95-939f75d3a973",
            "format": "uuid",
            "type": "string"
          },
          "selectiveLogConfigID": {
            "description": "A unique identifier for the log configuration being installed on the device. A deployment can have either a packageID or a selectiveLogConfigID.",
            "example": "2df02452-ef0f-412c-89ed-baad58655fcd",
            "format": "uuid",
            "type": "string"
          },
          "stageID": {
            "description": "A unique identifier for the stage. Denotes the stage the deployment is associated with (if any).",
            "example": "b011bb2b-71fe-41e2-9d62-384b6c5bd2fe",
            "format": "uuid",
            "type": "string"
          },
          "startTime": {
            "description": "The start time of the deployment. An RFC3339 timestamp.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "statusChangeReason": {
            "description": "Field for the user to document changes in the deployment.",
            "example": "Image installation completed",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the deployment's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deviceID",
          "deploymentType"
        ],
        "type": "object"
      },
      "DeploymentAlert": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/DeploymentAlertCode"
          },
          "createdAt": {
            "description": "The date and time when the alert was created, in RFC 3339 format",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "deploymentID": {
            "description": "The unique ID of the deployment the alert is associated with",
            "example": "c2f7e53a-2176-4fbb-8973-9041503d5564",
            "format": "uuid",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message with details of the alert",
            "example": "ECU 'A' had serial number '1' in previous version report, but has serial number '2' in new version report",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/DeploymentAlertSeverity"
          }
        },
        "type": "object"
      },
      "DeploymentAlertCode": {
        "enum": [
          "INVALID",
          "SERIAL_NUMBER_MISMATCH",
          "EXPECTED_ECU_NOT_FOUND",
          "UNEXPECTED_ECU_FOUND",
          "PRIMARY_ECU_CHANGED",
          "MANIFEST_SIGNATURE_INVALID",
          "VERSION_REPORT_SIGNATURE_INVALID",
          "REPLAYED_VERSION_REPORT",
          "IMAGE_VERSION_MISMATCH"
        ],
        "type": "string"
      },
      "DeploymentAlertSeverity": {
        "enum": [
          "INVALID",
          "ERROR",
          "WARNING",
          "INFO"
        ],
        "type": "string"
      },
      "DeploymentDesiredState": {
        "description": "The desired state of the deployment.\n| Enum Value | Description |\n| --- | --- |\n| UPDATE_COMPLETED | The cloud requested the device to complete the update. |\n| UPDATE_ABORTED | The cloud requested the device to abort the update. |\n| UPDATE_PAUSED | The cloud requested the device to pause the update. |\n| INVALID | The cloud's request for the device is invalid. |\n",
        "enum": [
          "UPDATE_COMPLETED",
          "UPDATE_ABORTED",
          "UPDATE_PAUSED",
          "INVALID"
        ],
        "type": "string"
      },
      "DeploymentDesiredStateRequest": {
        "properties": {
          "desiredState": {
            "$ref": "#/components/schemas/DeploymentDesiredState"
          }
        },
        "type": "object"
      },
      "DeploymentLog": {
        "properties": {
          "batchCounter": {
            "description": "A counter for the batch in which this deployment log arrived.",
            "example": 0,
            "type": "integer"
          },
          "batchIndex": {
            "description": "The index of this deployment log, in the batch in which it arrived.",
            "example": 0,
            "type": "integer"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "06de9717-41f1-4467-abc7-88e0cbdf604c",
            "format": "uuid",
            "type": "string"
          },
          "componentType": {
            "$ref": "#/components/schemas/ComponentType"
          },
          "createdAt": {
            "description": "A timestamp of the deployment log's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "deploymentID": {
            "description": "A unique identifier for the deployment the deployment logs are associated with.",
            "example": "afc02a7c-7d76-4628-85a6-b7e5d9200c2a",
            "format": "uuid",
            "type": "string"
          },
          "deploymentLogID": {
            "description": "A unique identifier for the deployment log.",
            "example": "f7d454c4-e8a9-417e-b4b4-1ca24a199eaa",
            "format": "uuid",
            "type": "string"
          },
          "logLevel": {
            "$ref": "#/components/schemas/DeploymentLogLevel"
          },
          "logTimestamp": {
            "description": "The timestamp of when the log was generated on the device.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "text": {
            "description": "The message of the deployment log.",
            "example": "INFO, PACKAGE_MANAGER_STATE__UPDATE_SUCCEEDED, Package Manager state transition to PACKAGE_MANAGER_STATE__WAITING_FOR_PACKAGE due to EVENT_UPDATE_MANAGER_STATE_IDLE",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentLogLevel": {
        "enum": [
          "INVALID",
          "ERROR",
          "WARN",
          "INFO",
          "DEBUG",
          "FATAL"
        ],
        "type": "string"
      },
      "DeploymentMetadata": {
        "properties": {
          "selectiveLogConfig": {
            "$ref": "#/components/schemas/SelectiveLogConfigDeploymentMetadata"
          }
        },
        "type": "object"
      },
      "DeploymentStatisticsResponse": {
        "properties": {
          "resource": {
            "description": "DEPLOYMENT",
            "enum": [
              "DEPLOYMENT"
            ],
            "type": "string"
          },
          "statuses": {
            "$ref": "#/components/schemas/DeploymentStatisticsResponseStatuses",
            "description": "A map of deployment status counts."
          }
        },
        "type": "object"
      },
      "DeploymentStatisticsResponseStatuses": {
        "example": {
          "ATTEMPTING_ABORT": 1,
          "INVALID": 1,
          "PACKAGE_DOWNLOADING": 100,
          "PARTIALLY_ACCEPTED": 5,
          "READY": 20,
          "REQUEST_PENDING": 100,
          "REQUEST_RECEIVED": 20,
          "RESERVED": 1000,
          "SKIPPED": 5,
          "UPDATE_ABORTED": 5,
          "UPDATE_COMPLETED": 1500,
          "UPDATE_FAILED": 1,
          "UPDATE_IN_PROGRESS": 75,
          "UPDATE_PAUSED": 1,
          "UPDATE_REJECTED": 2,
          "UPDATE_STAGING": 10,
          "UPDATE_WAITING_FOR_PRECONDITIONS": 25
        },
        "properties": {
          "ATTEMPTING_ABORT": {
            "description": "The number of deployments that the device acknowledged the cloud's abort request and is assessing the feasibility of the termination.",
            "type": "number"
          },
          "INVALID": {
            "description": "The number of deployments that are invalid.",
            "type": "number"
          },
          "PACKAGE_DOWNLOADING": {
            "description": "The number of deployments that devices are in the process of downloading software images and related resources from the package on the cloud.",
            "type": "number"
          },
          "PARTIALLY_ACCEPTED": {
            "description": "The number of deployments that devices have partially accepted due to compatibility issues so the device is limited on its logging capabilities.",
            "type": "number"
          },
          "READY": {
            "description": "The number of deployments that are positioned in the device's activation queue, awaiting activation upon completion of a current deployment on the device.",
            "type": "number"
          },
          "REQUEST_PENDING": {
            "description": "The number of deployments that the cloud requested the device to perform and is awaiting acknowledgement from the device.",
            "type": "number"
          },
          "REQUEST_RECEIVED": {
            "description": "The number of deployments that the cloud received an acknowledgement from the device.",
            "type": "number"
          },
          "RESERVED": {
            "description": "The number of deployments that reside in the device's activation queue, yet it is not a candidate for activation. Its transition to the READY state is contingent upon certain conditions, such as the successful execution of other deployments in multi-stage rollouts.",
            "type": "number"
          },
          "SKIPPED": {
            "description": "The number of deployments that skipped the deployment as there was a more recent, successful completed deployment.",
            "type": "number"
          },
          "UPDATE_ABORTED": {
            "description": "The number of deployments that have been successfully terminated, particularly for software deployments.",
            "type": "number"
          },
          "UPDATE_COMPLETED": {
            "description": "The number of deployments that devices have successfully completed.",
            "type": "number"
          },
          "UPDATE_FAILED": {
            "description": "The number of deployments that devices have failed to complete.",
            "type": "number"
          },
          "UPDATE_IN_PROGRESS": {
            "description": "The number of deployments that are in progress as the device is installing the new software onto its components through flashing sequences.",
            "type": "number"
          },
          "UPDATE_PAUSED": {
            "description": "The number of deployments that succesfully aborted the deployment as requested.",
            "type": "number"
          },
          "UPDATE_REJECTED": {
            "description": "The number of deployments that devices have rejected due to configuration incompatibility.",
            "type": "number"
          },
          "UPDATE_STAGING": {
            "description": "The number of deployments that are in either image staging for a seamless update or preparatory stages in the Update Agent/Update Dispatcher for ECU image updates.",
            "type": "number"
          },
          "UPDATE_WAITING_FOR_PRECONDITIONS": {
            "description": "The number of deployments that devices have downloaded the required software images and is awaiting fulfillment of preconditions before installation.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DeploymentStatusEnum": {
        "description": "The status of a deployment.\n\nFor SELECTIVE_LOG_CONFIG deployment,\n| Enum Value        | Description |\n|-------------------|-------------|\n| REQUEST_PENDING   | The cloud requested the device to perform the deployment and is awaiting acknowledgement from the device. |\n| UPDATE_COMPLETED  | The device successfully completed the deployment. |\n| UPDATE_REJECTED   | The device rejected the deployment due to configuration incompatibility. |\n| SKIPPED           | The device skipped the deployment as there was a more recent, successful completed deployment. This deployment will no longer be activated. |\n| PARTIALLY_ACCEPTED| The device partially accepted the deployment due to compatibility issues so the device is limited on its logging capabilities. |\n\nFor SOFTWARE_UPDATE deployment,\n| Enum Value            | Description                                                       |\n|-----------------------|-------------------------------------------------------------------|\n| RESERVED              | The deployment resides in the device's activation queue, yet it is not a candidate for activation. Its transition to the READY state is contingent upon certain conditions, such as the successful execution of other deployments in multi-stage rollouts.|\n| READY                 | The deployment is positioned in the device's activation queue, awaiting activation upon completion of a current deployment on the device.|\n| UPDATE_STAGING        | This deployment state signifies either image staging for a seamless update or preparatory stages in the Update Agent/Update Dispatcher for ECU image updates.|\n| REQUEST_PENDING       | The cloud requested the device to perform the deployment and is awaiting acknowledgement from the device. |\n| REQUEST_RECEIVED      | The cloud received an acknowledgement from the device for this deployment. Deployment processing, including version collection and manifest preparation, is now initiated. |\n| PACKAGE_DOWNLOADING   | The device is in the process of downloading software images and related resources from the package on the cloud. |\n| UPDATE_WAITING_FOR_PRECONDITIONS | The device has downloaded the required software images and is awaiting fulfillment of preconditions before installation on the device. |\n| UPDATE_IN_PROGRESS    | The deployment is in progress as the device is installing the new software onto its components through flashing sequences.|\n| UPDATE_COMPLETED      | The device successfully completed the deployment. |\n| UPDATE_FAILED         | The device failed to complete the deployment. |\n| ATTEMPTING_ABORT      | The device acknowledged the cloud's abort request and is assessing the feasibility of deployment termination. If it is feasible, it will transition to UPDATE_ABORTED. If not, the deployment will continue until a terminal state is reached. |\n| UPDATE_ABORTED        | Successful termination of a deployment, particularly for software deployments. |\n| UPDATE_PAUSED         | The device successfully aborted the deployment as requested.|\n| SKIPPED               | The device skipped the deployment as there was a more recent, successful completed deployment. This deployment will no longer be activated. |\n",
        "enum": [
          "REQUEST_PENDING",
          "UPDATE_COMPLETED",
          "UPDATE_REJECTED",
          "SKIPPED",
          "PARTIALLY_ACCEPTED",
          "RESERVED",
          "READY",
          "UPDATE_STAGING",
          "REQUEST_RECEIVED",
          "PACKAGE_DOWNLOADING",
          "UPDATE_WAITING_FOR_PRECONDITIONS",
          "UPDATE_IN_PROGRESS",
          "UPDATE_FAILED",
          "ATTEMPTING_ABORT",
          "UPDATE_ABORTED",
          "UPDATE_PAUSED"
        ],
        "type": "string"
      },
      "DeploymentStatusRequest": {
        "example": {
          "deploymentStatus": "UPDATE_ABORTED",
          "statusChangeReason": "rollback"
        },
        "properties": {
          "deploymentStatus": {
            "$ref": "#/components/schemas/DeploymentStatusEnum"
          },
          "statusChangeReason": {
            "description": "Field for the user to document changes in the deployment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentSubstatusEnum": {
        "description": "The substatus of a deployment\n\n| Enum value                        | Description                                                                                                                                 |\n|-----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|\n| NONE                              | No substatus has been assigned to this deployment.                                                                                           |\n| PROVISIONING_NOT_ALLOWED            | Deep Updater attempted provisioning when the cloud was not expecting it.                                                                     |\n| PROVISIONING_REQUIRED              | The cloud expected Deep Updater to perform provisioning, but it attempted to perform a regular deployment instead.                         |\n| SERIAL_NUMBER_MISMATCH              | One or more ECUs have different serial numbers than when Deep Updater provisioning was last completed.                                      |\n| EXPECTED_ECU_NOT_FOUND               | An ECU that was reported during Deep Updater provisioning is missing in the latest manifest reported by Deep Updater.                      |\n| UNEXPECTED_ECU_FOUND                | An ECU that was not reported during Deep Updater provisioning was found in the last manifest reported by Deep Updater.                     |\n| PRIMARY_ECU_CHANGED                 | The primary ECU specified during Deep Updater provisioning was changed in the latest manifest reported by Deep Updater.                    |\n| MANIFEST_SIGNATURE_INVALID          | The signature of the last manifest reported by Deep Updater is not valid according to the primary ECU's public key reported during Deep Updater provisioning. |\n| VERSION_REPORT_SIGNATURE_INVALID     | The signature of one or more version reports are not valid according to the corresponding public key uploaded during Deep Updater provisioning. |\n| REPLAYED_VERSION_REPORT             | The last manifest uploaded by Deep Updater has one or more version reports whose version numbers are less than or equal to the previous report. |\n| FAILED_TO_FETCH_ECU_PARAMETERS_FROM_WEBHOOK | An error occurred when attempting to call the customer's ECU parameters webhook.                                                              |\n| DUPLICATE_ECUID_IN_PARAMETERS_WEBHOOK_RESPONSE       | ECU parameters were successfully received from the webhook, but a certain ECU model was defined twice, which is an error.                   |\n| ECUID_NOT_FOUND_IN_DEVICE_MODEL | ECU parameters were successfully received from the webhook, but they included parameters for an ECU ID that does not exist within the vehicle model for that device. |\n| FAILED_TO_CONSTRUCT_ECU_PARAMETERS    | This substatus encompasses any errors that occurred, including internal ones, during the construction of ECU parameters.                    |\n| INVALID                               | The substatus assigned to this deployment is not supported.                    |\n",
        "enum": [
          "NONE",
          "PROVISIONING_NOT_ALLOWED",
          "PROVISIONING_REQUIRED",
          "SERIAL_NUMBER_MISMATCH",
          "EXPECTED_ECU_NOT_FOUND",
          "UNEXPECTED_ECU_FOUND",
          "PRIMARY_ECU_CHANGED",
          "MANIFEST_SIGNATURE_INVALID",
          "VERSION_REPORT_SIGNATURE_INVALID",
          "REPLAYED_VERSION_REPORT",
          "FAILED_TO_FETCH_ECU_PARAMETERS_FROM_WEBHOOK",
          "DUPLICATE_ECUID_IN_PARAMETERS_WEBHOOK_RESPONSE",
          "ECUID_NOT_FOUND_IN_DEVICE_MODEL",
          "FAILED_TO_CONSTRUCT_ECU_PARAMETERS",
          "DECODER_ID_MISMATCH",
          "CONFIG_TOO_LARGE",
          "PAYLOAD_PARSING_ERROR",
          "MISSING_FIELDS",
          "INCOMPATIBLE_SIGNALS",
          "DEVICE_CONNECTIVITY_DISABLED",
          "PROVISIONING_FAILURE",
          "SYSTEM_INITIALIZATION_FAILURE",
          "UPDATE_VERIFICATION_FAILURE",
          "VERSION_UPLOAD_FAILURE",
          "TIME_SYNC_FAILURE",
          "INSUFFICIENT_MEMORY",
          "INVALID_DATA",
          "INTERNAL_COMMUNICATION_FAILURE",
          "FORCED_SYSTEM_RESET",
          "SYSTEM_INTERCOMMUNICATION_FAILURE",
          "INVALID_LOG_CONFIG",
          "INCOMPATIBLE_LOG_CONFIG_DATA_MAP_ID",
          "INTERNAL_ERROR",
          "PARTIALLY_ACCEPTED",
          "INVALID"
        ],
        "type": "string"
      },
      "DeploymentType": {
        "description": "The type of the deployment. Deployments are either for software updates or log configurations.\n| Enum Value | Description |\n| --- | --- |\n| SOFTWARE_UPDATE | The deployment is a software update, which is handled by the Deep Updater. |\n| SELECTIVE_LOG_CONFIG | The deployment is a selective log configuration, which is handled by the Deep Logger. |\n| INVALID | The deployment type is invalid. |\n",
        "enum": [
          "SOFTWARE_UPDATE",
          "SELECTIVE_LOG_CONFIG",
          "INVALID"
        ],
        "type": "string"
      },
      "DeploymentsInProgressDetails": {
        "description": "The detailed counts of certain in-progress device statuses.",
        "properties": {
          "devicesAttemptingAbort": {
            "description": "The number of devices attempting abort.",
            "example": 1,
            "type": "integer"
          },
          "devicesInProgressOther": {
            "description": "The number of devices in progress that do not fit in the other categories.",
            "example": 1,
            "type": "integer"
          },
          "devicesPackageDownloading": {
            "description": "The number of devices that are currently downloading the package.",
            "example": 1,
            "type": "integer"
          },
          "devicesRequestReceived": {
            "description": "The number of devices that have received the deployment request.",
            "example": 1,
            "type": "integer"
          },
          "devicesUpdateInProgress": {
            "description": "The number of devices whose update is currently in progress.",
            "example": 1,
            "type": "integer"
          },
          "devicesUpdateStaging": {
            "description": "The number of devices staging the update.",
            "example": 1,
            "type": "integer"
          },
          "devicesWaitingForPrecondition": {
            "description": "The number of devices waiting for precondition.",
            "example": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DesiredRolloutState": {
        "description": "The desired state of the rollout.\n| Enum Value | Description |\n| --- | --- |\n| NOT_STARTED | The rollout has been created but not yet started. |\n| COMPLETED | The rollout has begun, with deployments created for each device. Depending on the rollout configuration, deployments may initiate either concurrently across all devices or through a multi-stage process. |\n| ABORTED | The rollout has been intentionally aborted before completion. The cloud will request to abort all ongoing deployments part of the rollout and will not initiate any new deployments. |\n| PAUSED | The rollout has been paused so new deployments will not be started until requested. Any ongoing deployment will still continue until terminated on its own. |\n| INVALID | The rollout desired state could not be processed. |\n",
        "enum": [
          "NOT_STARTED",
          "COMPLETED",
          "ABORTED",
          "PAUSED",
          "INVALID"
        ],
        "type": "string"
      },
      "DesiredRolloutStateRequest": {
        "properties": {
          "desiredState": {
            "$ref": "#/components/schemas/DesiredRolloutState"
          }
        },
        "required": [
          "desiredState"
        ],
        "type": "object"
      },
      "DesiredStageState": {
        "description": "The desired state of the stage.\n| Enum Value | Description |\n| --- | --- |\n| NOT_STARTED | The stage has been created but not yet started. |\n| COMPLETED | The deployments in this stage have been initiated. All deployments encompassed within this stage are slated for completion. Deployment commencement may occur either concurrently or in a phased manner utilizing a moving window strategy. |\n| ABORTED | The stage has been intentionally aborted before completion. The cloud will request to abort all ongoing deployments part of the stage and will not initiate any new deployments. |\n| PAUSED | The stage has been paused so any ongoing deployments will continue, but no new deployments will be initiated. |\n| INVALID | The desired stage state is invalid. |\n",
        "enum": [
          "NOT_STARTED",
          "COMPLETED",
          "ABORTED",
          "PAUSED",
          "INVALID"
        ],
        "type": "string"
      },
      "DesiredStageStateRequest": {
        "properties": {
          "desiredState": {
            "$ref": "#/components/schemas/DesiredStageState"
          }
        },
        "required": [
          "desiredState"
        ],
        "type": "object"
      },
      "Device": {
        "properties": {
          "allowReprovisioning": {
            "description": "A boolean value indicating whether this device can be reprovisioned.",
            "example": false,
            "type": "boolean"
          },
          "attributes": {
            "description": "The key is the attribute descriptor; the value is the attribute value. Examples - (year,2022) or (color,Red).",
            "example": {
              "color": "Blue",
              "trim": "Premium"
            },
            "type": "object"
          },
          "clientID": {
            "description": "The external client ID (uuidV4/uuidV5) for the device",
            "example": "86365dbb-0896-4e65-b73c-06a10e4f3f3e",
            "format": "uuid",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "8fbb6c25-5c00-48de-b445-a8c49b1df1f3",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "components": {
            "description": "A list of device components.",
            "items": {
              "$ref": "#/components/schemas/DeviceComponent"
            },
            "type": "array"
          },
          "connectivitySettings": {
            "$ref": "#/components/schemas/DeviceConnectivitySettings"
          },
          "createdAt": {
            "description": "A timestamp of the device's creation.",
            "example": "2022-02-24T00:23:10Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currentPackageId": {
            "description": "The ID of the current package. It refers to the package resource.",
            "example": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
            "format": "uuid",
            "type": "string"
          },
          "currentSelectiveLogConfigId": {
            "description": "The ID of the current log configuration. It refers to the selectiveLogConfig resource.",
            "example": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
            "format": "uuid",
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the decoder mapping.",
            "example": "56b49aca-bc50-43f1-800b-bececba69a59",
            "format": "uuid",
            "type": "string"
          },
          "decoderName": {
            "description": "The name of the associated decoder mapping.",
            "example": "example-decoder-mapping-name",
            "type": "string"
          },
          "deviceID": {
            "description": "A unique identifier for the device. An ID will be generated every time a device is created.",
            "example": "0a5c607d-7fd4-48f9-9193-e64bbabdfa06",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deviceModelID": {
            "description": "A unique identifier for the device model.",
            "example": "48b49aca-bc50-43f1-800b-bececba69a59",
            "format": "uuid",
            "type": "string"
          },
          "deviceName": {
            "description": "The name of the device. Devices are created and named in the Web Portal.",
            "example": "Sibros Vehicle",
            "maxLength": 256,
            "type": "string"
          },
          "deviceSerialNumber": {
            "description": "The VIN, as allocated by the OEM for this device.",
            "example": "SCA664S55CUX50961",
            "maxLength": 128,
            "type": "string"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "internalDecoderMappingID": {
            "description": "A unique identifier for the internal decoder mapping.",
            "example": "56b49aca-bc50-43f1-800b-bececba69a59",
            "format": "uuid",
            "type": "string"
          },
          "isSimulated": {
            "description": "Indicates whether the device is simulated or not.",
            "example": false,
            "type": "boolean"
          },
          "liveLogConfig": {
            "description": "The live log configuration of the device.",
            "example": "config1",
            "type": "string"
          },
          "loggingState": {
            "$ref": "#/components/schemas/LoggingState"
          },
          "provisionedAt": {
            "description": "A timestamp of the device provisioning.",
            "example": "2022-02-24T00:23:10Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "tags": {
            "description": "User defined strings associated with a device. These function like a label. They are often used to differentiate devices that share the same attributes.",
            "example": "[experimental,group1,anyString]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "A timestamp of the device's latest update.",
            "example": "2022-02-24T00:23:10Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deviceModelID",
          "deviceType",
          "deviceSerialNumber"
        ],
        "type": "object"
      },
      "DeviceAttributesRequestBody": {
        "properties": {
          "attributes": {
            "description": "A map of device attributes.",
            "example": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
            "type": "object"
          }
        },
        "type": "object"
      },
      "DeviceComponent": {
        "properties": {
          "attributes": {
            "description": "Metadata about the device component.",
            "example": {
              "partno": "DH191105",
              "revision": "02"
            },
            "type": "object"
          },
          "componentName": {
            "description": "The name of the component.",
            "example": "SIBROS_ECU",
            "type": "string"
          },
          "componentSerialNumber": {
            "description": "The serial number of the component.",
            "example": "TCU_SN_1234",
            "type": "string"
          },
          "componentType": {
            "$ref": "#/components/schemas/DeviceComponentType"
          },
          "deviceComponentID": {
            "description": "A unique identifier for the device component.",
            "example": "c7d99136-dc9e-4c8f-9e64-3dedc6fa739d",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "componentType"
        ],
        "type": "object"
      },
      "DeviceComponentHistory": {
        "properties": {
          "attributes": {
            "description": "Metadata about the device component.",
            "example": {
              "partno": "DH191105",
              "revision": "02"
            },
            "type": "object"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "4c6be21c-d446-4135-bce5-8c13c0689dcb",
            "readOnly": true,
            "type": "string"
          },
          "componentName": {
            "description": "The name of the component.",
            "example": "SIBROS_ECU",
            "type": "string"
          },
          "componentSerialNumber": {
            "description": "The serial number of the component.",
            "example": "TCU_SN_1234",
            "type": "string"
          },
          "componentType": {
            "$ref": "#/components/schemas/DeviceComponentType"
          },
          "createdAt": {
            "description": "A timestamp of the device component history's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "dateOfChange": {
            "description": "The timestamp of when the device component was replaced.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "deviceComponentHistoryID": {
            "description": "A unique identifier for the device component history.",
            "example": "76a7863d-9f71-4909-94bb-029f9fe81b95",
            "readOnly": true,
            "type": "string"
          },
          "deviceComponentID": {
            "description": "A unique identifier for the device component.",
            "example": "c7d99136-dc9e-4c8f-9e64-3dedc6fa739d",
            "readOnly": true,
            "type": "string"
          },
          "deviceID": {
            "description": "A unique identifier for the device.",
            "example": "44dba5e8-8859-45e4-985d-1939c4b90a69",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the device component history's latest update.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "componentType"
        ],
        "type": "object"
      },
      "DeviceComponentType": {
        "description": "The type of the component. Currently, four types are available. More types may be defined in the future.\n| Enum Value | Description |\n| --- | --- |\n| ECU | The component is an electronic control unit. |\n| TCU | The component is a telematic control unit. |\n| Battery | The component is a battery. |\n| Motor | The component is a motor. |\n",
        "enum": [
          "ECU",
          "TCU",
          "Battery",
          "Motor"
        ],
        "type": "string"
      },
      "DeviceComponentTypeEnum": {
        "description": "The type of the component. Currently, four types are available. More types may be defined in the future.",
        "enum": [
          "ECU",
          "TCU",
          "Battery",
          "Motor"
        ],
        "type": "string"
      },
      "DeviceConfiguration": {
        "example": {
          "companyID": "7d003be4-f28a-4367-b6f9-946432001800",
          "configurationID": "dea2661c-7304-4db6-be0d-373e3a61f53e",
          "configurationStatus": "ACTIVE",
          "createdAt": "2020-02-02T20:20:20.202Z",
          "deviceID": "57865465-5832-430d-9e4c-ca0874105e0e",
          "downloadURL": "example-download.url",
          "file": {
            "createdAt": "2020-02-02T20:20:20.202Z",
            "downloadURL": "example-download.url",
            "fileHash": "ab1ff24cf4321a314808f4f393d00209",
            "fileName": "file2.tar",
            "fileSizeBytes": 67,
            "fileStatus": "NOT_UPLOADED",
            "path": "/some/path",
            "uploadURL": "example-upload.url"
          },
          "fileID": "3bafad2f-fb8f-437e-9098-433665cfcf2d",
          "updatedAt": "2020-02-02T20:20:20.202Z",
          "uploadURL": "example-upload.url"
        },
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "configurationID": {
            "description": "A unique identifier for the device configuration.",
            "type": "string"
          },
          "configurationStatus": {
            "description": "The status of the device configuration.",
            "enum": [
              "ACTIVE",
              "NOT_ACTIVE",
              "NEXT",
              "INVALID"
            ],
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the device configuration's creation.",
            "readOnly": true,
            "type": "string"
          },
          "deviceID": {
            "description": "A unique identifier for the device.",
            "format": "uuid",
            "type": "string"
          },
          "downloadURL": {
            "deprecated": true,
            "description": "The download/upload URL.",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The file associated with the device configuration."
          },
          "fileID": {
            "description": "A unique identifier for the device configuration file.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the device configuration's latest update.",
            "readOnly": true,
            "type": "string"
          },
          "uploadURL": {
            "deprecated": true,
            "description": "The download/upload URL.",
            "type": "string"
          }
        },
        "required": [
          "deviceID",
          "file"
        ],
        "type": "object"
      },
      "DeviceConnectionStatus": {
        "properties": {
          "connected": {
            "description": "A boolean value indicating whether the device is online.",
            "example": true,
            "readOnly": true,
            "type": "boolean"
          },
          "timestamp": {
            "description": "A timestamp that can mean two different things, depending on \"connected\". If \"connected\" is true, this field represents the timestamp at which the device came online. If \"connected\" is false, this field represents the timestamp at which the device was last connected. This field may be null if a long time has elapsed since the device was last connected.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceConnectivitySettings": {
        "properties": {
          "connectivityDisabled": {
            "description": "Whether OTA connectivity is disabled for the device",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeviceFilter": {
        "example": {
          "attributes": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"vehicleModel1, vehicleModel2\"]}, \"serialNumbers\":[\"serialNumber1\", \"serialNumber2\"]}",
          "deviceIDs": "[9ce3f1cc-af5d-4dfb-9170-01b09367145c, f4fc834b-6a75-4cea-be62-6b4069062adc]",
          "serialNumbers": "[SCA664S55CUX50961]"
        },
        "properties": {
          "attributes": {
            "description": "Device attributes to filter on.",
            "type": "object"
          },
          "deviceIDs": {
            "description": "DeviceIDs to filter on.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serialNumbers": {
            "description": "Device serial numbers to filter on.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceGroup": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "fac2ee0c-3a1d-4529-bb0b-e65c07370ccc",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the device group's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          },
          "deviceGroupID": {
            "description": "A unique identifier for the device group.",
            "example": "48f6c77b-d64b-4177-afc5-716dd6794caf",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deviceGroupName": {
            "description": "The name of the device group.",
            "example": "Sibros Vehicle Group",
            "type": "string"
          },
          "deviceModelID": {
            "description": "A unique identifier for the device model associated with the device group.",
            "example": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
            "format": "uuid",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/DeviceGroupDeviceFilter"
          },
          "updatedAt": {
            "description": "A timestamp of the device group's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deviceGroupName",
          "deviceModelID"
        ],
        "type": "object"
      },
      "DeviceGroupDeviceFilter": {
        "description": "The device group filters used to describe a device group.",
        "properties": {
          "attributes": {
            "description": "Device attributes to filter on.",
            "example": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"vehicleModel1, vehicleModel2\"]}, \"serialNumbers\":[\"serialNumber1\", \"serialNumber2\"]}",
            "type": "object"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAtFilter"
          },
          "deviceIDs": {
            "description": "DeviceIDs to filter on.",
            "example": "[9ce3f1cc-af5d-4dfb-9170-01b09367145c, f4fc834b-6a75-4cea-be62-6b4069062adc]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "serialNumbers": {
            "description": "Device serial numbers to filter on.",
            "example": "[SCA664S55CUX50961]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceGroupValidation": {
        "properties": {
          "deviceIDs": {
            "description": "List of device IDs as a part of device group.",
            "example": "[dd3ca3c0-2ca0-4c91-86b7-aed6f0545c55, ed3ca3c0-2ca0-4c91-86b7-aed6f0545c55]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "message": {
            "description": "Validation message body.",
            "example": "serial numbers outside device model",
            "type": "string"
          },
          "serialNumbers": {
            "description": "List of device serial numbers as a part of device group.",
            "example": "[VIN1, VIN2]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceGroupsPage": {
        "example": {
          "count": 5,
          "results": [
            {
              "companyID": "fac2ee0c-3a1d-4529-bb0b-e65c07370ccc",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deviceGroupID": "48f6c77b-d64b-4177-afc5-716dd6794caf",
              "deviceGroupName": "Sibros Vehicle Group",
              "deviceModelID": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
              "filter": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"carModel1, carModel2\"]}, \"serialNumbers\":[\"serialNumber1\", \"serialNumber2\"]}",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "fac2ee0c-3a1d-4529-bb0b-e65c07370ccc",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deviceGroupID": "56f6c77b-d64b-4177-afc5-716dd6794caf",
              "deviceGroupName": "Test Vehicle Group",
              "deviceModelID": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
              "filter": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"carModel1, carModel2\"]}, \"serialNumbers\":[\"serialNumber321\", \"serialNumber123\"]}",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching device groups, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of device groups.",
            "items": {
              "$ref": "#/components/schemas/DeviceGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceLog": {
        "properties": {
          "comment": {
            "description": "Comments associated with the device log.",
            "example": "some comments",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "f219d072-0e03-4224-977d-ad2e24fe58fc",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deviceID": {
            "description": "A unique identifier for the device.",
            "example": "9748e046-6bbb-499e-8724-cb9f190bc13b",
            "format": "uuid",
            "type": "string"
          },
          "deviceLogID": {
            "description": "A unique identifier for the device log.",
            "example": "563bdf20-2127-450c-a538-d70561e97b81",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deviceLogStatus": {
            "$ref": "#/components/schemas/DeviceLogStatus"
          },
          "endTime": {
            "description": "A timestamp of when the device ended logging.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "ingestionStatus": {
            "$ref": "#/components/schemas/DeviceLogIngestionStatus"
          },
          "isSibrosGenerated": {
            "description": "A boolean indicating whether the device log was generated by Sibros. If true, the device log must be exported using the converted-files endpoint in order to extract its content.",
            "example": true,
            "type": "boolean"
          },
          "logRuleID": {
            "description": "The log rule ID that generated the particular device log.",
            "example": "7f25616a-9a6d-47ab-a66d-e597c84e77b3",
            "format": "uuid",
            "type": "string"
          },
          "releaseNotes": {
            "description": "Release notes associated with the device log.",
            "example": "1.0.0",
            "type": "string"
          },
          "startTime": {
            "description": "A timestamp of when the device started logging.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "DeviceLogIngestionStatus": {
        "description": "The ingestion status of the device log.\n",
        "enum": [
          "INGESTION_SUCCESSFUL",
          "INGESTION_FAILED"
        ],
        "type": "string"
      },
      "DeviceLogStatus": {
        "description": "The status of the device log.\n",
        "enum": [
          "NOT_UPLOADED",
          "UPLOADED",
          "INVALID"
        ],
        "type": "string"
      },
      "DeviceLogStatusAndFile": {
        "properties": {
          "deviceLogStatus": {
            "$ref": "#/components/schemas/DeviceLogStatus"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          }
        },
        "type": "object"
      },
      "DeviceLogsPage": {
        "properties": {
          "count": {
            "description": "The total count of all matching device logs, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of device logs.",
            "items": {
              "$ref": "#/components/schemas/DeviceLog"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceModel": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the device model's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the device model.",
            "example": "de4d39f5-9160-4b44-814b-45e906c70c4e",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "modelCodes": {
            "description": "Model codes associated with the device model.",
            "example": "[model1, model2]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the device model.",
            "example": "Sibros Device Model",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the device model's latest update.",
            "example": "2022-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DeviceModelVariant": {
        "properties": {
          "activeVersion": {
            "$ref": "#/components/schemas/DeviceModelVariantVersion"
          },
          "companyID": {
            "description": "A unique identifier for the company associated with the device model variant.",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The date and time when the device model variant was created.",
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "A description of the device model variant.",
            "example": "A description of Model Variant X",
            "maxLength": 256,
            "type": "string"
          },
          "deviceModelID": {
            "description": "A unique identifier for the device model associated with the variant.",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the device model variant.",
            "example": "f1db63f-aa61-4dd6-acd1-54413chd75d1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "modelCodes": {
            "description": "A list of model codes associated with the device model variant.",
            "example": [
              "model-variant-1",
              "model-variant-2"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "device model variant description",
            "example": "Sibros Device Model Variant",
            "maxLength": 256,
            "type": "string"
          },
          "updatedAt": {
            "description": "The date and time when the device model variant was last updated.",
            "example": "2023-01-02T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deviceModelID"
        ],
        "type": "object"
      },
      "DeviceModelVariantVersion": {
        "properties": {
          "activatedAt": {
            "description": "The timestamp when the device model variant version was activated.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "approvers": {
            "description": "A list of device model variant version approvers.",
            "items": {
              "$ref": "#/components/schemas/DeviceModelVariantVersionApprover"
            },
            "type": "array"
          },
          "companyID": {
            "description": "A unique identifier for the company associated with the device model variant version.",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The timestamp when the device model variant version was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deviceModelVariantID": {
            "description": "A unique identifier for the device model variant associated with the version.",
            "example": "776f8520-c1d7-466b-ac3a-2b56f44b133e",
            "format": "uuid",
            "type": "string"
          },
          "deviceModelVariantVersionHardwareRevisions": {
            "description": "The list of hardware revisions associated with the device model variant version.",
            "items": {
              "$ref": "#/components/schemas/DeviceModelVariantVersionHardwareRevision"
            },
            "type": "array"
          },
          "id": {
            "description": "A unique identifier for the device model variant version.",
            "example": "f1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "notes": {
            "description": "User-defined notes for the device model variant version.",
            "example": "this is a test device model variant version",
            "type": "string"
          },
          "ownerID": {
            "description": "A unique identifier for the owner of the device model variant version.",
            "example": "6b9346d4-aaf6-4f1a-bd16-8454798bd8f2",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DeviceModelVariantVersionStatus"
          },
          "updatedAt": {
            "description": "The timestamp when the device model variant version was updated.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "The user-defined version name",
            "example": "test-version-1",
            "type": "string"
          }
        },
        "required": [
          "deviceModelVariantID",
          "version"
        ],
        "type": "object"
      },
      "DeviceModelVariantVersionApprovalStatus": {
        "description": "The current approval status of the device model variant version associated with the approver.\n",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED",
          "INVALID"
        ],
        "type": "string"
      },
      "DeviceModelVariantVersionApprover": {
        "properties": {
          "approverID": {
            "description": "A unique identifier for the device model variant version approver.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "The timestamp when the device model variant version approver was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DeviceModelVariantVersionApprovalStatus"
          },
          "updatedAt": {
            "description": "The timestamp when the device model variant version approver was updated.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "approverID"
        ],
        "type": "object"
      },
      "DeviceModelVariantVersionHardwareRevision": {
        "properties": {
          "createdAt": {
            "description": "The timestamp when the hardware revision to device model variant version mapping was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deviceModelVariantVersionID": {
            "description": "A unique identifier for device model variant variant.",
            "example": "e1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "type": "string"
          },
          "hardwareRevisionID": {
            "description": "A unique identifier for hardware revision.",
            "example": "d1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for device model variant to hardware revision mapping.",
            "example": "f1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "isRequired": {
            "description": "A boolean flag to indicate if the ecu variant should be installed at the time of provisioning",
            "example": true,
            "type": "boolean"
          },
          "updatedAt": {
            "description": "The timestamp when the hardware revision to device model variant version mapping was updated.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "hardwareRevisionID",
          "isRequired"
        ],
        "type": "object"
      },
      "DeviceModelVariantVersionStatus": {
        "description": "The current status of the device model variant version.\n| Enum Value | Description |\n| --- | --- |\n| DRAFT | The device model variant version is in the draft phase and is not yet ready to be reviewed. |\n| IN_APPROVAL | The device model variant version is currently under review and needs approval before it can be activated. |\n| APPROVED | The device model variant version is approved so it is ready to be activated. |\n| DENIED | The device model variant version is denied by one of the reviewers and needs further updates before going through the review process again. |\n| ACTIVE | The device model variant version is activated. |\n| INACTIVE | The device model variant version was previously activated, and got automatically de-activated since another newer version was activated. |\n| INVALID | The device model variant version is invalid. |\n",
        "enum": [
          "DRAFT",
          "IN_APPROVAL",
          "APPROVED",
          "DENIED",
          "ACTIVE",
          "INACTIVE",
          "INVALID"
        ],
        "type": "string"
      },
      "DeviceModelVariantVersionsPage": {
        "example": {
          "count": 2,
          "deviceModelVariantVersions": [
            {
              "approvers": [
                {
                  "approverID": "ae9b1ca4-8c0b-44fa-998f-4d94d3f3feac",
                  "createdAt": "2023-02-02T20:20:20.202Z",
                  "status": "APPROVED",
                  "updatedAt": "2023-02-02T20:20:20.202Z"
                }
              ],
              "companyID": "d5703d51-33e6-461e-afe4-2394e565c1b4",
              "createdAt": "2023-02-02T20:20:20.202Z",
              "deviceModelVariantID": "776f8520-c1d7-466b-ac3a-2b56f44b133e",
              "hardwareRevisionIDs": "[47f7815b-f942-4b1c-868b-07eb7d20d114]",
              "id": "6b4535c3-6770-453f-a7e9-cfafb6af4627",
              "notes": "this is a test device model variant version",
              "ownerID": "6b9346d4-aaf6-4f1a-bd16-8454798bd8f2",
              "status": "ACTIVE",
              "updatedAt": "2023-02-02T20:20:20.202Z",
              "version": "test-version-2"
            },
            {
              "approvers": [
                {
                  "approverID": "ae9b1ca4-8c0b-44fa-998f-4d94d3f3feac",
                  "createdAt": "2022-02-02T20:20:20.202Z",
                  "status": "PENDING",
                  "updatedAt": "2022-02-02T20:20:20.202Z"
                }
              ],
              "companyID": "d5703d51-33e6-461e-afe4-2394e565c1b4",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "deviceModelVariantID": "776f8520-c1d7-466b-ac3a-2b56f44b133e",
              "hardwareRevisionIDs": "[47f7815b-f942-4b1c-868b-07eb7d20d114]",
              "id": "f1db63f-aa61-4dd6-acd1-5441344d75d1",
              "notes": "this is a test device model variant version",
              "ownerID": "6b9346d4-aaf6-4f1a-bd16-8454798bd8f2",
              "status": "DRAFT",
              "updatedAt": "2022-02-02T20:20:20.202Z",
              "version": "test-version-1"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching device model variant versions, disregarding limit and offset.",
            "type": "number"
          },
          "deviceModelVariantVersions": {
            "description": "A list of device model variant versions.",
            "items": {
              "$ref": "#/components/schemas/DeviceModelVariantVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceModelVariantsPage": {
        "example": {
          "count": 2,
          "deviceModelVariants": [
            {
              "activeVersion": {
                "activatedAt": "2020-05-06T22:30:44Z",
                "approvers": [
                  {
                    "approverID": "ae9b1ca4-8c0b-44fa-998f-4d94d3f3feac",
                    "createdAt": "2023-02-02T20:20:20.202Z",
                    "status": "APPROVED",
                    "updatedAt": "2023-02-02T20:20:20.202Z"
                  }
                ],
                "companyID": "8a05aa12-2026-11e9-afd8-f218988dd673",
                "createdAt": "2020-04-30T16:45:46Z",
                "deviceModelVariantID": "2810a160-e914-4760-b097-2dfeed3b489e",
                "hardwareRevisionIDs": "[\\\"47f7815b-f942-4b1c-868b-07eb7d20d114\\\"]",
                "id": "53fb0e4e-cd6c-4871-bdae-9cd44217f361",
                "notes": "test variant version2",
                "status": "ACTIVE",
                "updatedAt": "2020-05-06T22:30:44",
                "version": "version2"
              },
              "companyID": "b9ed14bb-b2ff-4ba3-a346-5cfa158db96e",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "This is variant 1",
              "deviceModelID": "123e4567-e89b-12d3-a456-426614174002",
              "id": "de4d39f5-9160-4b44-814b-45e906c70c4e",
              "modelCodes": "[model-code-1, model-code-2]",
              "name": "Variant 1",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "activeVersion": {
                "activatedAt": "2020-05-06T22:30:44Z",
                "approvers": [
                  {
                    "approverID": "ae9b1ca4-8c0b-44fa-998f-4d94d3f3feac",
                    "createdAt": "2023-02-02T20:20:20.202Z",
                    "status": "APPROVED",
                    "updatedAt": "2023-02-02T20:20:20.202Z"
                  }
                ],
                "companyID": "8a05aa12-2026-11e9-afd8-f218988dd673",
                "createdAt": "2020-04-30T16:45:46Z",
                "deviceModelVariantID": "2810a160-e914-4760-b097-2dfeed3b489e",
                "hardwareRevisionIDs": "[\\\"47f7815b-f942-4b1c-868b-07eb7d20d114\\\"]",
                "id": "63fb0e4e-cd6c-4871-bdae-9cd44217f361",
                "notes": "test variant version3",
                "status": "ACTIVE",
                "updatedAt": "2020-05-06T22:30:44",
                "version": "version3"
              },
              "companyID": "b9ed14bb-b2ff-4ba3-a346-5cfa158db96e",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "This is variant 2",
              "deviceModelID": "123e4567-e89b-12d3-a456-426614174003",
              "id": "de4d39f5-9160-4b44-814b-45e906c70c4e",
              "modelCodes": "[model-code-3, model-code-4]",
              "name": "Variant 2",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching device model variants, disregarding limit and offset.",
            "type": "number"
          },
          "deviceModelVariants": {
            "description": "A list of device model variants.",
            "items": {
              "$ref": "#/components/schemas/DeviceModelVariant"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceModelsPage": {
        "example": {
          "count": 2,
          "deviceModels": [
            {
              "companyID": "b9ed14bb-b2ff-4ba3-a346-5cfa158db96e",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "de4d39f5-9160-4b44-814b-45e906c70c4e",
              "modelCodes": "[model1, model2]",
              "name": "Sibros Device Model",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "b9ed14bb-b2ff-4ba3-a346-5cfa158db96e",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "ef4d39f5-9160-4b44-814b-45e906c70c4e",
              "modelCodes": "[model1, model2, model3]",
              "name": "Test Device Model",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching device models, disregarding limit and offset.",
            "type": "number"
          },
          "deviceModels": {
            "description": "A list of device models.",
            "items": {
              "$ref": "#/components/schemas/DeviceModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DevicePatch": {
        "properties": {
          "attributes": {
            "description": "The updated attributes for a device",
            "example": {
              "color": "Lime Green",
              "make": "Sibros",
              "trim": "Ultra Deluxe"
            },
            "type": "object"
          },
          "connectivitySettings": {
            "$ref": "#/components/schemas/DeviceConnectivitySettings"
          },
          "decoderMappingID": {
            "description": "The updated decoder mapping ID for a device",
            "example": "86365dbb-0896-4e65-b73c-06a10e4f3f3e",
            "format": "uuid",
            "type": "string"
          },
          "decoderName": {
            "description": "The updated decoder mapping name for a device",
            "example": "dbc_20",
            "type": "string"
          },
          "deviceName": {
            "description": "The updated device name for a device",
            "example": "supernova",
            "type": "string"
          },
          "deviceSerialNumber": {
            "description": "The updated serial number for a device",
            "example": "4Y1SL65848Z411439",
            "type": "string"
          },
          "internalDecoderMappingID": {
            "description": "The updated internal decoder mapping ID for a device",
            "example": "86365dbb-0896-4e65-b73c-06a10e4f3f3e",
            "format": "uuid",
            "type": "string"
          },
          "liveLogConfig": {
            "description": "The updated live log config for a device",
            "example": "{0,100,0,104}",
            "type": "string"
          },
          "tags": {
            "description": "The updated tags for a device",
            "example": [
              "autogenerated_vehicle",
              "parallels_4VVJ64P2BZ"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceType": {
        "description": "The type of the device. Currently, vehicle and charger are available as types. More types may be defined in the future.\n| Enum Value | Description |\n| --- | --- |\n| VEHICLE | The device is a vehicle. |\n| CHARGER | The device is a charger. |\n",
        "enum": [
          "VEHICLE",
          "CHARGER"
        ],
        "type": "string"
      },
      "DevicesCompletedDetails": {
        "example": {
          "devicesCompletedOther": 1,
          "devicesPartiallyAccepted": 1,
          "devicesSkipped": 1,
          "devicesUpdateCompleted": 1,
          "devicesUpdateCompletedAfterRetry": 1
        },
        "properties": {
          "devicesCompletedOther": {
            "description": "The number of devices completed that do not fit in the other categories.",
            "type": "number"
          },
          "devicesPartiallyAccepted": {
            "description": "The number of devices that accepted part of the update.",
            "type": "number"
          },
          "devicesSkipped": {
            "description": "The number of devices that skipped the update.",
            "type": "number"
          },
          "devicesUpdateCompleted": {
            "description": "The number of devices that have completed an update successfully.",
            "type": "number"
          },
          "devicesUpdateCompletedAfterRetry": {
            "description": "The number of devices that completed successfully after at least one retry.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DevicesFailedDetails": {
        "example": {
          "MANIFEST_SIGNATURE_INVALID": 1,
          "NONE": 10,
          "PROVISIONING_REQUIRED": 1
        },
        "patternProperties": {
          ".*": {
            "description": "The number of devices that failed the update with the indicated substatus",
            "type": "number"
          }
        },
        "propertyNames": {
          "enum": [
            "NONE",
            "PROVISIONING_NOT_ALLOWED",
            "PROVISIONING_REQUIRED",
            "SERIAL_NUMBER_MISMATCH",
            "EXPECTED_ECU_NOT_FOUND",
            "UNEXPECTED_ECU_FOUND",
            "PRIMARY_ECU_CHANGED",
            "MANIFEST_SIGNATURE_INVALID",
            "VERSION_REPORT_SIGNATURE_INVALID",
            "REPLAYED_VERSION_REPORT"
          ]
        },
        "type": "object"
      },
      "DevicesInProgress": {
        "example": {
          "devicesAttemptingAbort": 1,
          "devicesInProgressOther": 1,
          "devicesPackageDownloading": 1,
          "devicesRequestReceived": 1,
          "devicesUpdateInProgress": 1,
          "devicesUpdateStaging": 1,
          "devicesWaitingForPrecondition": 1
        },
        "properties": {
          "devicesAttemptingAbort": {
            "description": "The number of devices attempting abort.",
            "type": "number"
          },
          "devicesInProgressOther": {
            "description": "The number of devices in progress that do not fit in the other categories.",
            "type": "number"
          },
          "devicesPackageDownloading": {
            "description": "The number of devices that are currently downloading the package.",
            "type": "number"
          },
          "devicesRequestReceived": {
            "description": "The number of devices that have received the deployment request.",
            "type": "number"
          },
          "devicesUpdateInProgress": {
            "description": "The number of devices whose update is currently in progress.",
            "type": "number"
          },
          "devicesUpdateStaging": {
            "description": "The number of devices staging the update.",
            "type": "number"
          },
          "devicesWaitingForPrecondition": {
            "description": "The number of devices waiting for precondition.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DevicesPage": {
        "example": {
          "count": 2,
          "results": [
            {
              "allowReprovisioning": false,
              "attributes": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
              "companyID": "8fbb6c25-5c00-48de-b445-a8c49b1df1f3",
              "components": "[{\"componentType\": \"BAT\", \"componentSerialNumber\": \"bin-number\", \"componentName\": \"\", \"attributes\": {\"bms\": \"bms-serial-number\"}]",
              "createdAt": "2022-02-24T00:23:10Z",
              "currentPackageId": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
              "currentSelectiveLogConfigId": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
              "decoderName": "example-decoder-mapping-name",
              "deviceID": "0a5c607d-7fd4-48f9-9193-e64bbabdfa06",
              "deviceModelID": "48b49aca-bc50-43f1-800b-bececba69a59",
              "deviceName": "Sibros Vehicle",
              "deviceSerialNumber": "SCA664S55CUX50961",
              "deviceType": "VEHICLE",
              "liveLogConfig": null,
              "selectiveLogConfig": "{ \"messages\": [ { \"bus_id\": 1, \"message_id\": 32, \"frequency_ms\": 1000 } ], \"conditions\": [ { \"bus_id\": 1, \"message_id\": 16, \"compare_value\": 1, \"signal\": { \"operator\": \"==\", \"stop_bit\": 1, \"start_bit\": 0 } } ] }",
              "tags": "[experimental,group1,anyString]",
              "updatedAt": "2022-02-24T00:23:10Z"
            },
            {
              "allowReprovisioning": false,
              "attributes": "{\"color\":\"Blue\",\"trim\":\"Premium\"}",
              "companyID": "8fbb6c25-5c00-48de-b445-a8c49b1df1f3",
              "components": "[{\"componentType\": \"BAT\", \"componentSerialNumber\": \"bin-number\", \"componentName\": \"\", \"attributes\": {\"bms\": \"bms-serial-number\"}]",
              "createdAt": "2022-02-24T00:23:10Z",
              "currentPackageId": "185b8485-ca2a-40df-bd07-3ae5ed8906c9",
              "currentSelectiveLogConfigId": "48b49aca-ca2a-40df-800b-e64bbabdfa06",
              "decoderName": "example-decoder-mapping-name",
              "deviceID": "aa5c607d-7fd4-48f9-9193-e64bbabdfa06",
              "deviceModelID": "48b49aca-bc50-43f1-800b-bececba69a59",
              "deviceName": "Sibros Vehicle",
              "deviceSerialNumber": "W1A664S55CUX50961",
              "deviceType": "VEHICLE",
              "liveLogConfig": null,
              "selectiveLogConfig": "{ \"messages\": [ { \"bus_id\": 1, \"message_id\": 32, \"frequency_ms\": 1000 } ], \"conditions\": [ { \"bus_id\": 1, \"message_id\": 16, \"compare_value\": 1, \"signal\": { \"operator\": \"==\", \"stop_bit\": 1, \"start_bit\": 0 } } ] }",
              "tags": "[experimental,group1,someString]",
              "updatedAt": "2022-02-24T00:23:10Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching devices, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of devices.",
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DiagnosticFile": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "controllerID": {
            "description": "A unique controller identifier.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the diagnostic file's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the associated decoder mapping.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "diagnosticFileID": {
            "description": "A unique identifier for the diagnostic file.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "ecuAddress": {
            "description": "The address of the ECU.",
            "example": 453,
            "type": "string"
          },
          "functionalAddress": {
            "description": "The functional address of the ECU.",
            "example": 453,
            "type": "string"
          },
          "jsonFile": {
            "$ref": "#/components/schemas/File"
          },
          "jsonFileID": {
            "description": "A unique identifier of the JSON file.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "pdxEcuIDs": {
            "description": "The identifier name of the ECUs.",
            "example": {
              "AVAS": null,
              "A_Sample": null
            },
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pdxFile": {
            "$ref": "#/components/schemas/File"
          },
          "pdxFileID": {
            "description": "A unique identifier of the PDX file.",
            "example": "3d0db63f-aa61-4dd6-acd1-5441344d75c3",
            "format": "uuid",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the diagnostic file's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisplayOptions": {
        "example": {
          "stringType": null
        },
        "properties": {
          "stringType": {
            "description": "The string type of the display options.",
            "enum": [
              "PLAIN",
              "HEX"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ECUListRecord": {
        "properties": {
          "companyID": {
            "description": "A unique identifier for the company associated with the ECU list record.",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The timestamp when the ECU list record was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deviceID": {
            "description": "A unique identifier for the device associated with the ECU list record.",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "hardwareRevisions": {
            "description": "A list of hardware revisions associated with the ecu list record.",
            "items": {
              "$ref": "#/components/schemas/ECUListRecordHardwareRevision"
            },
            "type": "array"
          },
          "id": {
            "description": "A unique identifier for the ECU list record.",
            "example": "f1db63f-aa61-4dd6-acd1-54413chd75d1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ECUListRecordStatus"
          },
          "updatedAt": {
            "description": "The timestamp when the ECU list record was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ECUListRecordHardwareRevision": {
        "properties": {
          "companyID": {
            "description": "A unique identifier for the company associated with the ECU list record hardware revisions.",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The timestamp when the ECU list record version was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "ecuListRecordID": {
            "description": "A unique identifier for the ECU list record.",
            "example": "776f8520-c1d7-466b-ac3a-2b56f44b133e",
            "format": "uuid",
            "type": "string"
          },
          "hardwareRevisionID": {
            "description": "A unique identifier for the hardware revision associated with the ECU list record.",
            "example": "776f8520-c1d7-466b-ac3a-2b56f44b133b",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the list of hardware revisions associated with an ECU.",
            "example": "f1db63f-aa61-4dd6-acd1-5441344d75d1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "The timestamp when the ECU list record version was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "ecuListRecordID",
          "hardwareRevisionID"
        ],
        "type": "object"
      },
      "ECUListRecordStatus": {
        "description": "The current status of the ECU list record.\n",
        "enum": [
          "RECEIVED",
          "ACTIVE",
          "INACTIVE",
          "INVALID",
          "INVALID_LIST"
        ],
        "type": "string"
      },
      "ECUModel": {
        "properties": {
          "assemblyID": {
            "description": "Indicates the component package ID.",
            "example": "battery",
            "type": "string"
          },
          "componentID": {
            "description": "Identifies the Product type.",
            "example": "BMS",
            "type": "string"
          },
          "pcbID": {
            "description": "Printed Circuit Board revision ID - hardware version.",
            "example": "beta",
            "type": "string"
          },
          "usageID": {
            "description": "A PCB can be used for multiple ECUs.",
            "example": "beta.usage-left",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "errorCode": {
            "description": "The Sibros API error code",
            "type": "string"
          },
          "errorDesc": {
            "description": "The error description",
            "type": "string"
          },
          "errorMessage": {
            "description": "Details about the error",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtractReportPayload": {
        "properties": {
          "reportFilter": {
            "description": "Filter for report.",
            "example": "{\"reportType\":\"deployment_view\",\"reportFilter\":{\"deploymentStartTimeLowerBound\":\"2023-05-17T00:00:00Z\",\"deploymentStartTimeUpperBound\":\"2023-05-17T23:59:59Z\"}}",
            "type": "object"
          },
          "reportType": {
            "description": "The type of report.",
            "example": "deployment_view",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FaultJ1939Identifier": {
        "properties": {
          "fault_mode_id": {
            "description": "This number represents a specific faulty behavior the signal can have. To understand what fault modes this signal can have, refer to the fault mode map specified for this signal in data map. If it is not defined in data map, refer to the default fault mode map.",
            "type": "integer"
          },
          "message_id": {
            "description": "This is used to uniquely identify the message ID of the CAN signal being evaluated for the condition. This message ID must be present in the DBC file associated with the bus specified in the previous field. This is only required if the source type is CAN_SIGNAL.",
            "example": 64,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FaultModeDetail": {
        "properties": {
          "description": {
            "description": "Description of the Failure Mode Indicator",
            "example": "This FaultModeID indicates that the sensor or component associated with the respective SPN is reporting a voltage level that is below the normal operating range.",
            "type": "string"
          },
          "faultModeID": {
            "description": "Failure Mode Indicator (FMI). A fault mode ID cannot be more than 31 (5 bits)",
            "example": 4,
            "type": "integer"
          },
          "summary": {
            "description": "Short summary of the Failure Mode Indicator",
            "example": "Low Voltage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FaultModeMap": {
        "properties": {
          "companyID": {
            "description": "A unique identifier for the company associated with the Fault Mode Map.",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The timestamp when the Fault Mode Map was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "faultModeDetails": {
            "description": "A list of fault mode details associated with the Fault Mode Map.",
            "items": {
              "$ref": "#/components/schemas/FaultModeDetail"
            },
            "type": "array"
          },
          "faultModeMapID": {
            "description": "A unique identifier for the Fault Mode Map.",
            "example": "f1db63f-aa61-4dd6-acd1-54413chd75d1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the Fault Mode Map.",
            "example": "Fault Mode Map A",
            "type": "string"
          },
          "updatedAt": {
            "description": "The timestamp when the Fault Mode Map was created.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeatureFlagValue": {
        "type": "boolean"
      },
      "File": {
        "properties": {
          "createdAt": {
            "description": "A timestamp of the file's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "downloadURL": {
            "description": "The download URL of the file.",
            "example": "example-download.url",
            "type": "string"
          },
          "errorDetails": {
            "description": "Any errors that might occur on upload.",
            "example": "unsupported file extension",
            "type": "string"
          },
          "errorType": {
            "$ref": "#/components/schemas/FileErrorType"
          },
          "fileHash": {
            "description": "The hash of the file.",
            "example": "db1ff24cf4321a314808f4f393d00209",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file.",
            "example": "file1.tar",
            "type": "string"
          },
          "fileSizeBytes": {
            "description": "The size of the file in bytes.",
            "example": 43,
            "type": "integer"
          },
          "fileStatus": {
            "$ref": "#/components/schemas/FileStatus"
          },
          "path": {
            "description": "The path of the file location.",
            "example": "/some/path",
            "type": "string"
          },
          "uploadURL": {
            "description": "The upload URL of the file.",
            "example": "example-upload.url",
            "type": "string"
          }
        },
        "required": [
          "fileName"
        ],
        "type": "object"
      },
      "FileErrorType": {
        "enum": [
          "DECODER_DBC_PARSING_ERROR"
        ],
        "type": "string"
      },
      "FileStatus": {
        "enum": [
          "NOT_UPLOADED",
          "UPLOADED",
          "INVALID"
        ],
        "type": "string"
      },
      "GenericDecoderMappingResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Decoder mapping 245c4527-81ec-43a9-892f-7f21b7d05325 has been deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenericDeviceLogResponse": {
        "$ref": "#/components/schemas/DeviceLog"
      },
      "GenericNilResponse": {
        "example": null,
        "type": "string"
      },
      "GenericPackageAttachmentResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "successfully deleted package attachment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenericPackageGroupResponse": {
        "$ref": "#/components/schemas/PackageGroup"
      },
      "GenericResourceDeleteResponse": {
        "example": "Resource has been deleted.",
        "type": "string"
      },
      "GenericRolloutAttachmentResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "successfully deleted rollout attachment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetAllCommandDefinitionsResponse": {
        "example": {
          "commands": [
            {
              "commandId": 200,
              "description": "Send and receive UDS payloads.",
              "group": "UDS",
              "name": "UDS",
              "requestPayloadFields": [
                {
                  "description": "Logical address (if DoIP) or UDS request ID (if CAN) in hex string format.",
                  "fieldName": "ecuAddress",
                  "inputOptions": {
                    "required": true,
                    "stringType": "HEX"
                  },
                  "inputType": "STRING",
                  "label": "ECU Address (Hex)"
                },
                {
                  "description": "UDS request payload in hex string format.",
                  "fieldName": "hexString",
                  "inputOptions": {
                    "required": true,
                    "stringType": "HEX"
                  },
                  "inputType": "STRING",
                  "label": "Payload (Hex)"
                }
              ],
              "responsePayloadFields": [
                {
                  "description": "16 or 11/29 bit ECU address.",
                  "displayOptions": {
                    "stringType": "HEX"
                  },
                  "fieldName": "ecuAddress",
                  "label": "ECU Address",
                  "outputType": "STRING"
                },
                {
                  "description": "UDS response payload in hex string format.",
                  "displayOptions": {
                    "stringType": "HEX"
                  },
                  "fieldName": "hexString",
                  "label": "Hex Payload",
                  "outputType": "STRING"
                }
              ]
            }
          ]
        },
        "properties": {
          "commands": {
            "description": "A list of commands.",
            "items": {
              "$ref": "#/components/schemas/CommandDefinition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllCommandRequestsResponse": {
        "example": {
          "results": [
            {
              "commandId": 200,
              "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
              "commandSequencePosition": 1,
              "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
              "createdAt": "2022-06-18T03:26:44.950605Z",
              "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
              "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
              "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
              "expiresBy": "2022-06-18T03:29:51.827053Z",
              "metadata": null,
              "payload": {
                "ecuAddress": "601",
                "hexString": "22f111"
              },
              "responseTimeout": 5500,
              "status": "RESPONSE_PENDING",
              "updatedAt": "2022-06-18T03:26:51.827053Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of command requests.",
            "items": {
              "$ref": "#/components/schemas/CommandRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllCommandResponsesResponse": {
        "example": {
          "results": [
            {
              "commandId": 200,
              "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
              "commandResponseId": "9171f394-6991-45fe-9c7e-09c388b6300a",
              "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
              "createdAt": "2022-06-18T03:26:51.819606Z",
              "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
              "deviceTimestamp": "2022-06-18T03:26:49.102082Z",
              "payload": {
                "ecuAddress": "0601",
                "hexString": "62f11142414c5f3030303030303030385f3031"
              },
              "status": "COMPLETED"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of command responses.",
            "items": {
              "$ref": "#/components/schemas/CommandResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllCommandSequenceRequestsResponse": {
        "example": {
          "results": [
            {
              "commandId": 200,
              "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
              "commandSequencePosition": 1,
              "commandSequenceRequestId": "14bb67ca-937b-41d4-ac60-6093b6692a9e",
              "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
              "createdAt": "2022-06-18T03:26:44.950605Z",
              "creatorUserId": "a1d0a5a9-b2fe-474e-ab87-afa4d63daa18",
              "decoderMappingId": "d9465d3c-e9d5-4cda-98ed-bed6cef07626",
              "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
              "expiresBy": "2022-06-18T03:36:51.827053Z",
              "metadata": null,
              "payload": {
                "ecuAddress": "601",
                "hexString": "22f111"
              },
              "responseTimeout": 5500,
              "status": "RESPONSE_PENDING",
              "updatedAt": "2022-06-18T03:26:51.827053Z"
            }
          ]
        },
        "items": {
          "$ref": "#/components/schemas/CommandSequenceRequest"
        },
        "type": "object"
      },
      "GetAllCustomCommandsResponse": {
        "$ref": "#/components/schemas/CustomCommand",
        "properties": {
          "results": {
            "description": "The list of custom commands.",
            "items": {
              "$ref": "#/components/schemas/CustomCommand"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllDecoderMappingsResponse": {
        "example": {
          "results": [
            {
              "companyID": "10064144-520f-447e-aa64-d39bf770b96e",
              "content": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\", \"senders\": [\"DU\"]}}`",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "customCommands": null,
              "decoderFiles": [
                {
                  "abbreviation": "SIB",
                  "busID": 0,
                  "companyID": "212b485b-eab0-47b8-91e5-bad79521f9e0",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderFileID": "6759e253-1c39-49aa-97b3-b49da8c549a7",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "description": "Sibros",
                  "downloadURL": "example-download.url",
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file2.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "fileID": "c49cbb97-29ae-449b-b014-6cde9ac92172",
                  "updatedAt": "2020-03-02T20:20:20.202Z",
                  "uploadURL": "example-upload.url"
                }
              ],
              "decoderMappingID": "d1fb0fe8-4d24-44ba-a075-36dca4d6031b",
              "decoderMappingName": "main_dbc",
              "decoderMappingStatus": "IN_PROGRESS",
              "deviceModelID": "cfa1decf-f550-43a0-818a-7a21883432d3",
              "diagnosticFiles": [
                {
                  "controllerID": "93e0c287-a497-46c4-a177-63b3c9225e13",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "diagnosticFileID": "6562ced3-ab34-4499-b79b-4e8c9e2a5414",
                  "ecuAddress": 385,
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file1.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "functionalAddress": 3584,
                  "updatedAt": "2020-03-02T20:20:20.202Z"
                }
              ],
              "updatedAt": "2020-02-03T20:20:20.202Z"
            },
            {
              "companyID": "10064144-520f-447e-aa64-d39bf770b96e",
              "content": "b`\"decoderMappingId\": \"main_dbc\", \"0\": {16: {\"id\": 16, \"name\": \"DU_status\", \"senders\": [\"DU\"]}}`",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "customCommands": null,
              "decoderFiles": [
                {
                  "abbreviation": "SIB",
                  "busID": 0,
                  "companyID": "212b485b-eab0-47b8-91e5-bad79521f9e0",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderFileID": "6759e253-1c39-49aa-97b3-b49da8c549a7",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "description": "Sibros",
                  "downloadURL": "example-download.url",
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file2.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "fileID": "c49cbb97-29ae-449b-b014-6cde9ac92172",
                  "updatedAt": "2020-03-02T20:20:20.202Z",
                  "uploadURL": "example-upload.url"
                }
              ],
              "decoderMappingID": "abfb0fe8-4d24-44ba-a075-36dca4d6031b",
              "decoderMappingName": "test_dbc",
              "decoderMappingStatus": "IN_PROGRESS",
              "deviceModelID": "cfa1decf-f550-43a0-818a-7a21883432d3",
              "diagnosticFiles": [
                {
                  "controllerID": "93e0c287-a497-46c4-a177-63b3c9225e13",
                  "createdAt": "2020-02-02T20:20:20.202Z",
                  "decoderMappingID": "598ab15c-c3aa-4649-a656-4a9dd85ac490",
                  "diagnosticFileID": "6562ced3-ab34-4499-b79b-4e8c9e2a5414",
                  "ecuAddress": 385,
                  "file": {
                    "downloadURL": "example-download.url",
                    "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                    "fileName": "file1.tar",
                    "fileSizeBytes": 67,
                    "fileStatus": "NOT_UPLOADED",
                    "path": "/some/path",
                    "uploadURL": "example-upload.url"
                  },
                  "functionalAddress": 3584,
                  "updatedAt": "2020-03-02T20:20:20.202Z"
                }
              ],
              "updatedAt": "2020-02-03T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "The list of decoder mappings",
            "items": {
              "$ref": "#/components/schemas/DecoderMapping"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllDefaultStatesResponse": {
        "example": {
          "results": [
            {
              "deviceGroupId": "86b65709-c79c-4d87-bb6e-ed6b8e2dbbf0",
              "deviceModelId": "084c9727-5bd7-4657-ad0e-67cc4766e4bc",
              "packageId": "f5883a08-fc43-468f-b9f6-b8eda7620949",
              "selectiveLogConfigId": "8b6d2d74-efe0-4c1c-8085-318b2d2507ec",
              "status": "ACTIVE"
            },
            {
              "deviceGroupId": "abc65709-c79c-4d87-bb6e-ed6b8e2dbbf0",
              "deviceModelId": "084c9727-5bd7-4657-ad0e-67cc4766e4bc",
              "packageId": "f5883a08-fc43-468f-b9f6-b8eda7620949",
              "selectiveLogConfigId": "8b6d2d74-efe0-4c1c-8085-318b2d2507ec",
              "status": "NOT_ACTIVE"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of default states.",
            "items": {
              "$ref": "#/components/schemas/DefaultState"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllDeviceGroupsResponse": {
        "example": {
          "count": 2,
          "results": [
            {
              "companyID": "fac2ee0c-3a1d-4529-bb0b-e65c07370ccc",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deviceGroupID": "48f6c77b-d64b-4177-afc5-716dd6794caf",
              "deviceGroupName": "Sibros Vehicle Group",
              "deviceModelID": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
              "filter": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"carModel1, carModel2\"]}, \"serialNumbers\":[\"serialNumber1\", \"serialNumber2\"]}",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "fac2ee0c-3a1d-4529-bb0b-e65c07370ccc",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deviceGroupID": "56f6c77b-d64b-4177-afc5-716dd6794caf",
              "deviceGroupName": "Test Vehicle Group",
              "deviceModelID": "f8a3f484-aefa-4c90-a38a-35ced5593e29",
              "filter": "{\"attributes\":{\"make\":[\"companyName\"],\"model\":[\"carModel1, carModel2\"]}, \"serialNumbers\":[\"serialNumber321\", \"serialNumber123\"]}",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching device groups, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of device groups.",
            "items": {
              "$ref": "#/components/schemas/DeviceGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllFaultModeMapsResponse": {
        "example": {
          "count": 2,
          "faultModeMaps": [
            {
              "companyID": "123e4567-e89b-12d3-a456-426614174001",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "faultModeDetails": [
                {
                  "description": "This FaultModeID indicates that the sensor or component associated with the respective SPN is reporting a voltage level that is below the normal operating range.",
                  "faultModeID": 4,
                  "summary": "Low Voltage"
                }
              ],
              "faultModeMapID": "f1db63f-aa61-4dd6-acd1-54413chd75d1",
              "name": "Fault Mode Map A",
              "updatedAt": "2022-02-02T20:20:20.202Z"
            },
            {
              "companyID": "123e4567-e89b-12d3-a456-426614174002",
              "createdAt": "2022-03-03T15:15:15.215Z",
              "faultModeDetails": [
                {
                  "description": "This FaultModeID indicates that the sensor or component associated with the respective SPN is reporting a voltage level that is above the normal operating range.",
                  "faultModeID": 5,
                  "summary": "High Voltage"
                }
              ],
              "faultModeMapID": "b2ac88e-cc62-4ed7-bc55-54413chd75e2",
              "name": "Fault Mode Map B",
              "updatedAt": "2022-03-03T15:15:15.215Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of Fault Mode Maps.",
            "type": "integer"
          },
          "faultModeMaps": {
            "description": "A list of Fault Mode Maps.",
            "items": {
              "$ref": "#/components/schemas/FaultModeMap"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllMasterTokensResponse": {
        "example": {
          "results": [
            {
              "companyId": "27c0a54b-ff02-4a27-9427-209691800d6e",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "testing",
              "key": "47a3ade680ce5bff",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "updatedBy": "63b4bae4-edb5-46d5-a79c-48051e18edbd",
              "userId": "1bd8d299-b96f-491c-bfb0-9cb55b3ede14"
            },
            {
              "companyId": "27c0a54b-ff02-4a27-9427-209691800d6e",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "dev",
              "key": "57a3ade680ce5bff",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "updatedBy": "63b4bae4-edb5-46d5-a79c-48051e18edbd",
              "userId": "1bd8d299-b96f-491c-bfb0-9cb55b3ede14"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of master tokens.",
            "items": {
              "$ref": "#/components/schemas/MasterToken"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllPackagesResponse": {
        "example": {
          "results": [
            {
              "approvers": [
                {
                  "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
                  "createdAt": "2022-02-02T20:20:20.202Z",
                  "status": "PENDING",
                  "updatedAt": "2022-02-02T20:20:20.202Z"
                }
              ],
              "companyID": "659e11aa-f6a0-4db4-9aab-d6405e09cea8",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
              "downloadURL": "example-download.url",
              "errorDescription": "some description",
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
              "internalNotes": "some notes",
              "manifest": "manifest",
              "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
              "packageGroupName": "Sibros Package",
              "packageID": "b658cf59-7877-4a2d-be6b-f22e78d87665",
              "packageStatus": "IN_APPROVAL",
              "packageVersion": "1.1",
              "releaseCandidate": "string",
              "releaseNotes": "release notes",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "uploadURL": "example-upload.url",
              "vcsInfo": "1.1"
            },
            {
              "approvers": [
                {
                  "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
                  "createdAt": "2022-02-02T20:20:20.202Z",
                  "status": "PENDING",
                  "updatedAt": "2022-02-02T20:20:20.202Z"
                }
              ],
              "companyID": "659e11aa-f6a0-4db4-9aab-d6405e09cea8",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
              "downloadURL": "example-download.url",
              "errorDescription": "some description",
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
              "internalNotes": "some notes",
              "manifest": "manifest",
              "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
              "packageGroupName": "Sibros Package",
              "packageID": "c658cf59-7877-4a2d-be6b-f22e78d87665",
              "packageStatus": "IN_APPROVAL",
              "packageVersion": "1.1",
              "releaseCandidate": "string",
              "releaseNotes": "release notes",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "uploadURL": "example-upload.url",
              "vcsInfo": "1.1"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of packages.",
            "items": {
              "$ref": "#/components/schemas/PackageResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllRolesResponse": {
        "example": {
          "results": [
            {
              "companyID": "c851cc89-3dac-4d26-8f08-d70eb5cb1723",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "7b8154ad-aa30-4d2a-93e2-ba59096d3592",
              "roleDesc": "can do it all",
              "roleName": "Admin",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "c851cc89-3dac-4d26-8f08-d70eb5cb1723",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "8c8154ad-aa30-4d2a-93e2-ba59096d3592",
              "roleDesc": "release related tasks",
              "roleName": "Release Manager",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of all existing roles.",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllRolloutsResponse": {
        "example": {
          "count": 2,
          "results": [
            {
              "approvers": "[70352bfc-ae4d-4203-ae39-c912e79048c2]",
              "companyID": "2ebf231d-c17b-4fb0-967c-87a08b04d5ed",
              "createdAt": "2020-02-02T20:20:40.202Z",
              "desiredState": "COMPLETED",
              "deviceGroupIDs": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
              "deviceModelID": "4fcea1ce-1604-4795-a716-42a872817ffd",
              "ownerID": "603bbd50-b981-401f-b94c-4037bb6d3f15",
              "packageID": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
              "rolloutID": "85c0eb70-3440-471d-b0f1-a94fe1d16d4c",
              "rolloutName": "package-rollout",
              "rolloutType": "SOFTWARE_UPDATE",
              "scheduledStartTime": null,
              "selectiveLogConfigID": null,
              "startTime": "2020-02-02T20:20:40.202Z",
              "updatedAt": "2020-02-02T20:20:40.202Z"
            },
            {
              "approvers": "[70352bfc-ae4d-4203-ae39-c912e79048c2]",
              "companyID": "2ebf231d-c17b-4fb0-967c-87a08b04d5ed",
              "createdAt": "2020-02-02T20:20:40.202Z",
              "desiredState": "COMPLETED",
              "deviceGroupIDs": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
              "deviceModelID": "4fcea1ce-1604-4795-a716-42a872817ffd",
              "ownerID": "603bbd50-b981-401f-b94c-4037bb6d3f15",
              "packageID": null,
              "rolloutID": "1230eb70-3440-471d-b0f1-a94fe1d16d4c",
              "rolloutName": "selective-log-config-rollout",
              "rolloutType": "SELECTIVE_LOG_CONFIG",
              "scheduledStartTime": null,
              "selectiveLogConfigID": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
              "startTime": "2020-02-02T20:20:40.202Z",
              "updatedAt": "2020-02-02T20:20:40.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching rollouts, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of rollouts.",
            "items": {
              "$ref": "#/components/schemas/Rollout"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllStatusLogsResponse": {
        "example": [
          {
            "companyID": "4c8b8e08-3bb8-4f55-9d61-0629e00ca199",
            "connectionType": "WIFI",
            "createdAt": "2020-02-02T20:20:20.202Z",
            "deploymentID": "58979238-252b-4d8f-97c8-028c164283c2",
            "ecuStatus": null,
            "logTimestamp": "2020-02-02T20:20:20.202Z",
            "packageManagerStatus": null,
            "statusLogID": "0b96852d-9f74-466e-be75-6fe493b06ddd",
            "updateManagerStatus": null
          },
          {
            "companyID": "4c8b8e08-3bb8-4f55-9d61-0629e00ca199",
            "connectionType": "WIRED",
            "createdAt": "2020-02-02T20:20:20.202Z",
            "deploymentID": "58979238-252b-4d8f-97c8-028c164283c2",
            "ecuStatus": null,
            "logTimestamp": "2020-02-02T20:20:20.202Z",
            "packageManagerStatus": null,
            "statusLogID": "abcd852d-9f74-466e-be75-6fe493b06ddd",
            "updateManagerStatus": null
          }
        ],
        "properties": {
          "results": {
            "description": "A list of status logs.",
            "items": {
              "$ref": "#/components/schemas/StatusLog"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllTagsResponse": {
        "example": [
          {
            "companyID": "42b05123-0529-4be8-b8d0-171bfbdfdab5",
            "tagId": "58866e8f-1425-4c25-bc2f-f08e2f6eea66",
            "tagName": "testing"
          },
          {
            "companyID": "42b05123-0529-4be8-b8d0-171bfbdfdab5",
            "tagId": "11266e8f-1425-4c25-bc2f-f08e2f6eea66",
            "tagName": "validation"
          }
        ],
        "properties": {
          "results": {
            "description": "A list of tags.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllTemplateCategoriesResponse": {
        "example": {
          "count": 2,
          "results": [
            {
              "categoryId": "abc5c0b4-3270-4538-89cf-8153e0087239",
              "categoryName": "main-template-category",
              "companyId": "a986d6b4-53b6-4fae-b4c3-f1153d2a205b",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "templateType": "dashboard",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "categoryId": "3925c0b4-3270-4538-89cf-8153e0087239",
              "categoryName": "rollout-template-category",
              "companyId": "a986d6b4-53b6-4fae-b4c3-f1153d2a205b",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "templateType": "fleet-dashboard",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching template categories, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of template categories.",
            "items": {
              "$ref": "#/components/schemas/TemplateCategory"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllTemplatesResponse": {
        "example": {
          "count": 2,
          "results": [
            {
              "categoryId": "3fdfce85-8032-4fb6-97bd-bac6fa1d32b4",
              "companyId": "52f55a6f-2290-4e8c-858c-b9a230d106c1",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "createdById": "f746d199-7408-4f5a-a9d7-5a4134310406",
              "decoderMappingId": "7025cce1-573d-4201-88a9-a2fd87328804",
              "domainName": "sibros",
              "shared": false,
              "templateContent": "[{\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 0, \\\"key\\\": \\\"1dca88f3-0cb7-424d-841f-ff323e9789db\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"DU_charging_status\\\", \\\"signals\\\": [{\\\"key\\\": \\\"DU_charging_status\\\", \\\"name\\\": \\\"\\\", \\\"type\\\": \\\"signal\\\", \\\"busId\\\": 0, \\\"color\\\": \\\"#A9D394\\\", \\\"messageId\\\": 16, \\\"querySource\\\": \\\"signals\\\", \\\"metricColumn\\\": \\\"signal_name\\\", \\\"thresholdValue\\\": {}}]}}, {\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 12, \\\"key\\\": \\\"85971f1f-4c18-43c1-a4e2-b0f7a50c039d\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"Title\\\", \\\"signals\\\": []}}]",
              "templateId": "824b48ca-1488-48eb-9bd4-51e2443c4bb2",
              "templateName": "main-template",
              "templateType": "dashboard",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "categoryId": "3fdfce85-8032-4fb6-97bd-bac6fa1d32b4",
              "companyId": "52f55a6f-2290-4e8c-858c-b9a230d106c1",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "createdById": "a136d199-7408-4f5a-a9d7-5a4134310406",
              "decoderMappingId": "7025cce1-573d-4201-88a9-a2fd87328804",
              "domainName": "sibros",
              "shared": false,
              "templateContent": "[{\\\"h\\\": 14, \\\"w\\\": 10, \\\"x\\\": 0, \\\"y\\\": 0, \\\"key\\\": \\\"1dca88f3-0cb7-424d-841f-ff323e9789db\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"DU_charging_status\\\", \\\"signals\\\": [{\\\"key\\\": \\\"DU_charging_status\\\", \\\"name\\\": \\\"\\\", \\\"type\\\": \\\"signal\\\", \\\"busId\\\": 0, \\\"color\\\": \\\"#A9D394\\\", \\\"messageId\\\": 16, \\\"querySource\\\": \\\"signals\\\", \\\"metricColumn\\\": \\\"signal_name\\\", \\\"thresholdValue\\\": {}}]}}, {\\\"h\\\": 12, \\\"w\\\": 12, \\\"x\\\": 0, \\\"y\\\": 12, \\\"key\\\": \\\"85971f1f-4c18-43c1-a4e2-b0f7a50c039d\\\", \\\"minH\\\": 8, \\\"minW\\\": 3, \\\"moved\\\": false, \\\"static\\\": false, \\\"widget\\\": {\\\"kind\\\": \\\"chart\\\", \\\"title\\\": \\\"Title\\\", \\\"signals\\\": []}}]",
              "templateId": "869048ca-1488-48eb-9bd4-51e2443c4bb2",
              "templateName": "custom-template",
              "templateType": "query",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching templates, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of templates.",
            "items": {
              "$ref": "#/components/schemas/Template"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllUsersResponse": {
        "example": [
          {
            "attributes": "{\"region\":\"europe\"}",
            "companyID": "d8323aa7-3db1-4577-bbb6-0dbebee0e7be",
            "createdAt": "2020-02-02T20:20:20.202Z",
            "email": "johndoe@sibros.tech",
            "externalID": "doe_john",
            "firstName": "John",
            "lastLoginAt": "2020-02-02T20:20:20.202Z",
            "lastName": "Doe",
            "permissions": "[{\"action\": 1, \"resource\": 10}, {\"action\": 1, \"resource\": 30}]",
            "phone": "555-555-5555",
            "roles": "[Admin, Release Manager]",
            "status": "ACTIVE",
            "updatedAt": "2020-02-02T20:20:20.202Z",
            "userID": "fbd7728a-f4f7-4843-b3a1-75619fca02c0",
            "userName": "johndoe123"
          },
          {
            "attributes": "{\"region\":\"europe\"}",
            "companyID": "d8323aa7-3db1-4577-bbb6-0dbebee0e7be",
            "createdAt": "2020-02-02T20:20:20.202Z",
            "email": "johndoe@sibros.tech",
            "externalID": "jane_mary",
            "firstName": "Mary",
            "lastLoginAt": "2020-02-02T20:20:20.202Z",
            "lastName": "Jane",
            "permissions": "[{\"action\": 1, \"resource\": 10}]",
            "phone": "888-888-8888",
            "roles": "[Admin]",
            "status": "ACTIVE",
            "updatedAt": "2020-02-02T20:20:20.202Z",
            "userID": "abc7728a-f4f7-4843-b3a1-75619fca02c0",
            "userName": "maryjane456"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/User"
        },
        "type": "array"
      },
      "GetCommandRequestByIDResponse": {
        "$ref": "#/components/schemas/CommandRequest"
      },
      "GetCommandResponseByIDResponse": {
        "$ref": "#/components/schemas/CommandResponse",
        "example": {
          "commandId": 200,
          "commandRequestId": "ff1ffde6-941e-40db-9e9d-440c03dc0b2a",
          "commandResponseId": "9171f394-6991-45fe-9c7e-09c388b6300a",
          "companyId": "8a05aa12-2026-11e9-afd8-f218988dd673",
          "createdAt": "2022-06-18T03:26:51.819606Z",
          "deviceId": "25978d46-bc35-4047-a737-c563867966f9",
          "deviceTimestamp": "2022-06-18T03:26:49.102082Z",
          "payload": {
            "ecuAddress": "0601",
            "hexString": "62f11142414c5f3030303030303030385f3031"
          },
          "status": "COMPLETED"
        }
      },
      "GetCommandSequenceDefinitionByIDResponse": {
        "$ref": "#/components/schemas/CommandSequenceDefinition"
      },
      "GetCommandSequenceRequestByIDResponse": {
        "$ref": "#/components/schemas/CommandSequenceRequest"
      },
      "GetConnectionMediums": {
        "properties": {
          "downloadMediums": {
            "description": "A list of allowed connection media.",
            "example": "[WIFI, CELLULAR]",
            "items": {
              "$ref": "#/components/schemas/ConnectionMediumType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDecoderFileStoragePathResponse": {
        "properties": {
          "decoderMappingID": {
            "description": "The decoder mapping ID for which this storage path belongs to",
            "format": "uuid",
            "type": "string"
          },
          "downloadURL": {
            "description": "The download URL for the decoder file.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetDefaultPackageAndSLCIDsByDeviceIDResponse": {
        "properties": {
          "packageID": {
            "description": "A unique identifier for the package of the default state.",
            "example": "207c78f3-83bb-420d-b045-4cd6128d860e",
            "format": "uuid",
            "type": "string"
          },
          "selectiveLogConfigId": {
            "description": "A unique identifier for the log configuration of the default state.",
            "example": "929e6df0-cfd4-4d40-a788-035fc8c87400",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetDefinedCommandsResponse": {
        "example": {
          "commands": [
            {
              "commandId": 200,
              "description": "Send and receive UDS payloads.",
              "group": "UDS",
              "name": "UDS",
              "requestPayloadFields": [
                {
                  "description": "Logical address (if DoIP) or UDS request ID (if CAN) in hex string format.",
                  "fieldName": "ecuAddress",
                  "inputOptions": {
                    "required": true,
                    "stringType": "HEX"
                  },
                  "inputType": "STRING",
                  "label": "ECU Address (Hex)"
                },
                {
                  "description": "UDS request payload in hex string format.",
                  "fieldName": "hexString",
                  "inputOptions": {
                    "required": true,
                    "stringType": "HEX"
                  },
                  "inputType": "STRING",
                  "label": "Payload (Hex)"
                }
              ],
              "responsePayloadFields": [
                {
                  "description": "16 or 11/29 bit ECU address.",
                  "displayOptions": {
                    "stringType": "HEX"
                  },
                  "fieldName": "ecuAddress",
                  "label": "ECU Address",
                  "outputType": "STRING"
                },
                {
                  "description": "UDS response payload in hex string format.",
                  "displayOptions": {
                    "stringType": "HEX"
                  },
                  "fieldName": "hexString",
                  "label": "Hex Payload",
                  "outputType": "STRING"
                }
              ]
            }
          ]
        },
        "properties": {
          "commands": {
            "description": "A list of commands.",
            "items": {
              "$ref": "#/components/schemas/CommandDefinition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeploymentConsentResponse": {
        "properties": {
          "result": {
            "description": "A list of consents.",
            "items": {
              "$ref": "#/components/schemas/Consent"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeploymentLogsResponse": {
        "example": {
          "results": [
            {
              "batchCounter": 0,
              "batchIndex": 0,
              "companyID": "06de9717-41f1-4467-abc7-88e0cbdf604c",
              "componentType": "PACKAGE_MANAGER",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deploymentID": "afc02a7c-7d76-4628-85a6-b7e5d9200c2a",
              "deploymentLogID": "f7d454c4-e8a9-417e-b4b4-1ca24a199eaa",
              "logLevel": "INFO",
              "logTimestamp": "2020-02-02T20:20:20.202Z",
              "text": "INFO, PACKAGE_MANAGER_STATE__UPDATE_SUCCEEDED, Package Manager state transition to PACKAGE_MANAGER_STATE__WAITING_FOR_PACKAGE due to EVENT_UPDATE_MANAGER_STATE_IDLE"
            },
            {
              "batchCounter": 0,
              "batchIndex": 1,
              "companyID": "06de9717-41f1-4467-abc7-88e0cbdf604c",
              "componentType": "PACKAGE_MANAGER",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deploymentID": "afc02a7c-7d76-4628-85a6-b7e5d9200c2a",
              "deploymentLogID": "abd454c4-e8a9-417e-b4b4-1ca24a199eaa",
              "logLevel": "INFO",
              "logTimestamp": "2020-02-02T20:20:20.202Z",
              "text": "INFO, PACKAGE_MANAGER_STATE__UPDATE_SUCCEEDED, Package Manager state transition to PACKAGE_MANAGER_STATE__WAITING_FOR_PACKAGE due to EVENT_UPDATE_MANAGER_STATE_IDLE"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of matching deployment logs, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of deployment logs.",
            "items": {
              "$ref": "#/components/schemas/DeploymentLog"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeploymentsPageResponse": {
        "example": {
          "count": 2,
          "results": [
            {
              "companyID": "4a34ac45-e47c-4134-be78-176b3f8a1a41",
              "configurationID": null,
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deploymentID": "526aeb3a-f95e-4275-8c4c-fcf23599112f",
              "deploymentMetadata": null,
              "deploymentStatus": "REQUEST_RECEIVED",
              "deploymentType": "SOFTWARE_UPDATE",
              "desiredState": "UPDATE_COMPLETED",
              "deviceID": "66c56115-2570-4f47-895a-625ef042b531",
              "endTime": "2020-02-03T20:20:20.202Z",
              "packageID": "9bd28cf1-4314-40e8-8489-52af420c6534",
              "previousDeploymentID": "b3e806d3-4097-48ee-b1c6-1ca47aadb5ed",
              "previousPackageID": "9827dc6e-6468-4168-8bb3-b8ec82593fb9",
              "rolloutID": "ca7f5e2f-b84e-458f-bb95-939f75d3a973",
              "selectiveLogConfigID": "2df02452-ef0f-412c-89ed-baad58655fcd",
              "sentToDevice": true,
              "startTime": "2020-02-02T20:20:20.202Z",
              "statusChangeReason": "",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "4a34ac45-e47c-4134-be78-176b3f8a1a41",
              "configurationID": null,
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deploymentID": "ab6aeb3a-f95e-4275-8c4c-fcf23599112f",
              "deploymentMetadata": null,
              "deploymentStatus": "REQUEST_RECEIVED",
              "deploymentType": "SOFTWARE_UPDATE",
              "desiredState": "UPDATE_COMPLETED",
              "deviceID": "66c56115-2570-4f47-895a-625ef042b531",
              "endTime": "2020-02-03T20:20:20.202Z",
              "packageID": "9bd28cf1-4314-40e8-8489-52af420c6534",
              "previousDeploymentID": "b3e806d3-4097-48ee-b1c6-1ca47aadb5ed",
              "previousPackageID": "9827dc6e-6468-4168-8bb3-b8ec82593fb9",
              "rolloutID": "ca7f5e2f-b84e-458f-bb95-939f75d3a973",
              "selectiveLogConfigID": "2df02452-ef0f-412c-89ed-baad58655fcd",
              "sentToDevice": true,
              "startTime": "2020-02-02T20:20:20.202Z",
              "statusChangeReason": "",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching deployments, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of deployments.",
            "items": {
              "$ref": "#/components/schemas/Deployment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeploymentsResponse": {
        "example": {
          "results": [
            {
              "companyID": "4a34ac45-e47c-4134-be78-176b3f8a1a41",
              "configurationID": null,
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deploymentID": "526aeb3a-f95e-4275-8c4c-fcf23599112f",
              "deploymentMetadata": null,
              "deploymentStatus": "REQUEST_RECEIVED",
              "deploymentType": "SOFTWARE_UPDATE",
              "desiredState": "UPDATE_COMPLETED",
              "deviceID": "66c56115-2570-4f47-895a-625ef042b531",
              "endTime": "2020-02-03T20:20:20.202Z",
              "packageID": "9bd28cf1-4314-40e8-8489-52af420c6534",
              "previousDeploymentID": "b3e806d3-4097-48ee-b1c6-1ca47aadb5ed",
              "previousPackageID": "9827dc6e-6468-4168-8bb3-b8ec82593fb9",
              "rolloutID": "ca7f5e2f-b84e-458f-bb95-939f75d3a973",
              "selectiveLogConfigID": "2df02452-ef0f-412c-89ed-baad58655fcd",
              "sentToDevice": true,
              "startTime": "2020-02-02T20:20:20.202Z",
              "statusChangeReason": "",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "4a34ac45-e47c-4134-be78-176b3f8a1a41",
              "configurationID": null,
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deploymentID": "ab6aeb3a-f95e-4275-8c4c-fcf23599112f",
              "deploymentMetadata": null,
              "deploymentStatus": "REQUEST_RECEIVED",
              "deploymentType": "SOFTWARE_UPDATE",
              "desiredState": "UPDATE_COMPLETED",
              "deviceID": "66c56115-2570-4f47-895a-625ef042b531",
              "endTime": "2020-02-03T20:20:20.202Z",
              "packageID": "9bd28cf1-4314-40e8-8489-52af420c6534",
              "previousDeploymentID": "b3e806d3-4097-48ee-b1c6-1ca47aadb5ed",
              "previousPackageID": "9827dc6e-6468-4168-8bb3-b8ec82593fb9",
              "rolloutID": "ca7f5e2f-b84e-458f-bb95-939f75d3a973",
              "selectiveLogConfigID": "2df02452-ef0f-412c-89ed-baad58655fcd",
              "sentToDevice": true,
              "startTime": "2020-02-02T20:20:20.202Z",
              "statusChangeReason": "",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of deployments.",
            "items": {
              "$ref": "#/components/schemas/Deployment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeviceAttributesResponse": {
        "properties": {
          "results": {
            "description": "A list of all device attributes.",
            "example": "[Blue,Green,Red]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeviceCompanyResponse": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "7f3c3e07-8e56-4c58-818e-3162e949a2db",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetDeviceConfigsByDeviceIDResponse": {
        "example": {
          "results": [
            {
              "companyID": "7d003be4-f28a-4367-b6f9-946432001800",
              "configurationID": "dea2661c-7304-4db6-be0d-373e3a61f53e",
              "configurationStatus": "ACTIVE",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deviceID": "57865465-5832-430d-9e4c-ca0874105e0e",
              "downloadURL": "example-download.url",
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "NOT_UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileID": "3bafad2f-fb8f-437e-9098-433665cfcf2d",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "uploadURL": "example-upload.url"
            },
            {
              "companyID": "7d003be4-f28a-4367-b6f9-946432001800",
              "configurationID": "aba2661c-7304-4db6-be0d-373e3a61f53e",
              "configurationStatus": "NOT_ACTIVE",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "deviceID": "57865465-5832-430d-9e4c-ca0874105e0e",
              "downloadURL": "example-download.url",
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ac1ff24cf4321a314808f4f393d00209",
                "fileName": "file3.tar",
                "fileSizeBytes": 43,
                "fileStatus": "NOT_UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileID": "3bafad2f-fb8f-437e-9098-433665cfcf2d",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "uploadURL": "example-upload.url"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of device configurations.",
            "items": {
              "$ref": "#/components/schemas/DeviceConfiguration"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetDeviceIDsByDeviceGroupIDResponse": {
        "example": {
          "results": "[9ce3f1cc-af5d-4dfb-9170-01b09367145c, f4fc834b-6a75-4cea-be62-6b4069062adc]"
        },
        "properties": {
          "results": {
            "description": "A list of deviceIDs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetImagesByPackageIDResponse": {
        "example": {
          "results": [
            {
              "companyId": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
              "custom": null,
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileFormat": "bin",
              "imageId": "f7e07e00-4def-45a8-955f-875a0542d697",
              "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
              "startAddress": 4096,
              "uptaneHashes": [
                {
                  "method": "sha256",
                  "value": "AAAA="
                }
              ],
              "uptaneImageId": "uptane-image-id",
              "version": "1.0.1"
            },
            {
              "companyId": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
              "custom": null,
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ac1ff24cf4321a314808f4f393d00209",
                "fileName": "file3.tar",
                "fileSizeBytes": 43,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileFormat": "bin",
              "imageId": "a7e07e00-4def-45a8-955f-875a0542d697",
              "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
              "startAddress": 4096,
              "uptaneHashes": [
                {
                  "method": "sha256",
                  "value": "AAAA="
                }
              ],
              "uptaneImageId": "uptane-image-id",
              "version": "1.0.1"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of images.",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetLatestSignalTimestampResponse": {
        "properties": {
          "timestamp": {
            "description": "The timestamp of the latest signal.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetLocationsLatestValueRequest": {
        "example": {
          "dimensions": [
            "deviceID"
          ],
          "filter": {
            "fields": [
              {
                "dimension": "deviceID",
                "operator": "contains",
                "values": [
                  "00301c36-7e35-ff6d-5e34-a280524666b2",
                  "78dbaec7-3c54-2cac-7cff-c68a05e99f4e"
                ]
              }
            ],
            "operator": "and"
          },
          "metrics": [
            "longitude",
            "latitude"
          ]
        },
        "properties": {
          "dimensions": {
            "description": "Specifies the dimensions to query. The queryable dimensions can be retrieved by calling 'Get Metadata for Locations'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filter": {
            "description": "A filter object that simulates a SQL WHERE clause to support flexible conditions. For now, only 'deviceID' is supported in the filter. See example payload. 'deviceID' is required. In addition, only one level of filter can be supported.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metrics": {
            "description": "Specifies the metrics to query. The queryable metrics can be retrieved by calling 'Get Metadata for Locations'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetLocationsLatestValueResponse": {
        "example": {
          "data": [
            [
              "2022-10-28T23:55:52.000Z",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              89.99,
              27.8
            ],
            [
              "2022-10-28T23:47:22.000Z",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              99.99,
              27.9
            ]
          ],
          "meta": [
            {
              "name": "__time"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "longitude"
            },
            {
              "name": "latitude"
            }
          ],
          "rows": 2
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetLocationsMetadataResponse": {
        "example": {
          "dimensions": [
            "deviceID"
          ],
          "metrics": [
            "longitude",
            "latitude"
          ]
        },
        "properties": {
          "dimensions": {
            "description": "The queryable dimensions of locations. The type of the dimension is always 'string'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metrics": {
            "description": "The queryable metrics of locations. The type of the metric is always 'float'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetLogRuleMetadataResponse": {
        "properties": {
          "activeDevices": {
            "description": "The number of devices that this log rule is currently active on",
            "example": 5,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetNotaryCollectionsResponse": {
        "items": {
          "$ref": "#/components/schemas/NotaryCollection"
        },
        "type": "array"
      },
      "GetPackageGroupsResponse": {
        "example": {
          "results": [
            {
              "approvers": "[db087484-6eef-4c26-b923-facf5af33d8c]",
              "companyID": "08013e2d-a9c6-4666-8a26-b86d97df6a02",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "testing package",
              "deviceModelID": "2fa725b3-9560-46bd-b00d-43be654038d9",
              "packageGroupID": "696d5eec-2cb3-4e11-938b-cd70f8dcc151",
              "packageGroupName": "Sibros Package Group",
              "packageIDs": "[85cab4e2-5112-479a-9fea-47f0122ed2b6]",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "approvers": "[db087484-6eef-4c26-b923-facf5af33d8c]",
              "companyID": "08013e2d-a9c6-4666-8a26-b86d97df6a02",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "validation package",
              "deviceModelID": "2fa725b3-9560-46bd-b00d-43be654038d9",
              "packageGroupID": "1a6d5eec-2cb3-4e11-938b-cd70f8dcc151",
              "packageGroupName": "Sibros Validation Package Group",
              "packageIDs": "[abcab4e2-5112-479a-9fea-47f0122ed2b6]",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of package groups.",
            "items": {
              "$ref": "#/components/schemas/PackageGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetPackageManifestEntriesByPackageIDResponse": {
        "example": [
          {
            "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
            "imageId": "cca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "imageRegionId": "91133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "packageId": "cfa0c49c-cc47-4b54-b19f-abbf86ca8576",
            "packageManifestEntryId": "7d63968c-0ca0-4f62-ab3e-3d80f496f543"
          },
          {
            "companyId": "7d8de434-c50d-4945-8a8d-98205cb6f2de",
            "imageId": "8ca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "imageRegionId": "11133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "packageId": "8fa0c49c-cc47-4b54-b19f-abbf86ca8576",
            "packageManifestEntryId": "ad63968c-0ca0-4f62-ab3e-3d80f496f543"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PackageManifestEntry"
        },
        "type": "array"
      },
      "GetPoliciesByUserIDResponse": {
        "example": {
          "results": [
            {
              "action": 10,
              "id": "4c98c0e4-a977-46f1-9f98-dfdb7c711a65",
              "resource": 40
            },
            {
              "action": 20,
              "id": "ab98c0e4-a977-46f1-9f98-dfdb7c711a65",
              "resource": 50
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of policies.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetRolesByUserIDResponse": {
        "example": {
          "results": [
            {
              "companyID": "c851cc89-3dac-4d26-8f08-d70eb5cb1723",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "7b8154ad-aa30-4d2a-93e2-ba59096d3592",
              "roleDesc": "can do it all",
              "roleName": "Admin",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "companyID": "c851cc89-3dac-4d26-8f08-d70eb5cb1723",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "8c8154ad-aa30-4d2a-93e2-ba59096d3592",
              "roleDesc": "release related tasks",
              "roleName": "Release Manager",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "results": {
            "description": "A list of all user roles.",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetSelectiveLogConfigMetadataResponse": {
        "properties": {
          "activeDevices": {
            "description": "The number of devices that this log configuration is currently active on.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetSignalsByTimeRangeRequest": {
        "example": {
          "attributeNames": [
            "name",
            "deviceID",
            "busID",
            "floatValue",
            "intValue",
            "valueType"
          ],
          "deviceIds": [
            "e189c01f-fb2c-41d5-9ccd-67ea9311238f"
          ],
          "endTime": "2022-05-12T09:00:50Z",
          "signalNames": [
            "total_can_frames",
            "test_signal"
          ],
          "startTime": "2022-05-09T09:00:50Z"
        },
        "properties": {
          "attributeNames": {
            "description": "The attributes to query.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "busId": {
            "description": "The bus ID. Optional field to filter by a specific busId in case of duplicate signal names across buses.",
            "type": "string"
          },
          "databaseType": {
            "description": "The database type.",
            "type": "number"
          },
          "deviceIds": {
            "description": "A list of device IDs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endTime": {
            "description": "A UTC timestamp in ISO-8601 format.",
            "type": "string"
          },
          "signalNames": {
            "description": "A list of signal names.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startTime": {
            "description": "A UTC timestamp in ISO-8601 format.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetSignalsByTimeRangeResponse": {
        "example": {
          "data": [
            [
              "2023-05-09T15:17:56.468Z",
              "e189c01f-fb2c-41d5-9ccd-67ea9311238f",
              "test_signal",
              "bus_0",
              "0",
              781800,
              0
            ],
            [
              "2023-05-09T15:14:56.468Z",
              "e189c01f-fb2c-41d5-9ccd-67ea9311238f",
              "test_signal",
              "bus_0",
              "0",
              781657,
              0
            ]
          ],
          "meta": [
            {
              "name": "__time"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "name"
            },
            {
              "name": "busID"
            },
            {
              "name": "valueType"
            },
            {
              "name": "floatValue"
            },
            {
              "name": "intValue"
            }
          ],
          "rows": 2
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetSignalsLatestValueRequest": {
        "example": {
          "dimensions": [
            "name",
            "deviceID",
            "busID",
            "valueType"
          ],
          "filter": {
            "fields": [
              {
                "dimension": "name",
                "operator": "contains",
                "values": [
                  "BMS_min_cell_temp",
                  "uptime_seconds",
                  "my_custom_signal_name"
                ]
              },
              {
                "dimension": "deviceID",
                "operator": "contains",
                "values": [
                  "00301c36-7e35-ff6d-5e34-a280524666b2",
                  "78dbaec7-3c54-2cac-7cff-c68a05e99f4e"
                ]
              }
            ],
            "operator": "and"
          },
          "metrics": [
            "intValue",
            "floatValue"
          ]
        },
        "properties": {
          "dimensions": {
            "description": "Specifies the dimensions to query. The queryable dimensions can be retrieved by calling 'Get Metadata for Signals'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filter": {
            "description": "A filter object that simulates a SQL WHERE clause to support flexible conditions. Currently, only 'name' and 'deviceID' are supported in the filter. See example payload. 'deviceID' is required. In addition, only one level of filter can be supported.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metrics": {
            "description": "Specifies the metrics to query. The queryable metrics can be retrieved by calling 'Get Metadata for Signals'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetSignalsLatestValueResponse": {
        "example": {
          "data": [
            [
              "2023-05-09T15:17:56.468Z",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              "BMS_min_cell_temp",
              "bus_0",
              0,
              0,
              23.4
            ],
            [
              "2023-05-09T15:10:56.468Z",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              "BMS_min_cell_temp",
              "bus_0",
              0,
              0,
              33.4
            ]
          ],
          "meta": [
            {
              "name": "__time"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "name"
            },
            {
              "name": "busID"
            },
            {
              "name": "valueType"
            },
            {
              "name": "intValue"
            },
            {
              "name": "floatValue"
            }
          ],
          "rows": 2
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetSignalsMetadataResponse": {
        "example": {
          "dimensions": [
            "name",
            "deviceID",
            "busID"
          ],
          "metrics": [
            "intValue",
            "floatValue"
          ]
        },
        "properties": {
          "dimensions": {
            "description": "The queryable dimensions of signals. The type of the dimension is always 'string'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metrics": {
            "description": "The queryable metrics of signals. The type of the metric can be 'int' or 'float', as the name indicates.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetSupportedCommandsResponse": {
        "example": {
          "commandIds": [
            100,
            101,
            102,
            200
          ]
        },
        "properties": {
          "commandIds": {
            "description": "Supported commands.",
            "items": {
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetUserFavoritesResponse": {
        "properties": {
          "templateID": {
            "description": "A unique identifier for the template.",
            "example": "824b48ca-1488-48eb-9bd4-51e2443c4bb2",
            "format": "uuid",
            "type": "string"
          },
          "templateName": {
            "description": "The name for the template",
            "example": "main-template",
            "type": "string"
          },
          "templateShared": {
            "description": "A boolean value indicating whether this template is shared.",
            "example": false,
            "type": "boolean"
          },
          "templateType": {
            "description": "The type for the template",
            "example": "dashboard",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HardwareRevision": {
        "properties": {
          "PCBID": {
            "description": "Printed Circuit Board revision ID - hardware version.",
            "example": "beta",
            "type": "string"
          },
          "assemblyID": {
            "description": "Indicates the component package ID.",
            "example": "battery",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "4b0d0934-c0b3-4812-9398-6355930879c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "controllerID": {
            "description": "The controllerID of the hardware revision.",
            "example": "f0939dee-0a13-4f28-894c-6220ff0c9382",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the hardware revision's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          },
          "ecuVariantName": {
            "description": "Indicating the display name for hardware revision",
            "example": "VCU_VCU_UDS over CAN_Level1_500",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the hardware revision.",
            "example": "22e57df2-baa0-477e-ae4d-444269630cc4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "locked": {
            "description": "A boolean value indicating whether the hardware revision can be edited.",
            "example": true,
            "type": "boolean"
          },
          "updatedAt": {
            "description": "A timestamp of the hardware revision's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          },
          "usageID": {
            "description": "A PCB can be used for multiple ECUs.",
            "example": "beta.usage-left",
            "type": "string"
          }
        },
        "required": [
          "controllerID",
          "assemblyID",
          "PCBID",
          "usageID"
        ],
        "type": "object"
      },
      "HardwareRevisionsPage": {
        "example": {
          "count": 2,
          "hardwareRevisions": [
            {
              "PCBID": "pcb1",
              "assemblyID": "assembly1",
              "companyID": "4b0d0934-c0b3-4812-9398-6355930879c7",
              "controllerID": "sibros-controller",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "22e57df2-baa0-477e-ae4d-444269630cc4",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "usageID": "usage1"
            },
            {
              "PCBID": "pcb2",
              "assemblyID": "assembly2",
              "companyID": "4b0d0934-c0b3-4812-9398-6355930879c7",
              "controllerID": "sibros-controller-2",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "id": "12e57df2-baa0-477e-ae4d-444269630cc4",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "usageID": "usage2"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching hardware revisions, disregarding limit and offset.",
            "type": "number"
          },
          "hardwareRevisions": {
            "description": "A list of hardware revisions.",
            "items": {
              "$ref": "#/components/schemas/HardwareRevision"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Hash": {
        "properties": {
          "method": {
            "$ref": "#/components/schemas/HashMethod"
          },
          "value": {
            "description": "The base-64 encoded hash value.",
            "example": "AAAA=",
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HashMethod": {
        "description": "The hash method.\n",
        "enum": [
          "INVALID",
          "sha256",
          "sha512"
        ],
        "type": "string"
      },
      "HealthStatus": {
        "description": "The status of the component",
        "enum": [
          "UP",
          "DEGRADED",
          "DOWN"
        ],
        "type": "string"
      },
      "HealthStatusResponse": {
        "properties": {
          "components": {
            "items": {
              "properties": {
                "name": {
                  "description": "The name of the component",
                  "example": "Deep Logger",
                  "type": "string"
                },
                "status": {
                  "$ref": "#/components/schemas/HealthStatus"
                },
                "sub_components": {
                  "items": {
                    "$ref": "#/components/schemas/SubComponent"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/HealthStatus"
          }
        },
        "type": "object"
      },
      "Image": {
        "properties": {
          "collection": {
            "description": "Collection name chosen during initial setup of the Image Authentication Repository on the cloud.",
            "example": "sibros_collection",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the image's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "custom": {
            "description": "Optional custom image metadata for custom update sequences. May be any JSON object. The provided content will be securely delivered to vehicles alongside the image file during OTA updates. Specify null if not needed.",
            "example": {},
            "type": "object"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "fileFormat": {
            "description": "The file format of the image.",
            "example": "bin",
            "type": "string"
          },
          "imageDisplayName": {
            "description": "The display name of image.",
            "example": "appVersion1.0",
            "type": "string"
          },
          "imageId": {
            "description": "A unique identifier for the image. Note - This differs from the uptaneImageID.",
            "example": "f7e07e00-4def-45a8-955f-875a0542d697",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "imageRegionId": {
            "description": "A unique identifier for the image region.",
            "example": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
            "format": "uuid",
            "type": "string"
          },
          "startAddress": {
            "description": "Denotes the start address that the image will be written to during the flashing sequence. This is only applied to raw binary files and will be ignored for file formats that encode a start address, e.g. Intel HEX. Specify 0 if not needed.",
            "example": 4096,
            "type": "integer"
          },
          "updatedAt": {
            "description": "A timestamp of the image's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "uptaneHashes": {
            "description": "A list of image uptane hashes.",
            "items": {
              "$ref": "#/components/schemas/Hash"
            },
            "type": "array"
          },
          "uptaneImageId": {
            "description": "The Uptane-specific image identifier.",
            "example": "F+e348pidvTXPKflaQebBzO3zN4bq9EIoM6R94Rjky0=",
            "type": "string"
          },
          "version": {
            "description": "An identifier for the image that is unique for the given ECU model and image index.",
            "example": "1.0.1",
            "type": "string"
          }
        },
        "required": [
          "uptaneImageId",
          "imageRegionId"
        ],
        "type": "object"
      },
      "ImageECUModel": {
        "properties": {
          "assemblyId": {
            "description": "Indicates the component package ID.",
            "example": "battery",
            "type": "string"
          },
          "componentId": {
            "description": "Identifies the Product type.",
            "example": "BMS",
            "type": "string"
          },
          "pcbId": {
            "description": "Printed Circuit Board revision ID - hardware version.",
            "example": "beta",
            "type": "string"
          },
          "usageId": {
            "description": "A PCB can be used for multiple ECUs.",
            "example": "beta.usage-left",
            "type": "string"
          }
        },
        "required": [
          "componentId",
          "pcbId",
          "usageId",
          "assemblyId"
        ],
        "type": "object"
      },
      "ImageMetadata": {
        "properties": {
          "custom": {
            "description": "Optional custom image metadata for custom update sequences. May be any JSON object. The provided content will be securely delivered to vehicles alongside the image file during OTA updates. Specify null if not needed.",
            "example": {},
            "type": "object"
          },
          "ecuModel": {
            "$ref": "#/components/schemas/ImageECUModel"
          },
          "fileFormat": {
            "description": "The file format of the image.",
            "example": "bin",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the image file.",
            "example": "tcu_app",
            "type": "string"
          },
          "imageDisplayName": {
            "description": "The display name of image.",
            "example": "appVersion1.0",
            "type": "string"
          },
          "imageIndex": {
            "description": "This field uniquely identifies an image for ECUs with multiple images. This value must correspond to an image region defined in the relevant device model.",
            "example": 1,
            "type": "integer"
          },
          "originVersion": {
            "description": "The version of the full image that the delta image is based on. This field is required for delta images and must be null for full images.",
            "example": "1.0.0",
            "type": "string"
          },
          "startAddress": {
            "description": "Denotes the start address that the image will be written to during the flashing sequence. This is only applied to raw binary files and will be ignored for file formats that encode a start address, e.g. Intel HEX. Specify 0 if not needed.",
            "example": 4096,
            "type": "integer"
          },
          "version": {
            "description": "An identifier for the image that is unique for the given ECU model and image index.",
            "example": "1.0.1",
            "type": "string"
          }
        },
        "required": [
          "version",
          "startAddress",
          "fileFormat",
          "fileName",
          "ecuModel",
          "imageIndex"
        ],
        "type": "object"
      },
      "ImageRegion": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "810dcd8f-3984-40d5-97f4-9fe353990f89",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the image region's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          },
          "dependencies": {
            "description": "A list of image region IDs that the image region depends on.",
            "example": "[fd73d717-6e10-4b9f-81ff-2d709e452fed]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "forcedUpdate": {
            "description": "A boolean value indicating whether this image region needs to be force updated.",
            "example": true,
            "type": "boolean"
          },
          "hardwareRevisionID": {
            "description": "A unique identifier for the image region's hardware revision.",
            "example": "3a49b591-c96a-4890-95b4-0fe868f40f38",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the image region.",
            "example": "a15bfde2-d8a0-46af-81ca-7af75302eac6",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "index": {
            "description": "The index in the image region.",
            "example": 0,
            "type": "integer"
          },
          "locked": {
            "description": "A boolean value indicating whether the image region can be edited.",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "The name of the image region.",
            "example": "updateable application region",
            "type": "string"
          },
          "type": {
            "description": "The type of the image region.",
            "example": "Application",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the image region's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "hardwareRevisionID",
          "index",
          "type",
          "name"
        ],
        "type": "object"
      },
      "ImageRegionsPage": {
        "example": {
          "count": 2,
          "imageRegions": [
            {
              "companyID": "810dcd8f-3984-40d5-97f4-9fe353990f89",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "dependencies": "[fd73d717-6e10-4b9f-81ff-2d709e452fed]",
              "forcedUpdate": true,
              "hardwareRevisionID": "3a49b591-c96a-4890-95b4-0fe868f40f38",
              "id": "a15bfde2-d8a0-46af-81ca-7af75302eac6",
              "index": 0,
              "name": "updateable application region",
              "type": "Application",
              "updatedAt": "2022-02-02T20:20:20.202Z"
            },
            {
              "companyID": "810dcd8f-3984-40d5-97f4-9fe353990f89",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "dependencies": "[]",
              "forcedUpdate": true,
              "hardwareRevisionID": "3a49b591-c96a-4890-95b4-0fe868f40f38",
              "id": "b15bfde2-d8a0-46af-81ca-7af75302eac6",
              "index": 0,
              "name": "updateable bootloader region",
              "type": "Bootloader",
              "updatedAt": "2022-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching image regions, disregarding limit and offset.",
            "type": "number"
          },
          "imageRegions": {
            "description": "A list of image regions.",
            "items": {
              "$ref": "#/components/schemas/ImageRegion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImagesPage": {
        "example": {
          "count": 2,
          "images": [
            {
              "companyId": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
              "custom": null,
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileFormat": "bin",
              "imageId": "f7e07e00-4def-45a8-955f-875a0542d697",
              "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
              "startAddress": 4096,
              "uptaneHashes": [
                {
                  "method": "sha256",
                  "value": "AAAA="
                }
              ],
              "uptaneImageId": "uptane-image-id",
              "version": "1.0.1"
            },
            {
              "companyId": "48a1d6e5-2611-4d0c-b331-9d6df3657fef",
              "custom": null,
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ac1ff24cf4321a314808f4f393d00209",
                "fileName": "file3.tar",
                "fileSizeBytes": 43,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileFormat": "bin",
              "imageId": "a7e07e00-4def-45a8-955f-875a0542d697",
              "imageRegionId": "affa6ac9-89d3-479c-ac00-d54da7b0857c",
              "startAddress": 4096,
              "uptaneHashes": [
                {
                  "method": "sha256",
                  "value": "AAAA="
                }
              ],
              "uptaneImageId": "uptane-image-id",
              "version": "1.0.1"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching images, disregarding limit and offset.",
            "type": "number"
          },
          "images": {
            "description": "A list of images.",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InputOptions": {
        "example": {
          "enumValues": null,
          "max": null,
          "min": null,
          "pattern": null,
          "required": null,
          "stringType": null
        },
        "properties": {
          "enumValues": {
            "description": "The enumerated values of the input options.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "max": {
            "description": "The maximum of the input options.",
            "type": "number"
          },
          "min": {
            "description": "The minimum of the input options.",
            "type": "number"
          },
          "pattern": {
            "description": "The pattern of the input options.",
            "type": "string"
          },
          "required": {
            "description": "A boolean value indicating whether the input options are required.",
            "type": "boolean"
          },
          "stringType": {
            "description": "The string type of the input options.",
            "enum": [
              "PLAIN",
              "HEX"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "J1939FaultCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogConditionProperties"
          },
          {
            "properties": {
              "bus_id": {
                "description": "ID of the J1939 CAN bus where the signal originates.",
                "type": "number"
              },
              "fault_mode_id": {
                "description": "Fault Mode of the signal for the log condition. Refer to Fault Mode Map for details",
                "type": "integer"
              },
              "message_id": {
                "description": "Unique identifier for the J1939 CAN signal message.",
                "type": "string"
              },
              "name": {
                "description": "Name of the J1939 fault signal",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "example": {
          "bus_id": 0,
          "compare_value": 1,
          "fault_mode_id": 3,
          "message_id": 2120922,
          "name": "EngineSpeed",
          "operator": ">",
          "source_type": "J1939_FAULT"
        },
        "type": "object"
      },
      "J1939FaultMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogMessageProperties"
          },
          {
            "properties": {
              "bus_id": {
                "description": "The CAN bus ID of the J1939 CAN message.",
                "type": "number"
              },
              "fault_mode_id": {
                "description": "Fault Mode of the signal for the log condition. A fault mode ID cannot be more than 31 (5 bits)",
                "type": "integer"
              },
              "log_trigger_settings": {
                "properties": {
                  "onchange_settings": {
                    "properties": {
                      "threshold": {
                        "description": "Minimum signal change for logging. It can only be set to 0 for the case of J1939_FAULT",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "message_id": {
                "description": "Unique identifier for the CAN signal message.",
                "type": "string"
              },
              "name": {
                "description": "Name of the J1939 CAN signal, matching the DBC file.",
                "type": "string"
              }
            }
          }
        ],
        "example": {
          "bus_id": 0,
          "fault_mode_id": 4,
          "frequency_ms": 200,
          "log_trigger_settings": {
            "onchange_settings": {
              "threshold": 0
            }
          },
          "message_id": 2120922,
          "name": "EngineSpeed"
        }
      },
      "LiveLogConfigRequestBody": {
        "properties": {
          "liveLogConfig": {
            "description": "The live log configuration of the device, formatted as {interval1,dbcID1,interval2,dbcID2...}.",
            "example": "{0,100,0,104}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocalDirectory": {
        "properties": {
          "directoryPath": {
            "description": "The path of the directory.",
            "example": "local/usr/bin",
            "type": "string"
          },
          "fileExtension": {
            "description": "The prefix of the filename",
            "example": ".json",
            "type": "string"
          },
          "filePrefix": {
            "description": "The prefix of the file",
            "example": "data",
            "type": "string"
          },
          "name": {
            "description": "The name of the file.",
            "example": "data",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogCondition": {
        "discriminator": {
          "mapping": {
            "CAN_SIGNAL": "#/components/schemas/CANSignalCondition",
            "J1939_FAULT": "#/components/schemas/J1939FaultCondition",
            "NAME_VALUE": "#/components/schemas/NameValueCondition",
            "SIBROS": "#/components/schemas/SibrosCondition"
          },
          "propertyName": "source_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CANSignalCondition"
          },
          {
            "$ref": "#/components/schemas/NameValueCondition"
          },
          {
            "$ref": "#/components/schemas/SibrosCondition"
          },
          {
            "$ref": "#/components/schemas/J1939FaultCondition"
          }
        ]
      },
      "LogConditionOperator": {
        "description": "The operator that should be used when evaluating a given condition.\n",
        "enum": [
          "==",
          "!=",
          ">",
          "<",
          ">=",
          "<=",
          "Within",
          "On Change"
        ],
        "type": "string"
      },
      "LogMessage": {
        "discriminator": {
          "mapping": {
            "CAN": "#/components/schemas/CANLogMessage",
            "CAN_SIGNAL": "#/components/schemas/CANSignalLogMessage",
            "J1939_FAULT": "#/components/schemas/J1939FaultMessage",
            "NAME_VALUE": "#/components/schemas/NameValueLogMessage",
            "SIBROS": "#/components/schemas/SibrosLogMessage"
          },
          "propertyName": "source_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CANSignalLogMessage"
          },
          {
            "$ref": "#/components/schemas/CANLogMessage"
          },
          {
            "$ref": "#/components/schemas/NameValueLogMessage"
          },
          {
            "$ref": "#/components/schemas/SibrosLogMessage"
          },
          {
            "$ref": "#/components/schemas/J1939FaultMessage"
          }
        ]
      },
      "LogMessageTriggerSettings": {
        "description": "These settings are used to denote what type of triggers should be used to log data to the cloud. The default is a periodic trigger if this field is omitted",
        "properties": {
          "onchange_settings": {
            "$ref": "#/components/schemas/OnChangeThresholdSettings"
          }
        },
        "type": "object"
      },
      "LogRule": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "05d950be-f0de-4dcd-a545-f98cd7f9dc28",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "conditions": {
            "description": "An array of objects denoting which conditions must be met in order to log the data in the messages field. All objects in the array will be evaluated as an AND, meaning that the data will only be logged if all the conditions are met.",
            "items": {
              "$ref": "#/components/schemas/LogCondition"
            },
            "type": "array"
          },
          "config_type": {
            "$ref": "#/components/schemas/ConfigType"
          },
          "createdAt": {
            "description": "A timestamp of the log rule's creation.",
            "example": "2022-02-03T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "decoderMappingID": {
            "description": "The decoder mapping ID associated with the log rule.",
            "example": "16l840ee-f0de-4dcd-a545-f98cd8g9dc34",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "The description of the log rule.",
            "example": "This is the default log rule for Sibros devices.",
            "type": "string"
          },
          "fallbackMediumDelay": {
            "description": "The fallback medium delay of the log rule.",
            "example": 32,
            "type": "integer"
          },
          "fileUploadMedium": {
            "description": "The file upload medium of the log rule.",
            "example": "WIFI",
            "type": "string"
          },
          "files": {
            "description": "The onboard files to log when the trigger conditions are met. This field is interchangeable with the messages field and is used in conjunction with the logRuleDataType field. When logRuleDataType is set to TYPE_2, this instructs the device to upload all local files on the device when the condition is met.",
            "items": {
              "$ref": "#/components/schemas/LoggedLocalDirectory"
            },
            "type": "array"
          },
          "hidden": {
            "description": "This field is used to denote whether or not the entity is hidden.",
            "example": true,
            "type": "boolean"
          },
          "isArchived": {
            "description": "The archived status of the log rule. You can restore an archived log rule if needed.",
            "example": true,
            "type": "boolean"
          },
          "isDisabled": {
            "description": "This field is used to denote whether or not the entity is disabled.",
            "example": true,
            "type": "boolean"
          },
          "locked": {
            "description": "This field is used to denote whether or not the entity can be edited. This field gets set to true once it is linked to a log configuration and that log configuration is deployed to a vehicle. Up until the point that this log rule is a part of a deployment, it can be updated as needed to change the settings and/or the data being logged.",
            "example": true,
            "type": "boolean"
          },
          "logRuleDataType": {
            "$ref": "#/components/schemas/LogRuleDataType"
          },
          "logRuleID": {
            "description": "A unique identifier for the log rule.",
            "example": "16d950be-e0de-5dcd-a545-f98cd7f9dc239",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "messages": {
            "description": "An array of objects denoting which messages/signals should be logged when the conditions above are met.",
            "items": {
              "$ref": "#/components/schemas/LogMessage"
            },
            "type": "array"
          },
          "milliseconds_to_log_after": {
            "description": "For event_configurations, the time to log data after the trigger condition has been met.",
            "example": 5,
            "format": "int64",
            "type": "integer"
          },
          "milliseconds_to_log_before": {
            "description": "For event configurations, the time to log data before the trigger condition has been met.",
            "example": 15,
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The name of the log rule. This value must be unique across all log rules created with a particular decoder mapping ID.",
            "example": "Sibros Log Rule",
            "type": "string"
          },
          "outputType": {
            "$ref": "#/components/schemas/OutputType"
          },
          "splitSettings": {
            "$ref": "#/components/schemas/SplitSettings"
          },
          "status": {
            "$ref": "#/components/schemas/LogRuleStatus"
          },
          "statusReason": {
            "description": "A description for the log rule status.",
            "example": "testing",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the last time the log rule was updated.",
            "example": "2022-02-03T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "uploadTrigger": {
            "$ref": "#/components/schemas/UploadTrigger"
          }
        },
        "required": [
          "name",
          "decoderMappingID"
        ],
        "type": "object"
      },
      "LogRuleDataType": {
        "description": "This is used to differentiate between logging messages/signals and local files on the device.\n| Enum Value | Description |\n| --- | --- |\n| TYPE_1 | Indicates that the log rule concerns data that can be either live streamed to cloud or logged in a file locally. Such types of data include CAN messages and custom signals. |\n| TYPE_2 | Indicates that the log rule concerns data that is logged on the device as files and cannot be livestreamed to the cloud. Such data include generated system files on the device. When this is selected, `outputType` for the log rule must be set to `FILE_LOG`. |\n",
        "enum": [
          "TYPE_1",
          "TYPE_2"
        ],
        "type": "string"
      },
      "LogRulePatch": {
        "properties": {
          "description": {
            "description": "The new description of the log rule.",
            "example": "This is the default log rule for Sibros devices.",
            "type": "string"
          },
          "isArchived": {
            "description": "The archived status of the log rule.",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "The new name of the log rule.",
            "example": "Sibros_Log_Rule",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogRuleStatus": {
        "description": "The log rule status.\n",
        "enum": [
          "UNKNOWN",
          "INVALID",
          "VALID"
        ],
        "type": "string"
      },
      "LogRulesPage": {
        "example": {
          "count": 4,
          "logRules": [
            {
              "companyID": "16d950be-e0de-5dcd-a545-f98cd7f9dc239",
              "conditions": [
                {
                  "bus_id": 1,
                  "compare_value": 5,
                  "is_extended": false,
                  "is_multiplexed": true,
                  "message_id": 16,
                  "multiplexer_value": 1,
                  "name": "BMS_SOC",
                  "operator": "<="
                }
              ],
              "config_type": "log_configuration",
              "createdAt": "2020-02-03T20:20:20.202Z",
              "logRuleID": "05d950be-f0de-4dcd-a545-f98cd7f9dc28",
              "messages": [
                {
                  "bus_id": 0,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "message_id": 64,
                  "name": "BMS_CHARGE_STATUS",
                  "source_type": "CAN_SIGNAL"
                },
                {
                  "bus_id": 1,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "is_multiplexed": true,
                  "message_id": 16,
                  "multiplexer_value": 1,
                  "name": "BMS_SOC",
                  "source_type": "CAN_SIGNAL"
                },
                {
                  "bus_id": 2,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "message_id": 16,
                  "name": "BMS_Status",
                  "source_type": "CAN"
                },
                {
                  "frequency_ms": 10,
                  "name": "gnss.latitude",
                  "source_type": "SIBROS"
                },
                {
                  "frequency_ms": 0,
                  "name": "gnss.latitude",
                  "source_type": "SIBROS"
                },
                {
                  "frequency_ms": 0,
                  "name": "dl.average_compress_ratio",
                  "source_type": "SIBROS"
                }
              ],
              "name": "Conditional Log Rule",
              "outputType": "LIVE_LOG",
              "updatedAt": "2020-02-03T20:20:20.202Z"
            },
            {
              "companyID": "16d950be-e0de-5dcd-a545-f98cd7f9dc239",
              "conditions": [
                {
                  "bus_id": 1,
                  "compare_value": 5,
                  "is_extended": false,
                  "is_multiplexed": true,
                  "message_id": 16,
                  "multiplexer_value": 1,
                  "name": "BMS_SOC",
                  "operator": "<="
                }
              ],
              "config_type": "event_configuration",
              "createdAt": "2020-02-03T20:20:20.202Z",
              "logRuleID": "16l840ee-f0de-4dcd-a545-f98cd8g9dc34",
              "messages": [
                {
                  "bus_id": 0,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "message_id": 64,
                  "name": "BMS_CHARGE_STATUS",
                  "source_type": "CAN_SIGNAL"
                },
                {
                  "bus_id": 1,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "is_multiplexed": true,
                  "message_id": 16,
                  "multiplexer_value": 1,
                  "name": "BMS_SOC",
                  "source_type": "CAN_SIGNAL"
                },
                {
                  "bus_id": 2,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "message_id": 16,
                  "name": "BMS_Status",
                  "source_type": "CAN"
                },
                {
                  "frequency_ms": 10,
                  "name": "gnss.latitude",
                  "source_type": "SIBROS"
                },
                {
                  "frequency_ms": 0,
                  "name": "gnss.latitude",
                  "source_type": "SIBROS"
                },
                {
                  "frequency_ms": 0,
                  "name": "dl.average_compress_ratio",
                  "source_type": "SIBROS"
                }
              ],
              "milliseconds_to_log_after": 1000,
              "milliseconds_to_log_before": 1000,
              "name": "Event Log Rule",
              "outputType": "LIVE_LOG",
              "updatedAt": "2020-02-03T20:20:20.202Z"
            },
            {
              "companyID": "16d950be-e0de-5dcd-a545-f98cd7f9dc239",
              "config_type": "log_configuration",
              "createdAt": "2020-02-03T20:20:20.202Z",
              "logRuleDatType": "TYPE_1",
              "logRuleID": "05d950be-f0de-4dcd-a545-f98cd7f9dc28",
              "messages": [
                {
                  "bus_id": 0,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "message_id": 64,
                  "name": "BMS_CHARGE_STATUS",
                  "source_type": "CAN_SIGNAL"
                },
                {
                  "bus_id": 1,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "is_multiplexed": true,
                  "message_id": 16,
                  "multiplexer_value": 1,
                  "name": "BMS_SOC",
                  "source_type": "CAN_SIGNAL"
                },
                {
                  "bus_id": 2,
                  "frequency_ms": 10,
                  "is_extended": false,
                  "message_id": 16,
                  "name": "BMS_Status",
                  "source_type": "CAN"
                }
              ],
              "name": "File Log CAN Network Signals Unconditionally",
              "outputType": "FILE_LOG",
              "updatedAt": "2020-02-03T20:20:20.202Z",
              "uploadTrigger": "AUTOMATIC_UPLOAD"
            },
            {
              "companyID": "16d950be-e0de-5dcd-a545-f98cd7f9dc239",
              "conditions": [
                {
                  "bus_id": 1,
                  "compare_value": 5,
                  "is_extended": false,
                  "is_multiplexed": true,
                  "message_id": 16,
                  "multiplexer_value": 1,
                  "name": "BMS_SOC",
                  "operator": "<="
                }
              ],
              "config_type": "log_configuration",
              "createdAt": "2020-02-03T20:20:20.202Z",
              "files": {
                "directoryPath": "local/bin",
                "fileExtension": "pdf",
                "filePrefix": "tst_"
              },
              "logRuleDatType": "TYPE_2",
              "logRuleID": "05d950be-f0de-4dcd-a545-f98cd7f9dc28",
              "name": "File Log Local Files when BMS_SOC is <= 5",
              "outputType": "FILE_LOG",
              "updatedAt": "2020-02-03T20:20:20.202Z",
              "uploadTrigger": "AUTOMATIC_UPLOAD"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching log rules, disregarding limit and offset.",
            "type": "number"
          },
          "logRules": {
            "description": "A list of log rules.",
            "items": {
              "$ref": "#/components/schemas/LogRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LoggedLocalDirectory": {
        "properties": {
          "directoryPath": {
            "description": "This is the local path of the file on the device.",
            "example": "local/bin",
            "type": "string"
          },
          "ecuModel": {
            "$ref": "#/components/schemas/ECUModel"
          },
          "fileExtension": {
            "description": "Within the context of a particular directory, this will instruct the device to upload all files in that directory with this specified extension.",
            "example": "pdf",
            "type": "string"
          },
          "filePrefix": {
            "description": "This field can be any regex pattern to identify files in a particular directory. So any file starting with â€œtst_â€ inside the â€œlocal/bin/â€ directory with a pdf extension will get uploaded to the cloud. This field can also be empty, instructing the device to upload all PDF files inside the specified directory path.",
            "example": "tst_",
            "type": "string"
          },
          "name": {
            "description": "The name of the logged local directory.",
            "example": "Sibros Directory",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoggingState": {
        "description": "The current logging state of the device\n",
        "enum": [
          "INVALID",
          "ENABLED",
          "DISABLED"
        ],
        "type": "string"
      },
      "MasterToken": {
        "example": {
          "companyId": "27c0a54b-ff02-4a27-9427-209691800d6e",
          "createdAt": "2020-02-02T20:20:20.202Z",
          "description": "testing",
          "key": "47a3ade680ce5bff",
          "secret": "f4cd9403e8b882082625ec07b0e50f",
          "updatedAt": "2020-02-02T20:20:20.202Z",
          "updatedBy": "63b4bae4-edb5-46d5-a79c-48051e18edbd",
          "userId": "1bd8d299-b96f-491c-bfb0-9cb55b3ede14"
        },
        "properties": {
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the master token's creation.",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The description of the master token.",
            "type": "string"
          },
          "key": {
            "description": "The master token key.",
            "type": "string"
          },
          "secret": {
            "description": "The master token secret.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the master token's latest update.",
            "readOnly": true,
            "type": "string"
          },
          "updatedBy": {
            "description": "The user who updated the master token.",
            "readOnly": true,
            "type": "string"
          },
          "userId": {
            "description": "The user who created the master token.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "key",
          "secret",
          "companyId"
        ],
        "type": "object"
      },
      "NameValueCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogConditionProperties"
          },
          {
            "properties": {
              "name": {
                "description": "Name of the named value in the Data Map Custom Signals section.",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "example": {
          "compare_value": 5,
          "name": "number_of_packets",
          "operator": "==",
          "source_type": "NAME_VALUE"
        },
        "type": "object"
      },
      "NameValueLogMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogMessageProperties"
          },
          {
            "properties": {
              "log_trigger_settings": {
                "properties": {
                  "onchange_settings": {
                    "properties": {
                      "threshold": {
                        "description": "Minimum value change for logging.",
                        "type": "number"
                      },
                      "threshold_type": {
                        "description": "Type of threshold, currently only 'ABSOLUTE' is supported",
                        "enum": [
                          "ABSOLUTE"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "Name of the custom signal in the data map.",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "example": {
          "frequency_ms": 200,
          "log_trigger_settings": {
            "onchange_settings": {
              "threshold": 1,
              "threshold_type": "ABSOLUTE"
            }
          },
          "name": "number_of_packets",
          "source_type": "NAME_VALUE"
        },
        "type": "object"
      },
      "NoResponse": {
        "type": "object"
      },
      "NotaryCollection": {
        "properties": {
          "collectionName": {
            "description": "The name of the notary collection.",
            "example": "default",
            "type": "string"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "notaryCollectionID": {
            "description": "A unique identifier for the notary collection.",
            "example": "994b3f53-ef32-48cd-b0bb-730c98fe0ecb",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OnChangeThresholdSettings": {
        "description": "This type of trigger will upload data when the value of the signal changes by threshold value and is only available for CAN_SIGNAL, NAME_VALUE, and SIBROS source type. If the signal does not change within the frequency_ms provided, it will be uploaded regardless.",
        "properties": {
          "threshold": {
            "description": "This threshold value is the minimum amount the signal value must change before it is live logged to cloud. This is used in conjunction with the frequency_ms as whichever occurs first will trigger data logging to the cloud.",
            "example": 0,
            "format": "double",
            "type": "number"
          },
          "threshold_type": {
            "$ref": "#/components/schemas/ThresholdType"
          }
        },
        "type": "object"
      },
      "OutputType": {
        "default": "LIVE_LOG",
        "description": "This field represents an enum that controls whether data is logged live to the cloud or logged to a file and uploaded at a later date. By default, this field will be set to LIVE_LOG.\n| Enum Value | Description |\n| --- | --- |\n| FILE_LOG | Indicates that the data captured by the log rule is live streamed to the cloud. Note that this can only be done on TYPE_1 data. |\n| LIVE_LOG | Indicates that the data captured by the log rule is stored to a file locally and uploaded to the cloud at a later date. |\n",
        "enum": [
          "FILE_LOG",
          "LIVE_LOG"
        ],
        "type": "string"
      },
      "Package": {
        "properties": {
          "approvers": {
            "description": "A list of package approvers.",
            "items": {
              "$ref": "#/components/schemas/PackageApprover"
            },
            "type": "array"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the package's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the associated decoder mapping.",
            "example": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
            "format": "uuid",
            "type": "string"
          },
          "downloadURL": {
            "deprecated": true,
            "description": "The download URL.",
            "example": "example-download.url",
            "type": "string"
          },
          "errorDescription": {
            "description": "A description of error(s) from packages that have an error status.",
            "example": "Unable to open the zip file",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "internalNotes": {
            "description": "Internal notes.",
            "example": "For internal use only",
            "type": "string"
          },
          "manifest": {
            "description": "The package manifest.",
            "example": "manifest",
            "type": "string"
          },
          "packageGroupID": {
            "description": "A unique identifier for the package group. Refers to the package group resource.",
            "example": "d53bdee4-d51a-4ac5-840c-f34d03c2ba08",
            "format": "uuid",
            "type": "string"
          },
          "packageGroupName": {
            "description": "The name of the package group.",
            "example": "Sibros Package",
            "maxLength": 64,
            "type": "string"
          },
          "packageID": {
            "description": "A unique identifier for the package. An ID will be generated every time a package is created.",
            "example": "b658cf59-7877-4a2d-be6b-f22e78d87665",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "packageStatus": {
            "$ref": "#/components/schemas/PackageStatus"
          },
          "packageVersion": {
            "description": "The version of the package.",
            "example": 1.1,
            "maxLength": 64,
            "type": "string"
          },
          "releaseCandidate": {
            "description": "A boolean value indicating whether a package is a release candidate or not.",
            "example": false,
            "type": "boolean"
          },
          "releaseNotes": {
            "description": "Information regarding releases.",
            "example": "Bug fixes and general improvements",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the package's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "uploadURL": {
            "deprecated": true,
            "description": "The upload URL.",
            "example": "example-upload.url",
            "type": "string"
          },
          "vcsInfo": {
            "description": "Information about changes between versions.",
            "example": 1.1,
            "type": "string"
          }
        },
        "required": [
          "packageGroupID",
          "packageGroupName",
          "packageVersion",
          "vcsInfo",
          "releaseNotes"
        ],
        "type": "object"
      },
      "PackageApprovalRequest": {
        "properties": {
          "approvalStatus": {
            "$ref": "#/components/schemas/PackageApprovalStatus"
          }
        },
        "type": "object"
      },
      "PackageApprovalStatus": {
        "description": "The current approval status of the package associated with the approver.\n",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED"
        ],
        "type": "string"
      },
      "PackageApprover": {
        "description": "PackageApprover represents an approver of a package",
        "properties": {
          "approverID": {
            "description": "The internal ID of the user who acts as approver.",
            "example": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the package approver's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PackageApprovalStatus"
          },
          "updatedAt": {
            "description": "A timestamp of the package approver's latest update.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "approverID"
        ],
        "type": "object"
      },
      "PackageAttachment": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "b0eae148-c2ce-4983-9e5b-0e8db9e85783",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the package attachment's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "packageAttachmentID": {
            "description": "A unique identifier for the package attachment.",
            "example": "c758cf59-7877-4a2d-be6b-f22e78d87665",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "packageID": {
            "description": "A unique identifier for the package.",
            "example": "0ebb1275-0e2f-4dc3-928c-4de38fe461e1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the package attachment's latest update.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageAttachmentsPage": {
        "example": {
          "count": 1,
          "packageAttachments": [
            {
              "companyID": "9a0dcd8f-3984-40d5-97f4-9fe353990f89",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "file": {
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "uploadURL": "example-upload.url"
              },
              "packageAttachmentID": "c25bfde2-d8a0-46af-81ca-7af75302eac6",
              "packageID": "4b49b591-c96a-4890-95b4-0fe868f40f38",
              "updatedAt": "2022-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching package attachments, disregarding limit and offset.",
            "type": "number"
          },
          "packageAttachments": {
            "description": "A list of package attachments.",
            "items": {
              "$ref": "#/components/schemas/PackageAttachment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PackageFile": {
        "example": {
          "companyID": "81641cfa-729a-477a-9dae-e4d9f3ddd84d",
          "createdAt": "2020-02-02T20:20:20.202Z",
          "downloadURL": "example-download.url",
          "file": {
            "createdAt": "2020-02-02T20:20:20.202Z",
            "downloadURL": "example-download.url",
            "fileHash": "ab1ff24cf4321a314808f4f393d00209",
            "fileName": "file2.tar",
            "fileSizeBytes": 67,
            "fileStatus": "NOT_UPLOADED",
            "path": "/some/path",
            "uploadURL": "example-upload.url"
          },
          "fileID": "6cfd8a9b-48f0-480b-ab65-20dc4c26234c",
          "packageFileID": "142677bd-f94d-4d61-a314-659cdf81bf7a",
          "packageID": "7f1e1787-730b-4871-8835-791d6d7cdfd9",
          "updatedAt": "2020-02-02T20:20:20.202Z",
          "uploadURL": "example-upload.url"
        },
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the package file's creation.",
            "type": "string"
          },
          "downloadURL": {
            "deprecated": true,
            "description": "The download/upload URL.",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The package file."
          },
          "fileID": {
            "description": "A unique identifier for the file.",
            "type": "string"
          },
          "packageFileID": {
            "description": "A unique identifier for the package file.",
            "type": "string"
          },
          "packageID": {
            "description": "A unique identifier for the package.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the package file's latest update.",
            "type": "string"
          },
          "uploadURL": {
            "deprecated": true,
            "description": "The download/upload URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageGroup": {
        "properties": {
          "approvers": {
            "description": "A list of package group approvers.",
            "example": "[db087484-6eef-4c26-b923-facf5af33d8c]",
            "items": {
              "$ref": "#/components/schemas/PackageGroupApprover"
            },
            "type": "array"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "08013e2d-a9c6-4666-8a26-b86d97df6a02",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the package group's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "A description of the package group.",
            "example": "testing package",
            "type": "string"
          },
          "deviceModelID": {
            "description": "A unique identifier for the device model of the package group.",
            "example": "2fa725b3-9560-46bd-b00d-43be654038d9",
            "format": "uuid",
            "type": "string"
          },
          "packageGroupID": {
            "description": "A unique identifier for the package group. Refers to the package group resource. An ID will be generated every time a package group is created.",
            "example": "696d5eec-2cb3-4e11-938b-cd70f8dcc151",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "packageGroupName": {
            "description": "The name of the package group.",
            "example": "Sibros Package Group",
            "maxLength": 64,
            "type": "string"
          },
          "packageIDs": {
            "description": "IDs of all package versions that were created in this package group.",
            "example": "[85cab4e2-5112-479a-9fea-47f0122ed2b6]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "A timestamp of the package group's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "packageGroupName",
          "description",
          "packageIDs"
        ],
        "type": "object"
      },
      "PackageGroupApprover": {
        "properties": {
          "approverID": {
            "description": "The ID of the user who approves the package group.",
            "example": "6bc840ae-3ee3-4636-8148-bee793009ffb",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "approverID"
        ],
        "type": "object"
      },
      "PackageGroupsPage": {
        "example": {
          "count": 5,
          "packageGroups": [
            {
              "approvers": "[db087484-6eef-4c26-b923-facf5af33d8c]",
              "companyID": "08013e2d-a9c6-4666-8a26-b86d97df6a02",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "testing package",
              "deviceModelID": "2fa725b3-9560-46bd-b00d-43be654038d9",
              "packageGroupID": "696d5eec-2cb3-4e11-938b-cd70f8dcc151",
              "packageGroupName": "Sibros Package Group",
              "packageIDs": "[85cab4e2-5112-479a-9fea-47f0122ed2b6]",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            },
            {
              "approvers": "[db087484-6eef-4c26-b923-facf5af33d8c]",
              "companyID": "08013e2d-a9c6-4666-8a26-b86d97df6a02",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "description": "validation package",
              "deviceModelID": "2fa725b3-9560-46bd-b00d-43be654038d9",
              "packageGroupID": "196d5eec-2cb3-4e11-938b-cd70f8dcc151",
              "packageGroupName": "Sibros Validation Package Group",
              "packageIDs": "[abcab4e2-5112-479a-9fea-47f0122ed2b6]",
              "updatedAt": "2020-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching package groups, disregarding limit and offset.",
            "type": "number"
          },
          "packageGroups": {
            "description": "A list of package groups.",
            "items": {
              "$ref": "#/components/schemas/PackageGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PackageManifestEntries": {
        "example": [
          {
            "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
            "imageId": "cca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "imageRegionId": "91133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "packageId": "cfa0c49c-cc47-4b54-b19f-abbf86ca8576"
          },
          {
            "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
            "imageId": "1ca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "imageRegionId": "31133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "packageId": "2fa0c49c-cc47-4b54-b19f-abbf86ca8576"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PackageManifestEntry"
        },
        "type": "array"
      },
      "PackageManifestEntriesPage": {
        "example": {
          "count": 2,
          "results": [
            {
              "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
              "imageId": "cca26b54-2aca-4b50-aa78-91e09d0bcc1f",
              "imageRegionId": "91133a5d-0b9b-446d-ada0-84133fb4cc9b",
              "packageId": "cfa0c49c-cc47-4b54-b19f-abbf86ca8576"
            },
            {
              "companyId": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
              "imageId": "1ca26b54-2aca-4b50-aa78-91e09d0bcc1f",
              "imageRegionId": "31133a5d-0b9b-446d-ada0-84133fb4cc9b",
              "packageId": "2fa0c49c-cc47-4b54-b19f-abbf86ca8576"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching package manifest entries.",
            "example": 2,
            "type": "integer"
          },
          "results": {
            "description": "A list of package manifest entries.",
            "items": {
              "$ref": "#/components/schemas/PackageManifestEntry"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PackageManifestEntry": {
        "properties": {
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "6d8de434-c50d-4945-8a8d-98205cb6f2de",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "imageId": {
            "description": "A unique identifier for the image.",
            "example": "cca26b54-2aca-4b50-aa78-91e09d0bcc1f",
            "format": "uuid",
            "type": "string"
          },
          "imageRegionId": {
            "description": "A unique identifier for the image region.",
            "example": "91133a5d-0b9b-446d-ada0-84133fb4cc9b",
            "format": "uuid",
            "type": "string"
          },
          "packageId": {
            "description": "A unique identifier for the package.",
            "example": "cfa0c49c-cc47-4b54-b19f-abbf86ca8576",
            "format": "uuid",
            "type": "string"
          },
          "packageManifestEntryId": {
            "description": "A unique identifier for the package manifest entry.",
            "example": "7d63968c-0ca0-4f62-ab3e-3d80f496f543",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "imageId",
          "packageId",
          "imageRegionId"
        ],
        "type": "object"
      },
      "PackageResponse": {
        "example": {
          "approvers": [
            {
              "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "status": "PENDING",
              "updatedAt": "2022-02-02T20:20:20.202Z"
            }
          ],
          "companyID": "659e11aa-f6a0-4db4-9aab-d6405e09cea8",
          "createdAt": "2020-02-02T20:20:20.202Z",
          "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
          "downloadURL": "example-download.url",
          "errorDescription": "some description",
          "file": {
            "createdAt": "2020-02-02T20:20:20.202Z",
            "downloadURL": "example-download.url",
            "fileHash": "ab1ff24cf4321a314808f4f393d00209",
            "fileName": "file2.tar",
            "fileSizeBytes": 67,
            "fileStatus": "UPLOADED",
            "path": "/some/path",
            "uploadURL": "example-upload.url"
          },
          "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
          "internalNotes": "some notes",
          "manifest": "manifest",
          "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
          "packageGroupName": "Sibros Package",
          "packageID": "b658cf59-7877-4a2d-be6b-f22e78d87665",
          "packageStatus": "IN_APPROVAL",
          "packageVersion": "1.1",
          "releaseCandidate": "string",
          "releaseNotes": "release notes",
          "updatedAt": "2020-02-02T20:20:20.202Z",
          "uploadURL": "example-upload.url",
          "vcsInfo": "1.1"
        },
        "properties": {
          "approvers": {
            "description": "A list of package approvers.",
            "items": {
              "$ref": "#/components/schemas/PackageApprover"
            },
            "type": "array"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the package's creation.",
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the associated decoder mapping.",
            "type": "string"
          },
          "downloadURL": {
            "deprecated": true,
            "description": "The download/upload URL.",
            "type": "string"
          },
          "errorDescription": {
            "description": "A description of error(s) from packages that have an error status.",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The package file."
          },
          "fileID": {
            "description": "A unique identifier for the package file.",
            "type": "string"
          },
          "internalNotes": {
            "description": "Internal notes.",
            "type": "string"
          },
          "manifest": {
            "description": "The package manifest.",
            "type": "string"
          },
          "packageGroupID": {
            "description": "A unique identifier for the package group. Refers to the package group resource.",
            "type": "string"
          },
          "packageGroupName": {
            "description": "The name of the package group.",
            "type": "string"
          },
          "packageID": {
            "description": "A unique identifier for the package. An ID will be generated every time a package is created.",
            "type": "string"
          },
          "packageStatus": {
            "$ref": "#/components/schemas/PackageStatus"
          },
          "packageVersion": {
            "description": "The version of the package.",
            "type": "string"
          },
          "releaseCandidate": {
            "description": "A boolean value indicating whether a package is a release candidate or not.",
            "type": "boolean"
          },
          "releaseNotes": {
            "description": "Information regarding releases.",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the package's latest update.",
            "type": "string"
          },
          "uploadURL": {
            "deprecated": true,
            "description": "The download/upload URL.",
            "type": "string"
          },
          "vcsInfo": {
            "description": "Information about changes between versions.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageStatisticsResponse": {
        "properties": {
          "devicesCurrentlyDeployed": {
            "description": "The number of unique devices with the package currently deployed",
            "example": 5,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PackageStatus": {
        "description": "The status of the package\n| Enum Value | Description |\n| --- | --- |\n| PREPARING | The package is in the preparation phase and is not yet ready for deployment to a device. During this phase, modifications can be made to the package, i.e. different images for each ECU variant may be selected. |\n| IN_APPROVAL | The package is currently under review and needs approval before it can be deployed. |\n| APPROVED | The package has been approved and may be deployed to one or more devices. |\n| DEPLOYED | The package has been deployed to one or more devices. |\n| QUARANTINED | The package cannot be deployed further. The specific reason for quarantine, such as the discovery of harmful content, is at the discretion of the customer. |\n",
        "enum": [
          "PREPARING",
          "IN_APPROVAL",
          "APPROVED",
          "DEPLOYED",
          "QUARANTINED"
        ],
        "type": "string"
      },
      "PackagesPage": {
        "example": {
          "count": 2,
          "results": [
            {
              "approvers": [
                {
                  "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
                  "createdAt": "2022-02-02T20:20:20.202Z",
                  "status": "PENDING",
                  "updatedAt": "2022-02-02T20:20:20.202Z"
                }
              ],
              "companyID": "659e11aa-f6a0-4db4-9aab-d6405e09cea8",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
              "downloadURL": "example-download.url",
              "errorDescription": "some description",
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
              "internalNotes": "some notes",
              "manifest": "manifest",
              "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
              "packageGroupName": "Sibros Package",
              "packageID": "b658cf59-7877-4a2d-be6b-f22e78d87665",
              "packageStatus": "IN_APPROVAL",
              "packageVersion": "1.1",
              "releaseCandidate": "string",
              "releaseNotes": "release notes",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "uploadURL": "example-upload.url",
              "vcsInfo": "1.1"
            },
            {
              "approvers": [
                {
                  "approverID": "234baa75-d2c1-4133-ae0b-60a4b2ebfb08",
                  "createdAt": "2022-02-02T20:20:20.202Z",
                  "status": "PENDING",
                  "updatedAt": "2022-02-02T20:20:20.202Z"
                }
              ],
              "companyID": "659e11aa-f6a0-4db4-9aab-d6405e09cea8",
              "createdAt": "2020-02-02T20:20:20.202Z",
              "decoderMappingID": "6dd1cbdb-b57e-4b98-91da-9c94813f2be4",
              "downloadURL": "example-download.url",
              "errorDescription": "some description",
              "file": {
                "createdAt": "2020-02-02T20:20:20.202Z",
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "path": "/some/path",
                "uploadURL": "example-upload.url"
              },
              "fileID": "c8120756-1093-4731-8e96-ac112087f38f",
              "internalNotes": "some notes",
              "manifest": "manifest",
              "packageGroupID": "50bc9cf3-1bfe-421a-8e16-03b49544878a",
              "packageGroupName": "Sibros Package",
              "packageID": "c658cf59-7877-4a2d-be6b-f22e78d87665",
              "packageStatus": "IN_APPROVAL",
              "packageVersion": "1.1",
              "releaseCandidate": "string",
              "releaseNotes": "release notes",
              "updatedAt": "2020-02-02T20:20:20.202Z",
              "uploadURL": "example-upload.url",
              "vcsInfo": "1.1"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching packages, disregarding limit and offset.",
            "type": "number"
          },
          "results": {
            "description": "A list of packages.",
            "items": {
              "$ref": "#/components/schemas/PackageResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchConsentStatusRequest": {
        "properties": {
          "consentStatus": {
            "$ref": "#/components/schemas/ConsentStatus"
          }
        },
        "type": "object"
      },
      "PatchDeploymentDesiredStateRequest": {
        "$ref": "#/components/schemas/DeploymentDesiredStateRequest"
      },
      "PatchDeploymentStatusRequest": {
        "$ref": "#/components/schemas/DeploymentStatusRequest"
      },
      "PatchDeviceByIDRequest": {
        "$ref": "#/components/schemas/DevicePatch"
      },
      "PatchDeviceDecoderMappingNameRequest": {
        "properties": {
          "decoderName": {
            "description": "The updated decoder mapping name of the device.",
            "example": "example-decoder-mapping-name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchLogRuleRequest": {
        "$ref": "#/components/schemas/LogRulePatch"
      },
      "PatchSelectiveLogConfigRequest": {
        "$ref": "#/components/schemas/SelectiveLogConfigPatch"
      },
      "PatchStageByIDRequest": {
        "$ref": "#/components/schemas/StagePatch"
      },
      "PatchTripRequest": {
        "properties": {
          "attributes": {
            "description": "The updated attributes for the trip.",
            "example": "{\"key\": \"value\"}",
            "type": "object"
          }
        },
        "type": "object"
      },
      "PatchUserActivityRequest": {
        "$ref": "#/components/schemas/UserActivityRequest"
      },
      "PatchUserResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "User 8cea7366-cf53-4919-b36e-507a705f0dfa has been updated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Policy": {
        "properties": {
          "action": {
            "description": "A mapping from an action.",
            "example": 10,
            "type": "integer"
          },
          "id": {
            "description": "A unique identifier for the policy.",
            "example": "4c98c0e4-a977-46f1-9f98-dfdb7c711a65",
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "description": "A mapping to a resource.",
            "example": 40,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PolicyActionResource": {
        "properties": {
          "action": {
            "description": "A mapping from an action.",
            "example": 100,
            "type": "integer"
          },
          "resource": {
            "description": "A mapping to a resource.",
            "example": 40,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProvisionWithCertificateRequest": {
        "properties": {
          "certificate": {
            "description": "Leaf certificate for the device",
            "example": "-----BEGIN CERTIFICATE-----\nMIIBoTCCAUagAwIBAgIRAPhR8K/AeutF1SzPLmrEJjowCgYIKoZIzj0EAwIwDjEM\nMAoGA1UEAxMDZm9vMB4XDTIzMTAxODExMDgyNloXDTIzMTAxOTExMDgyNlowDzEN\nMAsGA1UEAxMEbGVhZjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJ9DN3G+ZUHk\nev59lwY4/zOQ931R4Kf1krYjO15lE4uUWMfEXG68qm8VlgsjTjXgYw7G/vljEowj\n5WwC2tZ18OCjgYMwgYAwDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUF\nBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUgQL85ymmEyL9N/7VVcL1jrQ6aEAwHwYD\nVR0jBBgwFoAUEkJ+ybCw+0R8gskkXBvhA3JbiqMwDwYDVR0RBAgwBoIEbGVhZjAK\nBggqhkjOPQQDAgNJADBGAiEA1AaEpuNVT3blGgpaU9fybUpKGxlo63Mu1Rn5MiUl\nbH4CIQCSKqa1e++Fdu13Ab2IV+Uo1pAXfOa+iJO87nmH1Uh2kA==\n-----END CERTIFICATE-----\n",
            "type": "string"
          },
          "rootCA": {
            "description": "Include the root certificate that signed the leaf certificate. If an intermediate certificate signed the leaf certificate, provide a chain from the intermediate to root certificate.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIBYDCCAQagAwIBAgIRAI8JrNQAmccHAHbayH8bEDowCgYIKoZIzj0EAwIwDjEM\nMAoGA1UEAxMDZm9vMB4XDTIzMTAxODExMDU1OFoXDTMzMTAxNTExMDU1OFowDjEM\nMAoGA1UEAxMDZm9vMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdfYqp3rf5u30\ncb6SCPAvFb1iWn02ZzLTdUh+cyseFeDu/iEDPHwdWgG9Up+2jWEdzwljblRDoIPJ\nOjldTxwg/aNFMEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEw\nHQYDVR0OBBYEFBJCfsmwsPtEfILJJFwb4QNyW4qjMAoGCCqGSM49BAMCA0gAMEUC\nIG5+DUoblsMlDkEaxTec5V2gMmUZHfZi3/zIUJf65RTqAiEAlaUYdmuGXR+ak7M1\nzKhhyfjBwjXH0BEJcOVlpBg+cas=\n-----END CERTIFICATE-----\n",
            "type": "string"
          }
        },
        "required": [
          "certificate",
          "rootCA"
        ],
        "type": "object"
      },
      "ProvisionWithCertificateResponse": {
        "properties": {
          "certificateID": {
            "example": "e52ae638-94ab-4b2c-8e15-4b7549b06cf5",
            "type": "string"
          },
          "deviceID": {
            "example": "e52ae638-94ab-4b2c-8e15-4b7549b06cf5",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReplaceDeviceComponentRequest": {
        "$ref": "#/components/schemas/DeviceComponent"
      },
      "RequestPayloadField": {
        "example": {
          "description": null,
          "fieldName": null,
          "inputOptions": null,
          "inputType": null,
          "label": null
        },
        "properties": {
          "description": {
            "description": "The description of the request payload field.",
            "type": "string"
          },
          "fieldName": {
            "description": "The name of the request payload field.",
            "type": "string"
          },
          "inputOptions": {
            "$ref": "#/components/schemas/InputOptions",
            "description": "The input options for the request payload field."
          },
          "inputType": {
            "description": "The input type of the request payload field.",
            "enum": [
              "ENUM",
              "BOOLEAN",
              "INTEGER",
              "FLOAT",
              "STRING",
              "ARRAY"
            ],
            "type": "string"
          },
          "label": {
            "description": "The label of the request payload field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceQueryAggregateFilter": {
        "properties": {
          "dimension": {
            "$ref": "#/components/schemas/ResourceQueryAggregateFilterDimension"
          },
          "operator": {
            "$ref": "#/components/schemas/ResourceQueryAggregateFilterOperator"
          },
          "values": {
            "description": "The dimension values to operate on.",
            "example": [
              "3030dc6c-09b6-43d2-aeae-ccd5d70960d5",
              "c57e27a3-d481-489c-82a5-809552728ec0"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "dimension",
          "operator",
          "values"
        ],
        "type": "object"
      },
      "ResourceQueryAggregateFilterDimension": {
        "description": "The dimension that should be used when evaluating a given condition.\n",
        "enum": [
          "deviceID",
          "startTime",
          "endTime",
          "createdAt",
          "deploymentType"
        ],
        "type": "string"
      },
      "ResourceQueryAggregateFilterOperator": {
        "description": "The operator that should be used when evaluating a given condition.\n",
        "enum": [
          "==",
          "!=",
          ">=",
          "<="
        ],
        "type": "string"
      },
      "ResponsePayloadField": {
        "example": {
          "childPayloadFields": null,
          "description": null,
          "displayOptions": null,
          "fieldName": null,
          "label": null,
          "outputType": null
        },
        "properties": {
          "childPayloadFields": {
            "description": "The child of the response payload field.",
            "items": {
              "$ref": "#/components/schemas/ResponsePayloadField"
            },
            "type": "array"
          },
          "description": {
            "description": "The description of the response payload field.",
            "type": "string"
          },
          "displayOptions": {
            "$ref": "#/components/schemas/DisplayOptions",
            "description": "The display options for the response payload field."
          },
          "fieldName": {
            "description": "The name of the response payload field.",
            "type": "string"
          },
          "label": {
            "description": "The label of the response payload field.",
            "type": "string"
          },
          "outputType": {
            "description": "The output type of the response payload field.",
            "enum": [
              "ENUM",
              "BOOLEAN",
              "INTEGER",
              "FLOAT",
              "STRING",
              "ARRAY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RetryRolloutRequest": {
        "properties": {
          "deviceIDs": {
            "description": "The deviceIDs of the devices to retry the rollout on",
            "example": [
              "8fdeaef4-ed81-468c-a3ad-326219aadf64",
              "8b22cbd5-9d16-4a03-9574-44dd53deeef4"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "deviceSerialNumberPattern": {
            "description": "The device serial number pattern of the devices to retry the rollout on",
            "example": "test_vehicle_",
            "type": "string"
          },
          "stageIDs": {
            "description": "The stageIDs of the rollout to retry on",
            "example": [
              "abdeaef4-ed81-468c-a3ad-326219aadf64",
              "8cdecbd5-9d16-4a03-9574-44dd53deeef4"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Role": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "c851cc89-3dac-4d26-8f08-d70eb5cb1723",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the role's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the role.",
            "example": "7b8154ad-aa30-4d2a-93e2-ba59096d3592",
            "format": "uuid",
            "type": "string"
          },
          "isEditable": {
            "description": "Specifies if the role is editable; true allows modifications and updates to policies/permissions.",
            "example": true,
            "type": "boolean"
          },
          "roleDesc": {
            "description": "A brief description of the role.",
            "example": "can do it all",
            "type": "string"
          },
          "roleName": {
            "description": "The name of the role.",
            "example": "Admin",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the role's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rollout": {
        "properties": {
          "approvers": {
            "description": "A list of rollout approvers.",
            "items": {
              "$ref": "#/components/schemas/RolloutApprover"
            },
            "type": "array"
          },
          "bypassUserConsent": {
            "description": "The flag to indicate that the user consent is not required in the rollout",
            "example": true,
            "type": "boolean"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "2ebf231d-c17b-4fb0-967c-87a08b04d5ed",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the rollout's creation.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "desiredState": {
            "$ref": "#/components/schemas/DesiredRolloutState"
          },
          "deviceGroupIDs": {
            "description": "A list of device group IDs targeted in the rollout.",
            "example": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "deviceIDs": {
            "description": "A list of device IDs targeted in the rollout. This list does not include device IDs from targeted device groups.",
            "example": "[72d8f5a2-9d94-4b02-94b7-8963052fedc2, 69df5d5c-0e5b-4940-9c8e-1a6d3fb797c7, 4fcea1ce-1604-4795-a716-42a872817ffd]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "deviceModelID": {
            "description": "A unique identifier for the device model associated with the rollout.",
            "example": "4fcea1ce-1604-4795-a716-42a872817ffd",
            "format": "uuid",
            "type": "string"
          },
          "downloadMediaAllowed": {
            "description": "A list of allowed connection media.",
            "example": "[WIFI, CELLULAR]",
            "items": {
              "$ref": "#/components/schemas/ConnectionMediumType"
            },
            "type": "array"
          },
          "ownerID": {
            "description": "A unique identifier for the owner of the rollout.",
            "example": "603bbd50-b981-401f-b94c-4037bb6d3f15",
            "format": "uuid",
            "type": "string"
          },
          "packageID": {
            "description": "A unique identifier for the package being installed on the device. A deployment can have either a packageID or a selectiveLogConfigID.",
            "example": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
            "format": "uuid",
            "type": "string"
          },
          "rolloutID": {
            "description": "A unique identifier for the rollout. An ID will be generated every time a rollout is created.",
            "example": "85c0eb70-3440-471d-b0f1-a94fe1d16d4c",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "rolloutName": {
            "description": "The name of the rollout.",
            "example": "package-rollout",
            "type": "string"
          },
          "rolloutNotes": {
            "description": "The notes associated with the rollout",
            "example": "Rollout targeted toward group A, updating ECU 1",
            "type": "string"
          },
          "rolloutType": {
            "$ref": "#/components/schemas/RolloutType"
          },
          "scheduledStartTime": {
            "description": "The scheduled start time of the rollout. An RFC3339 timestamp.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "type": "string"
          },
          "selectiveLogConfigID": {
            "description": "A unique identifier for the log configuration being installed on the device. A deployment can have either a packageID or a selectiveLogConfigID.",
            "example": "9aff5bf4-1e3b-4612-abbe-22777d06dd0a",
            "format": "uuid",
            "type": "string"
          },
          "stageTargetingType": {
            "$ref": "#/components/schemas/StageTargetingType"
          },
          "stages": {
            "description": "The list of stages associated with the rollout.",
            "items": {
              "$ref": "#/components/schemas/Stage"
            },
            "type": "array"
          },
          "startTime": {
            "description": "The start time of the rollout. An RFC3339 timestamp.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the rollout's latest update.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "ownerID",
          "rolloutName"
        ],
        "type": "object"
      },
      "RolloutApprovalRequest": {
        "properties": {
          "approvalStatus": {
            "$ref": "#/components/schemas/RolloutApprovalStatus"
          }
        },
        "type": "object"
      },
      "RolloutApprovalStatus": {
        "description": "The approval status of the rollout.\n",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED"
        ],
        "type": "string"
      },
      "RolloutApprover": {
        "properties": {
          "approverID": {
            "description": "A unique identifier for the rollout approver.",
            "example": "1f7d3a50-9fa5-4a17-9386-36bd065718fc",
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the rollout approver's creation.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RolloutApprovalStatus"
          },
          "updatedAt": {
            "description": "A timestamp of the rollout approver's latest update.",
            "example": "2020-02-02T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "approverID"
        ],
        "type": "object"
      },
      "RolloutAttachment": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "b0eae148-c2ce-4983-9e5b-0e8db9e85783",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the rollout attachment's creation.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "rolloutAttachmentID": {
            "description": "A unique identifier for the rollout attachment.",
            "example": "c758cf59-7877-4a2d-be6b-f22e78d87665",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "rolloutID": {
            "description": "A unique identifier for the rollout.",
            "example": "0ebb1275-0e2f-4dc3-928c-4de38fe461e1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the rollout attachment's latest update.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RolloutAttachmentsPage": {
        "example": {
          "count": 1,
          "rolloutAttachments": [
            {
              "companyID": "9a0dcd8f-3984-40d5-97f4-9fe353990f89",
              "createdAt": "2022-02-02T20:20:20.202Z",
              "file": {
                "downloadURL": "example-download.url",
                "fileHash": "ab1ff24cf4321a314808f4f393d00209",
                "fileName": "file2.tar",
                "fileSizeBytes": 67,
                "fileStatus": "UPLOADED",
                "uploadURL": "example-upload.url"
              },
              "rolloutAttachmentID": "c25bfde2-d8a0-46af-81ca-7af75302eac6",
              "rolloutID": "4b49b591-c96a-4890-95b4-0fe868f40f38",
              "updatedAt": "2022-02-02T20:20:20.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching rollout attachments, disregarding limit and offset.",
            "type": "number"
          },
          "rolloutAttachments": {
            "description": "A list of rollout attachments.",
            "items": {
              "$ref": "#/components/schemas/RolloutAttachment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RolloutProgress": {
        "example": {
          "desiredState": "COMPLETED",
          "devicesAborted": 0,
          "devicesCompleted": 80,
          "devicesCompletedDetails": {
            "devicesCompletedOther": 0,
            "devicesPartiallyAccepted": 0,
            "devicesSkipped": 10,
            "devicesUpdateCompleted": 70,
            "devicesUpdateCompletedAfterRetry": 0
          },
          "devicesFailed": 5,
          "devicesFailedDetails": {
            "MANIFEST_SIGNATURE_INVALID": 1,
            "NONE": 3,
            "PROVISIONING_REQUIRED": 1
          },
          "devicesInProgress": {
            "devicesAttemptingAbort": 0,
            "devicesInProgressOther": 1,
            "devicesPackageDownloading": 1,
            "devicesRequestReceived": 1,
            "devicesUpdateInProgress": 1,
            "devicesUpdateStaging": 1,
            "devicesWaitingForPrecondition": 1
          },
          "devicesPaused": 0,
          "devicesPending": 5,
          "devicesQueued": 4,
          "devicesTotal": 100,
          "endTime": null,
          "progress": 85,
          "rolloutStatus": "IN_PROGRESS",
          "startTime": "2022-07-07T20:20:40.202Z"
        },
        "properties": {
          "desiredState": {
            "$ref": "#/components/schemas/DesiredRolloutState"
          },
          "devicesAborted": {
            "description": "The number of devices aborted in the rollout.",
            "type": "number"
          },
          "devicesCompleted": {
            "description": "The number of devices completed in the rollout.",
            "type": "number"
          },
          "devicesCompletedDetails": {
            "$ref": "#/components/schemas/DevicesCompletedDetails",
            "description": "The detailed counts of certain completed device statuses."
          },
          "devicesFailed": {
            "description": "The number of devices failed in the rollout.",
            "type": "number"
          },
          "devicesFailedDetails": {
            "$ref": "#/components/schemas/DevicesFailedDetails",
            "description": "The detailed counts of certain failed device statuses."
          },
          "devicesInProgress": {
            "$ref": "#/components/schemas/DevicesInProgress",
            "description": "The detailed counts of certain in-progress device statuses."
          },
          "devicesPaused": {
            "description": "The number of devices paused in the rollout.",
            "type": "number"
          },
          "devicesPending": {
            "description": "The number of devices pending in the rollout.",
            "type": "number"
          },
          "devicesQueued": {
            "description": "The number of devices queued in the rollout.",
            "type": "number"
          },
          "devicesTotal": {
            "description": "The number of devices targeted in the rollout.",
            "type": "number"
          },
          "endTime": {
            "description": "A timestamp of the end of the rollout.",
            "type": "string"
          },
          "progress": {
            "description": "A percentage representing the rollout progress.",
            "type": "number"
          },
          "rolloutStatus": {
            "$ref": "#/components/schemas/RolloutStatus"
          },
          "startTime": {
            "description": "A timestamp of the start of the rollout.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RolloutStatus": {
        "description": "The status of the rollout.\n| Enum Value | Description |\n| --- | --- |\n| NOT_STARTED | The rollout has been initiated but has not yet started so no deployments have been created |\n| IN_PROGRESS | The rollout is currently in progress, with some deployments still pending completion. |\n| COMPLETED | The rollout has successfully concluded, with all deployments reaching their terminal states. |\n| INVALID | The rollout has an invalid status. Please report to Sibros |\n",
        "enum": [
          "NOT_STARTED",
          "IN_PROGRESS",
          "COMPLETED",
          "INVALID"
        ],
        "type": "string"
      },
      "RolloutType": {
        "description": "The rollout type.\n| Enum Value | Description |\n| --- | --- |\n| SOFTWARE_UPDATE | The rollout contains only selective log configuration deployments. |\n| SELECTIVE_LOG_CONFIG | The rollout contains only software update deployments. |\n| INVALID | The rollout type is invalid |\n",
        "enum": [
          "SOFTWARE_UPDATE",
          "SELECTIVE_LOG_CONFIG",
          "INVALID"
        ],
        "type": "string"
      },
      "RolloutsPage": {
        "example": {
          "count": 2,
          "rollouts": [
            {
              "approvers": "[70352bfc-ae4d-4203-ae39-c912e79048c2]",
              "companyID": "2ebf231d-c17b-4fb0-967c-87a08b04d5ed",
              "createdAt": "2020-02-02T20:20:40.202Z",
              "desiredState": "COMPLETED",
              "deviceGroupIDs": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
              "deviceModelID": "4fcea1ce-1604-4795-a716-42a872817ffd",
              "ownerID": "603bbd50-b981-401f-b94c-4037bb6d3f15",
              "packageID": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
              "rolloutID": "85c0eb70-3440-471d-b0f1-a94fe1d16d4c",
              "rolloutName": "package-rollout",
              "rolloutType": "SOFTWARE_UPDATE",
              "scheduledStartTime": null,
              "selectiveLogConfigID": null,
              "startTime": "2020-02-02T20:20:40.202Z",
              "updatedAt": "2020-02-02T20:20:40.202Z"
            },
            {
              "approvers": "[70352bfc-ae4d-4203-ae39-c912e79048c2]",
              "companyID": "2ebf231d-c17b-4fb0-967c-87a08b04d5ed",
              "createdAt": "2020-02-02T20:20:40.202Z",
              "desiredState": "COMPLETED",
              "deviceGroupIDs": "[261e9333-44bb-4b94-98c1-f833c251b196, dd0b94db-c4d5-4f2b-a523-9162dfe8a508, 58df5d5e-0e5b-4940-9c8e-1a6d3fb797c7]",
              "deviceModelID": "4fcea1ce-1604-4795-a716-42a872817ffd",
              "ownerID": "603bbd50-b981-401f-b94c-4037bb6d3f15",
              "packageID": null,
              "rolloutID": "1230eb70-3440-471d-b0f1-a94fe1d16d4c",
              "rolloutName": "selective-log-config-rollout",
              "rolloutType": "SELECTIVE_LOG_CONFIG",
              "scheduledStartTime": null,
              "selectiveLogConfigID": "72d8f5a2-9d94-4b02-94b7-8963052fedc2",
              "startTime": "2020-02-02T20:20:40.202Z",
              "updatedAt": "2020-02-02T20:20:40.202Z"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total count of all matching rollouts, disregarding limit and offset.",
            "type": "number"
          },
          "rollouts": {
            "description": "A list of rollouts.",
            "items": {
              "$ref": "#/components/schemas/Rollout"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ScanLocationsRequest": {
        "example": {
          "dimensions": [
            "deviceID"
          ],
          "endTime": "2022-10-28T23:58:22.000Z",
          "filter": {
            "fields": [
              {
                "dimension": "deviceID",
                "operator": "contains",
                "values": [
                  "00301c36-7e35-ff6d-5e34-a280524666b2",
                  "78dbaec7-3c54-2cac-7cff-c68a05e99f4e"
                ]
              }
            ],
            "operator": "and"
          },
          "metrics": [
            "longitude",
            "latitude"
          ],
          "startTime": "2022-10-28T23:40:52.000Z"
        },
        "properties": {
          "dimensions": {
            "description": "Specifies the dimensions to query. The queryable dimensions can be retrieved by calling 'Get Metadata for Locations'. When the `name` dimension is used with the `contains` operator for querying events, the values should be in the format `uuid:<rule id of event>`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          },
          "filter": {
            "description": "A filter object that simulates a SQL WHERE clause to support flexible conditions. Currently, only 'deviceID' is supported in filter. See example payload. 'deviceID' is required. In addition, only one level of filter can be supported.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metrics": {
            "description": "Specifies the metrics to query. The queryable metrics can be retrieved by calling 'Get Metadata for Locations'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScanLocationsResponse": {
        "example": {
          "data": [
            [
              "2022-10-28T23:55:52.000Z",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              89.99,
              27.8
            ],
            [
              "2022-10-28T23:47:22.000Z",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              99.99,
              27.9
            ]
          ],
          "meta": [
            {
              "name": "time"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "longitude"
            },
            {
              "name": "latitude"
            }
          ],
          "rows": 2
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ScanSignalsRequest": {
        "example": {
          "dimensions": [
            "name",
            "deviceID"
          ],
          "endTime": "2022-10-28T23:49:22.000Z",
          "filter": {
            "fields": [
              {
                "dimension": "name",
                "operator": "contains",
                "values": [
                  "BMS_min_cell_temp",
                  "my_custom_signal_name"
                ]
              },
              {
                "dimension": "deviceID",
                "operator": "contains",
                "values": [
                  "00301c36-7e35-ff6d-5e34-a280524666b2",
                  "78dbaec7-3c54-2cac-7cff-c68a05e99f4e"
                ]
              }
            ],
            "operator": "and"
          },
          "metrics": [
            "floatValue",
            "intValue"
          ],
          "startTime": "2022-10-28T23:35:22.000Z"
        },
        "properties": {
          "dimensions": {
            "description": "Specifies the dimensions to query. The queryable dimensions can be retrieved by calling 'Get Metadata for Signals'. When the `name` dimension is used with the `contains` operator for querying events, the values should be in the format `uuid:<rule id of event>`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          },
          "filter": {
            "description": "A filter object that simulates a SQL WHERE clause to support flexible conditions. The available operators are 'and', 'or', 'contains'. 'and', 'or' can only be used with 'fields', only 'contains' can be used on 'dimension' with 'value'. If the filter has logic errors, for example, using 'or' with 'dimension', the API will return an error. Currently, only one level of filter can be supported.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metrics": {
            "description": "Specifies the metrics to query, the queryable metrics can be retrieved by calling 'Get Metadata for Signals'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScanSignalsResponse": {
        "example": {
          "data": [
            [
              "2022-10-28T23:45:22.000Z",
              "BMS_min_cell_temp",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              27.8,
              21
            ],
            [
              "2022-10-28T23:43:22.000Z",
              "BMS_min_cell_temp",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              27.9,
              23
            ],
            [
              "2022-10-28T23:41:22.000Z",
              "BMS_min_cell_temp",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              27.9,
              18
            ],
            [
              "2022-10-28T23:39:22.000Z",
              "my_custom_signal_name",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              3,
              1
            ]
          ],
          "meta": [
            {
              "name": "time"
            },
            {
              "name": "name"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "floatValue"
            },
            {
              "name": "intValue"
            }
          ],
          "rows": 4
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result. Note - The time is always returned.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchLocationsRequest": {
        "example": {
          "dimensions": [
            "deviceID"
          ],
          "endTime": "2022-10-28T23:58:22.000Z",
          "filter": {
            "fields": [
              {
                "dimension": "deviceID",
                "operator": "contains",
                "values": [
                  "00301c36-7e35-ff6d-5e34-a280524666b2",
                  "78dbaec7-3c54-2cac-7cff-c68a05e99f4e"
                ]
              }
            ],
            "operator": "and"
          },
          "metrics": [
            "longitude",
            "latitude"
          ],
          "startTime": "2022-10-28T23:40:52.000Z"
        },
        "properties": {
          "dimensions": {
            "description": "Specifies the dimensions to query. The queryable dimensions can be retrieved by calling 'Get Metadata for Locations'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level. If not specified, the current default is UTC time.",
            "type": "string"
          },
          "filter": {
            "description": "A filter object that simulates a SQL WHERE clause to support flexible conditions. For now, only 'deviceID' is supported in the filter. See example payload. 'deviceID' is required. In addition, only one level of filter can be supported.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metrics": {
            "description": "Specifies the metrics to query. The queryable metrics can be retrieved by calling 'Get Metadata for Locations'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchLocationsResponse": {
        "example": {
          "data": [
            [
              "2022-10-28T23:55:52.000Z",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              89.99,
              27.8
            ],
            [
              "2022-10-28T23:47:22.000Z",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              99.99,
              27.9
            ]
          ],
          "meta": [
            {
              "name": "time"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "longitude"
            },
            {
              "name": "latitude"
            }
          ],
          "rows": 2
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchSignalsRequest": {
        "example": {
          "aggregationWindow": 120,
          "aggregations": [
            {
              "fieldName": "floatValue",
              "type": "max"
            },
            {
              "fieldName": "floatValue",
              "type": "min"
            }
          ],
          "dimensions": [
            "name",
            "deviceID"
          ],
          "endTime": "2022-10-28T23:49:22.000Z",
          "filter": {
            "fields": [
              {
                "dimension": "name",
                "operator": "contains",
                "values": [
                  "BMS_min_cell_temp",
                  "my_custom_signal_name"
                ]
              },
              {
                "dimension": "deviceID",
                "operator": "contains",
                "values": [
                  "00301c36-7e35-ff6d-5e34-a280524666b2",
                  "78dbaec7-3c54-2cac-7cff-c68a05e99f4e"
                ]
              }
            ],
            "operator": "and"
          },
          "startTime": "2022-10-28T23:35:22.000Z"
        },
        "properties": {
          "aggregationWindow": {
            "description": "An integer in seconds to indicate the aggregation window. If not specified, the aggregation is applied to the entire query window.",
            "type": "integer"
          },
          "aggregations": {
            "description": "A list of aggregations can be applied on 'metrics'. Supported types are 'max', 'min', 'sum', 'avg'. The resulting column name will be the concatenation of the aggregation type and fieldName, for example, 'maxFloatValue'.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "dimensions": {
            "description": "Specifies the dimensions to query. The queryable dimensions can be retrieved by calling 'Get Metadata for Signals'. When the `name` dimension is used with the `contains` operator for querying events, the values should be in the format `uuid:<rule id of event>`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          },
          "filter": {
            "description": "A filter object that simulates a SQL WHERE clause to support flexible conditions. The available operators are 'and', 'or', 'contains'. 'and', 'or' can only be used with 'fields', only 'contains' can be used on 'dimension' with 'value'. If the filter has logic errors, for example, using 'or' with 'dimension', the API will return an error. Currently, only one level of filter can be supported.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metrics": {
            "description": "Specifies the metrics to query. The queryable metrics can be retrieved by calling 'Get Metadata for Signals'.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startTime": {
            "description": "A string in ISO 8601 format that can contain up to millisecond level.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchSignalsResponse": {
        "example": {
          "data": [
            [
              "2022-10-28T23:45:22.000Z",
              "BMS_min_cell_temp",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              27.8,
              21
            ],
            [
              "2022-10-28T23:43:22.000Z",
              "BMS_min_cell_temp",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              27.9,
              23
            ],
            [
              "2022-10-28T23:41:22.000Z",
              "BMS_min_cell_temp",
              "00301c36-7e35-ff6d-5e34-a280524666b2",
              27.9,
              18
            ],
            [
              "2022-10-28T23:39:22.000Z",
              "my_custom_signal_name",
              "78dbaec7-3c54-2cac-7cff-c68a05e99f4e",
              3,
              1
            ]
          ],
          "meta": [
            {
              "name": "time"
            },
            {
              "name": "name"
            },
            {
              "name": "deviceID"
            },
            {
              "name": "maxFloatValue"
            },
            {
              "name": "minFloatValue"
            }
          ],
          "rows": 4
        },
        "properties": {
          "data": {
            "description": "The data result corresponding to the metadata. Note - The data field is an array that contains the values corresponding to each header defined in the meta field.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The metadata of the result. Note - Time is always returned. Requested dimensions and aggregated fields are also returned.",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SelectiveLogConfig": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "b598682d-510a-4d00-8505-8f55bbc5ef69",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "configHash": {
            "description": "The config hash of the selective log config.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "configName": {
            "description": "The name of the log configuration.",
            "example": "sibros-default-slc",
            "type": "string"
          },
          "content": {
            "deprecated": true,
            "description": "The JSON content of the selective log config",
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the log configuration's creation.",
            "example": "2020-02-03T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "createdBy": {
            "description": "The given user id of the selective log config creator",
            "example": "d5703d51-33e6-461e-afe4-2394e565c1b4",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the associated decoder mapping.",
            "example": "f294957e-ab6b-4d72-bcaf-3ec301a8ff72",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "The description of the log configuration.",
            "example": "This is the default log configuration for Sibros devices.",
            "type": "string"
          },
          "isArchived": {
            "description": "The archived status of the log configuration. You can restore an archived config if needed.",
            "example": true,
            "type": "boolean"
          },
          "locked": {
            "description": "The locked status of the log configuration. Once deployed, a config will become locked and can no longer be updated.",
            "example": false,
            "readOnly": true,
            "type": "boolean"
          },
          "logRules": {
            "description": "Log Rules to be associated with the log config",
            "items": {
              "$ref": "#/components/schemas/LogRule"
            },
            "type": "array"
          },
          "selectiveLogConfigID": {
            "description": "A unique identifier for the selective log configuration.",
            "example": "7d6fc283-59af-4c60-914c-dc4ced954248",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the log configuration's lastest update.",
            "example": "2020-02-03T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "decoderMappingID",
          "configName"
        ],
        "type": "object"
      },
      "SelectiveLogConfigDeploymentMetadata": {
        "properties": {
          "configHash": {
            "description": "The config hash",
            "example": 12345644,
            "format": "int64",
            "type": "integer"
          },
          "decoderMappingId": {
            "description": "The decoder mapping ID",
            "example": "e27504c2-2ffb-4f62-b6a9-31da80b34523",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SelectiveLogConfigPage": {
        "properties": {
          "count": {
            "description": "The number of selective log configs returned",
            "type": "integer"
          },
          "result": {
            "description": "A list of selective log configs.",
            "items": {
              "$ref": "#/components/schemas/SelectiveLogConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SelectiveLogConfigPatch": {
        "properties": {
          "description": {
            "description": "The new description of the log rule.",
            "example": "This log configuration logs all signals.",
            "type": "string"
          },
          "isArchived": {
            "description": "The archived status of the log configuration.",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "The new name of the log configuration.",
            "example": "log_all_signals",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SelectiveLogJSONPayload": {
        "properties": {
          "content": {
            "description": "An array containing the selective logs",
            "items": {
              "$ref": "#/components/schemas/LogRule"
            },
            "type": "array"
          },
          "decoderMappingID": {
            "description": "The decoder mapping ID used to build the config",
            "example": "86365dbb-0896-4e65-b73c-06a10e4f3f3e",
            "format": "uuid",
            "type": "string"
          },
          "decoderMappingName": {
            "description": "The decoder mapping name used to build the config",
            "example": "dbc_1",
            "type": "string"
          },
          "deploymentID": {
            "description": "The deploymentID for the log config",
            "example": "86365dbb-0896-4e65-b73c-06a10e4f3f3e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetAllowReprovisioningByDeviceIDRequest": {
        "properties": {
          "allowReprovisioning": {
            "description": "A boolean value indicating whether this device can be reprovisioned.",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SetAllowReprovisioningByDeviceIDResponse": {
        "properties": {
          "allowReprovisioning": {
            "description": "A boolean value indicating whether this device can be reprovisioned.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SibrosCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogConditionProperties"
          },
          {
            "properties": {
              "name": {
                "description": "Name of the standard or sibros product signal",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "example": {
          "compare_value": 23.9,
          "name": "gnss.latitude",
          "operator": ">",
          "source_type": "SIBROS"
        },
        "type": "object"
      },
      "SibrosLogMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonLogMessageProperties"
          },
          {
            "properties": {
              "log_trigger_settings": {
                "properties": {
                  "onchange_settings": {
                    "properties": {
                      "threshold": {
                        "description": "Minimum signal change for logging.",
                        "type": "number"
                      },
                      "threshold_type": {
                        "description": "Type of threshold, currently only 'ABSOLUTE' is supported",
                        "enum": [
                          "ABSOLUTE"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "Name of the standard or sibros product signal.",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "example": {
          "frequency_ms": 300,
          "name": "gnss.latitude",
          "source_type": "SIBROS"
        },
        "type": "object"
      },
      "SignalFaultMode": {
        "description": "Represents a mapping of a J1939 signal to a fault mode map which dictates the fault modes the signal can take",
        "properties": {
          "busID": {
            "description": "The bus ID of the signal whose association to fault mode map is being defined by this map.",
            "example": 1,
            "type": "integer"
          },
          "companyID": {
            "description": "A unique identifier for the company associated with the Signal Fault Mode Map.",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The timestamp when the Signal Fault Mode Map was created.",
            "example": "2023-01-01T10:10:10.101Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "decoderMappingID": {
            "description": "A unique identifier for the decoder mapping associated with the Signal Fault Mode Map.",
            "example": "789e4567-e89b-12d3-a456-426614174003",
            "format": "uuid",
            "type": "string"
          },
          "faultModeMapID": {
            "description": "A unique identifier for the Fault Mode Map that describes the fault modes this signal can have.",
            "example": "abc12345-1234-5678-9abc-1234567890ab",
            "format": "uuid",
            "type": "string"
          },
          "messageID": {
            "description": "The message ID of the signal in DBC whose association to fault mode map is being defined by this map.",
            "example": 101,
            "type": "integer"
          },
          "signalFaultModeMapID": {
            "description": "A unique identifier for the Signal Fault Mode Map.",
            "example": "4e5d6cf8-ee59-11ec-8ea0-0242ac120003",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "signalName": {
            "description": "The name of the signal whose association to fault mode map is being defined by this map.",
            "example": "EngineSpeed",
            "type": "string"
          },
          "updatedAt": {
            "description": "The timestamp when the Signal Fault Mode Map was last updated.",
            "example": "2023-01-01T15:15:15.151Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignalFaultModePage": {
        "properties": {
          "count": {
            "description": "The total count of signal fault mode maps.",
            "type": "integer"
          },
          "signalFaultModeMap": {
            "description": "A list of signal fault mode maps.",
            "items": {
              "$ref": "#/components/schemas/SignalFaultMode"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SignalFaultModeWithoutDecoderMappingID": {
        "description": "Represents a mapping of a J1939 signal in context of a data map to a fault mode map which dictates the fault modes the signal can take.",
        "properties": {
          "busID": {
            "description": "An identifier for the bus associated with the Signal Fault Mode.",
            "example": 1,
            "type": "integer"
          },
          "faultModeMapID": {
            "description": "A unique identifier for the fault map this mode is associated with.",
            "example": "abc12345-1234-5678-9abc-1234567890ab",
            "format": "uuid",
            "type": "string"
          },
          "messageID": {
            "description": "An identifier for the message associated with the Signal Fault Mode.",
            "example": 101,
            "type": "integer"
          },
          "signalName": {
            "description": "The name of the signal associated with the Fault Mode.",
            "example": "EngineSpeed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignalFaultModes": {
        "$ref": "#/components/schemas/SignalFaultMode"
      },
      "SourceFileFormat": {
        "description": "An enum representing the file type that was converted.\n| Enum Value | Description |\n| --- | --- |\n| SIBROS | This represents a file with a .sibros extension. Such a file is uploaded by the device when vehicle network data is logged. |\n",
        "enum": [
          "SIBROS"
        ],
        "type": "string"
      },
      "SourceType": {
        "description": "The type / source of data\n| Enum Value | Description |\n| --- | --- |\n| CAN | Entire CAN message |\n| CAN_SIGNAL | Specific signal within a particular CAN message |\n| NAME_VALUE | Signals defined in the custom signals section of the data map. |\n| SIBROS | Signals provided by Sibros, including GNSS and product metrics. |\n| J1939_FAULT | Represents Diagnostic Trouble Codes (DTCs) within J1939 DM1 messages for accurate fault diagnostics |\n",
        "enum": [
          "CAN",
          "CAN_SIGNAL",
          "NAME_VALUE",
          "SIBROS",
          "J1939_FAULT"
        ],
        "type": "string"
      },
      "SplitSettings": {
        "properties": {
          "splitSize": {
            "description": "How big the file will get before the device closes the file.",
            "example": 10,
            "format": "float",
            "type": "number"
          },
          "splitSizeUnits": {
            "$ref": "#/components/schemas/SplitSizeUnits"
          },
          "splitTime": {
            "description": "Amount of time before the device closes the files.",
            "example": 5,
            "format": "float",
            "type": "number"
          },
          "splitTimeUnits": {
            "$ref": "#/components/schemas/SplitTimeUnits"
          }
        },
        "type": "object"
      },
      "SplitSizeUnits": {
        "description": "The units of the split size.\n",
        "enum": [
          "MB",
          "KB"
        ],
        "type": "string"
      },
      "SplitTimeUnits": {
        "description": "The units that the split time should be interpreted as.\n",
        "enum": [
          "HOURS"
        ],
        "type": "string"
      },
      "Stage": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "5ca04e09-d7db-41b8-b367-bb4432b091ff",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "completeThreshold": {
            "description": "A float to indicate the percentage of deployments with an UPDATE_COMPLETED status required to automatically start the next stage.",
            "example": 80,
            "format": "float",
            "type": "number"
          },
          "createdAt": {
            "description": "A timestamp of the rollout's creation.",
            "example": "2022-07-07T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "desiredState": {
            "$ref": "#/components/schemas/DesiredStageState"
          },
          "desiredStateChangeReason": {
            "description": "A field to record the reasons to change the stage desired state.",
            "example": "rollout started",
            "type": "string"
          },
          "deviceGroupIDs": {
            "description": "A list of device group IDs targeted in the stage, if applicable.",
            "example": [
              "5a69c1d3-0589-45e9-b59e-275bf9a819d0"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "endTime": {
            "description": "The end time of the stage. An RFC3339 timestamp.",
            "example": "2022-07-07T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "failureThreshold": {
            "description": "A float to indicate the percentage of deployments with an UPDATE_FAILED status required to automatically pause the stage and prevent further stages from automatically starting. Values range from 0 - 100, with 0 disabling the feature.",
            "example": 10,
            "format": "float",
            "type": "number"
          },
          "movingWindowPercentage": {
            "description": "A float to indicate the percentage of deployments that should be in an IN_PROGRESS state. Only used for moving window. Values range from 0 to 100 (0 not included).",
            "example": 20,
            "format": "float",
            "type": "number"
          },
          "percentOfRolloutTarget": {
            "description": "An integer to indicate the percentage of the overall rollout target that will comprise the stageâ€™s target. Empty if not applicable.",
            "example": 20,
            "type": "integer"
          },
          "rolloutID": {
            "description": "A unique identifier for the rollout. An ID will be generated every time a rollout is created.",
            "example": "ce0071ac-dbb9-42bf-bc22-8805fa8984eb",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "stageID": {
            "description": "A unique identifier for the stage. An ID will be generated every time a stage is created.",
            "example": "cbfc1468-831e-4117-9615-b20f6cf339ac",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "stageNumber": {
            "description": "An integer to indicate the stage number.",
            "example": 1,
            "type": "integer"
          },
          "startTime": {
            "description": "The start time of the stage. An RFC3339 timestamp.",
            "example": "2022-07-07T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the rollout's latest update.",
            "example": "2022-07-07T20:20:40.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StagePatch": {
        "properties": {
          "failureThreshold": {
            "description": "The updated failure threshold for a stage",
            "example": 10,
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "StageProgress": {
        "example": {
          "desiredState": "COMPLETED",
          "devicesAborted": 0,
          "devicesCompleted": 80,
          "devicesFailed": 5,
          "devicesInProgress": {
            "devicesAttemptingAbort": 0,
            "devicesInProgressOther": 1,
            "devicesPackageDownloading": 1,
            "devicesRequestReceived": 1,
            "devicesUpdateInProgress": 1,
            "devicesUpdateStaging": 1,
            "devicesWaitingForPrecondition": 1
          },
          "devicesPaused": 0,
          "devicesPending": 5,
          "devicesQueued": 4,
          "devicesTotal": 100,
          "endTime": null,
          "progress": 85,
          "rolloutStatus": "IN_PROGRESS",
          "startTime": "2022-07-07T20:20:40.202Z"
        },
        "properties": {
          "desiredState": {
            "$ref": "#/components/schemas/DesiredStageState"
          },
          "devicesAborted": {
            "description": "The number of devices aborted in the stage.",
            "type": "number"
          },
          "devicesCompleted": {
            "description": "The number of devices completed in the stage.",
            "type": "number"
          },
          "devicesFailed": {
            "description": "The number of devices failed in the stage.",
            "type": "number"
          },
          "devicesNotStarted": {
            "description": "The number of devices not started in the stage.",
            "type": "number"
          },
          "devicesPaused": {
            "description": "The number of devices paused in the stage.",
            "type": "number"
          },
          "devicesPending": {
            "description": "The number of devices pending in the stage.",
            "type": "number"
          },
          "devicesTotal": {
            "description": "The number of devices targeted in the stage.",
            "type": "number"
          },
          "endTime": {
            "description": "A timestamp of the end of the stage.",
            "type": "string"
          },
          "progress": {
            "description": "A percentage representing the stage progress.",
            "type": "number"
          },
          "stageStatus": {
            "$ref": "#/components/schemas/StageStatus"
          },
          "startTime": {
            "description": "A timestamp of the start of the stage.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StageStatus": {
        "description": "| Enum Value | Description |\n| --- | --- |\n| NOT_STARTED | The stage has been created but has not yet started |\n| IN_PROGRESS | The deployments in the stage are currently in progress, with some still pending completion. |\n| COMPLETED | The stage has successfully concluded, with all deployments reaching their terminal states. |\n| INVALID | The stage is in an invalid state and cannot be processed. |\n",
        "enum": [
          "NOT_STARTED",
          "IN_PROGRESS",
          "COMPLETED",
          "INVALID"
        ],
        "type": "string"
      },
      "StageTargetingType": {
        "description": "The type of stage targeting system to be used.\n| Enum Value | Description |\n| --- | --- |\n| PERCENT_OVERALL | Vehicles will be segmented into stages based on specified percentage allocations. |\n| INDIVIDUAL_TARGETS | Vehicles will be categorized into stages by specifying designated Vehicle Group(s) for each stage. |\n| INVALID | The stage targeting type is invalid |\n",
        "enum": [
          "PERCENT_OVERALL",
          "INDIVIDUAL_TARGETS",
          "INVALID"
        ],
        "type": "string"
      },
      "StartDeepUpdaterProvisioningResponse": {
        "properties": {
          "deploymentID": {
            "description": "the ID of the provisioning deployment that was created",
            "example": "245c4527-81ec-43a9-892f-7f21b7d05325",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatisticsFilter": {
        "properties": {
          "filters": {
            "description": "A list of filters to use in the query.",
            "items": {
              "$ref": "#/components/schemas/ResourceQueryAggregateFilter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StatisticsResource": {
        "description": "The resource to get statistics from. There may be different statistics for different resources.\n| Enum Value | Description |\n| --- | --- |\n| DEPLOYMENT | The deployment resource. |\n",
        "enum": [
          "DEPLOYMENT"
        ],
        "type": "string"
      },
      "StatisticsResponse": {
        "discriminator": {
          "mapping": {
            "DEPLOYMENT": "#/components/schemas/DeploymentStatisticsResponse"
          },
          "propertyName": "resource"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DeploymentStatisticsResponse"
          }
        ]
      },
      "StatusLog": {
        "properties": {
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "4c8b8e08-3bb8-4f55-9d61-0629e00ca199",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType"
          },
          "createdAt": {
            "description": "A timestamp of the status log's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deploymentID": {
            "description": "A unique identifier for the deployment.",
            "example": "58979238-252b-4d8f-97c8-028c164283c2",
            "format": "uuid",
            "type": "string"
          },
          "ecuStatus": {
            "description": "The status of the ECU.",
            "type": "object"
          },
          "logTimestamp": {
            "description": "The timestamp of the status log.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "packageManagerStatus": {
            "description": "The status of the package manager.",
            "type": "object"
          },
          "statusLogID": {
            "description": "A unique identifier for the status log.",
            "example": "0b96852d-9f74-466e-be75-6fe493b06ddd",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updateManagerStatus": {
            "description": "The status of the update manager.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SubComponent": {
        "properties": {
          "name": {
            "description": "The name of the sub-component",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/HealthStatus"
          }
        },
        "type": "object"
      },
      "Tag": {
        "properties": {
          "tagId": {
            "description": "A unique identifier for the tag.",
            "example": "58866e8f-1425-4c25-bc2f-f08e2f6eea66",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "tagName": {
            "description": "The name of the tag.",
            "example": "testing",
            "type": "string"
          }
        },
        "required": [
          "tagName"
        ],
        "type": "object"
      },
      "TargetFileFormat": {
        "description": "An enum representing the file type.\n| Enum Value | Description |\n| --- | --- |\n| MDF | Measurement Data Format |\n| TRC | PCAN Trace File |\n| ASC | ASCII format |\n| BLF | Binary Logging Format |\n",
        "enum": [
          "MDF",
          "TRC",
          "ASC",
          "BLF"
        ],
        "type": "string"
      },
      "Template": {
        "properties": {
          "categoryId": {
            "description": "A unique identifier for the associated template category.",
            "example": "3fdfce85-8032-4fb6-97bd-bac6fa1d32b4",
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "52f55a6f-2290-4e8c-858c-b9a230d106c1",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the template's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "createdById": {
            "description": "The user ID of the template creator.",
            "example": "f746d199-7408-4f5a-a9d7-5a4134310406",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "decoderMappingId": {
            "description": "A unique identifier for the associated decoder mapping.",
            "example": "7025cce1-573d-4201-88a9-a2fd87328804",
            "format": "uuid",
            "type": "string"
          },
          "domainName": {
            "description": "The domain name of the template.",
            "example": "sibros",
            "type": "string"
          },
          "shared": {
            "description": "A boolean value indicating whether this template is shared.",
            "example": false,
            "type": "boolean"
          },
          "templateContent": {
            "description": "The contents of the template.",
            "example": "",
            "type": "string"
          },
          "templateId": {
            "description": "A unique identifier for the template.",
            "example": "824b48ca-1488-48eb-9bd4-51e2443c4bb2",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "templateName": {
            "description": "The name of the template.",
            "example": "main-template",
            "type": "string"
          },
          "templateType": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "updatedAt": {
            "description": "A timestamp of the template's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "domainName",
          "templateName",
          "templateType"
        ],
        "type": "object"
      },
      "TemplateCategory": {
        "properties": {
          "categoryId": {
            "description": "A unique identifier for the template category.",
            "example": "3925c0b4-3270-4538-89cf-8153e0087239",
            "format": "uuid",
            "type": "string"
          },
          "categoryName": {
            "description": "The name of the template category.",
            "example": "main-template-category",
            "type": "string"
          },
          "companyId": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "a986d6b4-53b6-4fae-b4c3-f1153d2a205b",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the template category's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "templateType": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "updatedAt": {
            "description": "A timestamp of the template category's latest update.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "categoryName",
          "templateType"
        ],
        "type": "object"
      },
      "TemplateType": {
        "description": "The type of the template.\n| Enum Value | Description |\n| --- | --- |\n| fleet-dashboard | These templates can be utilized for Fleet Dashboards on the Sibros Portal. |\n| dashboard | These templates can be utilized for the Vehicle Dashboard on the Sibros Portal. |\n| query | These templates can be utilized for the Filterscope on Sibros portal where you can retrieve all vehicles based on specific signal conditions, for example RPM value > 0 |\n| config | These templates can be utilized for log configurations on the sibros portal. They are no longer relevant and will be deprecated. |\n| invalid | This is an invalid template type |\n",
        "enum": [
          "fleet-dashboard",
          "dashboard",
          "query",
          "config",
          "invalid"
        ],
        "type": "string"
      },
      "ThresholdType": {
        "description": "The type of threshold that should be used. Currently, only ABSOLUTE is supported meaning the signal value must change by the threshold value at the very minimum.\n",
        "enum": [
          "INVALID",
          "ABSOLUTE"
        ],
        "type": "string"
      },
      "Trip": {
        "properties": {
          "attributes": {
            "description": "The attributes of the trip.",
            "example": "{\"key\": \"value\"}",
            "type": "object"
          },
          "deviceId": {
            "description": "A unique identifier for the device.",
            "example": "facfae28-f600-4320-b249-899b900d9523",
            "format": "uuid",
            "type": "string"
          },
          "tripEndTime": {
            "description": "A timestamp of the trip's end.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "tripId": {
            "description": "A unique identifier for the trip.",
            "example": "dd40a148-d79d-4fca-a3ad-db0edb1d1288",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "tripStartTime": {
            "description": "A timestamp of the trip's start.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "deviceId",
          "tripStartTime",
          "tripEndTime"
        ],
        "type": "object"
      },
      "UpdateCombinedDecoderFileStatusRequest": {
        "$ref": "#/components/schemas/File"
      },
      "UpdateCommandSequenceDefinitionCommandRequestsRequest": {
        "example": null,
        "items": {
          "$ref": "#/components/schemas/CommandRequest"
        },
        "type": "array"
      },
      "UpdateCommandSequenceDefinitionNameAndDescriptionRequest": {
        "example": {
          "description": "Sequence One Description",
          "name": "Sequence One"
        },
        "properties": {
          "commandRequest": {
            "description": "The incoming, updated command sequence definition name and description.",
            "properties": {
              "description": {
                "description": "The description of the command sequence definition.",
                "type": "string"
              },
              "name": {
                "description": "The name of the command sequence definition.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UpdateCommandSequenceDefinitionRequest": {
        "example": {
          "commandRequests": [
            {
              "commandId": 201,
              "commandRequestId": "",
              "companyId": "",
              "createdAt": "",
              "creatorUserId": "c1904cef-68bb-4557-836b-a775d1f4513f",
              "deviceId": "00000000-0000-0000-0000-000000000000",
              "payload": "",
              "responseTimeout": 5000,
              "status": "",
              "updatedAt": ""
            }
          ],
          "description": "UDS Server Simulator test sequence!",
          "name": "UDS Server Simulator Test Sequence"
        },
        "properties": {
          "commandRequests": {
            "description": "A list of command requests.",
            "items": {
              "$ref": "#/components/schemas/CommandRequest"
            },
            "type": "array"
          },
          "description": {
            "description": "The description of the command sequence definition.",
            "type": "string"
          },
          "name": {
            "description": "The name of the command sequence definition.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateControllerRequest": {
        "$ref": "#/components/schemas/Controller"
      },
      "UpdateCustomerFileRequest": {
        "$ref": "#/components/schemas/CustomerFile"
      },
      "UpdateDecoderMappingDecoderFileRequest": {
        "$ref": "#/components/schemas/File"
      },
      "UpdateDecoderMappingDiagnosticFileFileRequest": {
        "$ref": "#/components/schemas/File"
      },
      "UpdateDecoderMappingRequest": {
        "$ref": "#/components/schemas/DecoderMapping"
      },
      "UpdateDefaultStateApprovalRequest": {
        "$ref": "#/components/schemas/DefaultStateApprovalRequest"
      },
      "UpdateDefaultStateApprovalResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Default state 6b9346d4-aaf6-4f1a-bd16-8454798bd8f2 has been updated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateDefaultStateRequest": {
        "$ref": "#/components/schemas/DefaultState"
      },
      "UpdateDefaultStateStatusRequest": {
        "$ref": "#/components/schemas/DefaultStateStatusRequest"
      },
      "UpdateDefaultStateStatusResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Default state 6b9346d4-aaf6-4f1a-bd16-8454798bd8f2 has been set to ACTIVE.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateDesiredRolloutStateRequest": {
        "$ref": "#/components/schemas/DesiredRolloutStateRequest"
      },
      "UpdateDesiredRolloutStateResponse": {
        "properties": {
          "actionMessage": {
            "description": "A brief description of the change.",
            "example": "successfully started",
            "type": "string"
          },
          "rollout": {
            "$ref": "#/components/schemas/Rollout"
          }
        },
        "type": "object"
      },
      "UpdateDesiredStageStateRequest": {
        "$ref": "#/components/schemas/DesiredStageStateRequest"
      },
      "UpdateDesiredStageStateResponse": {
        "properties": {
          "actionMessage": {
            "description": "A brief description of the change.",
            "example": "successfully started",
            "type": "string"
          },
          "stage": {
            "$ref": "#/components/schemas/Stage"
          }
        },
        "type": "object"
      },
      "UpdateDeviceComponentsRequest": {
        "properties": {
          "components": {
            "description": "device components",
            "items": {
              "$ref": "#/components/schemas/DeviceComponent"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateDeviceConfigFileRequest": {
        "$ref": "#/components/schemas/File"
      },
      "UpdateDeviceGroupRequest": {
        "$ref": "#/components/schemas/DeviceGroup"
      },
      "UpdateDeviceLogRequest": {
        "$ref": "#/components/schemas/DeviceLog"
      },
      "UpdateDeviceLogStatusAndFileRequest": {
        "$ref": "#/components/schemas/DeviceLogStatusAndFile"
      },
      "UpdateDeviceModelRequest": {
        "$ref": "#/components/schemas/DeviceModel"
      },
      "UpdateDeviceModelVariantRequest": {
        "$ref": "#/components/schemas/DeviceModelVariant"
      },
      "UpdateDeviceModelVariantVersionApprovalStatusRequest": {
        "properties": {
          "approvalStatus": {
            "$ref": "#/components/schemas/DeviceModelVariantVersionApprovalStatus"
          }
        },
        "type": "object"
      },
      "UpdateDeviceModelVariantVersionApprovalStatusResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "device model variant version was approved",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateDeviceModelVariantVersionRequest": {
        "$ref": "#/components/schemas/DeviceModelVariantVersion"
      },
      "UpdateDeviceModelVariantVersionStatusRequest": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DeviceModelVariantVersionStatus"
          }
        },
        "type": "object"
      },
      "UpdateDeviceModelVariantVersionStatusResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "device model variant version was activated",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateDeviceRequest": {
        "$ref": "#/components/schemas/Device"
      },
      "UpdateECUListRecordRequest": {
        "$ref": "#/components/schemas/ECUListRecord"
      },
      "UpdateFaultModeMapRequest": {
        "$ref": "#/components/schemas/FaultModeMap"
      },
      "UpdateHardwareRevisionRequest": {
        "$ref": "#/components/schemas/HardwareRevision"
      },
      "UpdateImageRegionRequest": {
        "$ref": "#/components/schemas/ImageRegion"
      },
      "UpdateImageRequest": {
        "$ref": "#/components/schemas/Image"
      },
      "UpdateLogRuleRequest": {
        "$ref": "#/components/schemas/LogRule"
      },
      "UpdateLogRulesForSelectiveLogRequest": {
        "properties": {
          "logRuleIDs": {
            "description": "A list of log rule IDs to be associated with the log configuration.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateMasterTokenRequest": {
        "$ref": "#/components/schemas/MasterToken"
      },
      "UpdateMasterTokenResponse": {
        "example": {
          "result": "Master token 47a3ade680ce5bff has been updated."
        },
        "properties": {
          "result": {
            "description": "A response message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePackageApprovalRequest": {
        "$ref": "#/components/schemas/PackageApprovalRequest"
      },
      "UpdatePackageApprovalResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Package df0b55f2-c6d5-4859-905b-5c7d9d5010b8 has been approved.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePackageFileFileRequest": {
        "$ref": "#/components/schemas/File"
      },
      "UpdatePackageFileFileResponse": {
        "example": {
          "result": "Package file 'e47eb6da-931d-4b15-86de-9b2e21d06575' has been updated."
        },
        "properties": {
          "result": {
            "description": "A response message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePackageGroupRequest": {
        "$ref": "#/components/schemas/PackageGroup"
      },
      "UpdatePackageManifestEntryRequest": {
        "$ref": "#/components/schemas/PackageManifestEntry"
      },
      "UpdatePackageRequest": {
        "$ref": "#/components/schemas/Package"
      },
      "UpdatePackageStatusAndFileRequest": {
        "properties": {
          "errorDescription": {
            "description": "A description of error(s) from packages that have an error status.",
            "example": "error description",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "packageFileStatus": {
            "description": "The status of the package file.",
            "example": "UPLOADED",
            "type": "string"
          },
          "packageStatus": {
            "$ref": "#/components/schemas/PackageStatus"
          }
        },
        "type": "object"
      },
      "UpdatePackageStatusRequest": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PackageStatus"
          }
        },
        "type": "object"
      },
      "UpdateRolePoliciesRequest": {
        "properties": {
          "policies": {
            "description": "A list of all the policies",
            "items": {
              "$ref": "#/components/schemas/PolicyActionResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateRolePoliciesResponse": {
        "properties": {
          "policies": {
            "description": "A list of all the policies",
            "items": {
              "$ref": "#/components/schemas/PolicyActionResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateRoleRequest": {
        "$ref": "#/components/schemas/Role"
      },
      "UpdateRolloutApprovalRequest": {
        "$ref": "#/components/schemas/RolloutApprovalRequest"
      },
      "UpdateRolloutApprovalResponse": {
        "properties": {
          "result": {
            "description": "A response message.",
            "example": "Rollout 2e9346d4-aaf6-4f1a-bd16-8454798bd8f2 has been updated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateRolloutRequest": {
        "$ref": "#/components/schemas/Rollout"
      },
      "UpdateSelectiveLogConfigRequest": {
        "$ref": "#/components/schemas/SelectiveLogConfig"
      },
      "UpdateSignalFaultModeRequest": {
        "properties": {
          "faultModeMapID": {
            "description": "New Fault Mode Map ID the signal fault mode map needs to be updated to",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateSignalFaultModesByDecoderMappingIDRequest": {
        "items": {
          "$ref": "#/components/schemas/SignalFaultModeWithoutDecoderMappingID"
        },
        "type": "array"
      },
      "UpdateSignalFaultModesForDecoderMapRequest": {
        "$ref": "#/components/schemas/SignalFaultMode"
      },
      "UpdateStandardSignalSchemaFileStatusRequest": {
        "properties": {
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "internalDecoderMappingID": {
            "description": "The decoderMappingID related to combinedDecoderFile to be patched.",
            "example": "33849022-96dc-41a5-908a-7b4c36c3024e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateTemplateCategoryRequest": {
        "$ref": "#/components/schemas/TemplateCategory"
      },
      "UpdateTemplateRequest": {
        "$ref": "#/components/schemas/Template"
      },
      "UpdateUserRequest": {
        "$ref": "#/components/schemas/User"
      },
      "UpdateUserRolesRequest": {
        "properties": {
          "roleIDs": {
            "description": "A list of updated user roles.",
            "example": "[ab06c3e1-a58b-4113-9003-1012a0f74c86]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateUserRolesResponse": {
        "properties": {
          "roleIDs": {
            "description": "A list of updated user roles.",
            "example": "[528196a2-e6f3-4fdc-9289-9cfc5c4243ff]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UploadTrigger": {
        "description": "Only if outputType is set to FILE_LOG, this field is used to specify how files are uploaded.\n| Enum Value | Description |\n| --- | --- |\n| AUTOMATIC_UPLOAD | Instructs the device to automatically initiate log file uploads upon completion of file writing. |\n| MANUAL_UPLOAD | Instructs the device to retain log files on the vehicle until a manual upload is triggered through the API. |\n",
        "enum": [
          "AUTOMATIC_UPLOAD",
          "MANUAL_UPLOAD"
        ],
        "type": "string"
      },
      "User": {
        "properties": {
          "attributes": {
            "description": "The attributes of the user.",
            "example": "{\"region\":\"europe\"}",
            "type": "object"
          },
          "companyID": {
            "description": "A unique, permanent company identifier, generated by Sibros.",
            "example": "d8323aa7-3db1-4577-bbb6-0dbebee0e7be",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "createdAt": {
            "description": "A timestamp of the user's creation.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "description": "The email address of the user.",
            "example": "johndoe@sibros.tech",
            "format": "email",
            "type": "string"
          },
          "externalID": {
            "description": "The external identifier, outside of Sibros.",
            "example": "doe_john",
            "type": "string"
          },
          "firstName": {
            "description": "The first name of the user.",
            "example": "John",
            "type": "string"
          },
          "lastLoginAt": {
            "description": "A timestamp of the last time the user logged in.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of the user.",
            "example": "Doe",
            "type": "string"
          },
          "permissions": {
            "description": "The permissions of the user.",
            "example": "[{\"action\": 1, \"resource\": 10}, {\"action\": 1, \"resource\": 30}]",
            "items": {
              "$ref": "#/components/schemas/PolicyActionResource"
            },
            "type": "array"
          },
          "phone": {
            "description": "The phone number of the user.",
            "example": "555-555-5555",
            "type": "string"
          },
          "roleIDs": {
            "description": "The role IDs of the user",
            "example": [
              "d5703d51-33e6-461e-afe4-2394e565c1b4",
              "e2303d51-33e6-461e-afe4-2394e565c1b6"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "roles": {
            "description": "The roles of the user.",
            "example": "[\"Admin\", \"Release Manager\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "timeZone": {
            "description": "Time zone of the user",
            "example": "US/Pacific",
            "type": "string"
          },
          "updatedAt": {
            "description": "A timestamp of the latest update of the user.",
            "example": "2020-02-02T20:20:20.202Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "userID": {
            "description": "A unique identifier for the user.",
            "example": "fbd7728a-f4f7-4843-b3a1-75619fca02c0",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "userName": {
            "description": "The username of the user.",
            "example": "johndoe123",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "UserActivityRequest": {
        "properties": {
          "lastLoginAt": {
            "description": "A timestamp of the last time the user logged in.",
            "example": "2022-02-02T20:20:20.202Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "type": "object"
      },
      "UserFavorite": {
        "properties": {
          "templateID": {
            "description": "A unique identifier for the template.",
            "example": "824b48ca-1488-48eb-9bd4-51e2443c4bb2",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserFavoritesPage": {
        "properties": {
          "count": {
            "description": "The amount of templates that returned",
            "example": 5,
            "type": "integer"
          },
          "results": {
            "description": "The result list for templates",
            "items": {
              "$ref": "#/components/schemas/GetUserFavoritesResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserStatus": {
        "description": "The status of the user\n",
        "enum": [
          "ACTIVE",
          "NOT_ACTIVE",
          "INVALID"
        ],
        "type": "string"
      },
      "ValidateDeviceGroupRequest": {
        "$ref": "#/components/schemas/DeviceGroup"
      },
      "ValidateDeviceGroupResponse": {
        "properties": {
          "isValid": {
            "description": "A boolean flag to denote if the device group is valid.",
            "example": false,
            "type": "boolean"
          },
          "validations": {
            "description": "A list of device group validations.",
            "items": {
              "$ref": "#/components/schemas/DeviceGroupValidation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WithinParameters": {
        "description": "When â€œWithinâ€ is chosen as the operator, this object must be specified to set bounds for the â€œWithinâ€. This object has two fields, min and max, which denote a range that the signal value must fall in for the condition to be evaluated to true.",
        "properties": {
          "max": {
            "description": "The maximum value of the range.",
            "example": 1000,
            "format": "float",
            "type": "number"
          },
          "min": {
            "description": "The minimum value of the range.",
            "example": 0,
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ZipFileResponse": {
        "format": "binary",
        "type": "string"
      }
    },
    "parameters": {
      "decoderMappingsFilter_customDataMappingID": {
        "deprecated": false,
        "description": "Filter decoder mappings by the custom data mapping ID.",
        "in": "query",
        "name": "customDataMappingID",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "decoderMappingsFilter_decoderMappingIDs": {
        "deprecated": false,
        "description": "Filter decoder mappings by specified decoder mapping IDs",
        "in": "query",
        "name": "decoderMappingIDs",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "decoderMappingsFilter_deviceModelID": {
        "deprecated": false,
        "description": "Filter decoder mappings by device model ID",
        "in": "query",
        "name": "deviceModelID",
        "required": false,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "decoderMappingsFilter_name": {
        "deprecated": false,
        "description": "Filter decoder mappings by the exact name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "example": "name",
          "type": "string"
        }
      },
      "decoderMappingsFilter_namePattern": {
        "deprecated": false,
        "description": "Filter decoder mappings by name pattern",
        "in": "query",
        "name": "namePattern",
        "required": false,
        "schema": {
          "example": "name",
          "type": "string"
        }
      },
      "deploymentFilter_createdAfter": {
        "deprecated": false,
        "description": "Filters to deployments with a createdAt value after the specified time.",
        "in": "query",
        "name": "createdAfter",
        "required": false,
        "schema": {
          "example": "2022-06-18T01:26:51.827053Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "deploymentFilter_createdBefore": {
        "deprecated": false,
        "description": "Filters to deployments with a createdAt value before the specified time.",
        "in": "query",
        "name": "createdBefore",
        "required": false,
        "schema": {
          "example": "2022-06-18T05:26:51.827053Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "deploymentFilter_deploymentType": {
        "deprecated": false,
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/DeploymentType"
        }
      },
      "deploymentFilter_deviceIDs": {
        "deprecated": false,
        "description": "Filters to deployments for any of the identified devices.",
        "in": "query",
        "name": "deviceIDs",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "deploymentFilter_deviceSerialNumber": {
        "deprecated": false,
        "description": "Filters to deployments for devices whose serial numbers (e.g. VINs) match the specified value. The match can be partial.",
        "in": "query",
        "name": "deviceSerialNumber",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "deploymentFilter_provisioning": {
        "deprecated": false,
        "description": "Filters to deployments that are (true) or are not (false) Deep Updater provisioning deployments.",
        "in": "query",
        "name": "provisioning",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "deploymentFilter_queuedAfter": {
        "deprecated": false,
        "description": "Filters to deployments with a queuedAt value after the specified time.",
        "in": "query",
        "name": "queuedAfter",
        "required": false,
        "schema": {
          "example": "2022-06-18T01:26:51.827053Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "deploymentFilter_queuedBefore": {
        "deprecated": false,
        "description": "Filters to deployments with a queuedAt value before the specified time.",
        "in": "query",
        "name": "queuedBefore",
        "required": false,
        "schema": {
          "example": "2022-06-18T05:26:51.827053Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "deploymentFilter_rolloutID": {
        "deprecated": false,
        "description": "Filters to deployments associated with the specified rollout.",
        "in": "query",
        "name": "rolloutID",
        "required": false,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "deploymentFilter_startTimeLowerBound": {
        "deprecated": false,
        "description": "Filters to deployments with a startTime after the specified lower bound.",
        "in": "query",
        "name": "startTimeLowerBound",
        "required": false,
        "schema": {
          "example": "2022-06-18T01:26:51.827053Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "deploymentFilter_startTimeUpperBound": {
        "deprecated": false,
        "description": "Filters to deployments with a startTime before the specified upper bound.",
        "in": "query",
        "name": "startTimeUpperBound",
        "required": false,
        "schema": {
          "example": "2022-06-18T05:26:51.827053Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "deploymentFilter_statuses": {
        "deprecated": false,
        "in": "query",
        "name": "statuses",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/DeploymentStatusEnum"
        }
      },
      "deploymentFilter_substatuses": {
        "deprecated": false,
        "in": "query",
        "name": "substatuses",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/DeploymentSubstatusEnum"
        }
      },
      "deploymentOrderBy": {
        "deprecated": false,
        "description": "Order by createdAt or stageNumber. The format is [\"{{columnName}}:{{asc/desc}}\", ...], with \"desc\" = DESCENDING and \"asc\" = ASCENDING.",
        "in": "query",
        "name": "orderBy",
        "required": false,
        "schema": {
          "default": "[\"createdAt:desc\"]",
          "example": "[\"stageNumber:asc\", \"createdAt:desc\"]",
          "type": "string"
        }
      },
      "limit": {
        "deprecated": false,
        "description": "The maximum number of results to return.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "default": 1000,
          "type": "integer"
        }
      },
      "offset": {
        "deprecated": false,
        "description": "The number of items to skip when returning results.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "default": 0,
          "type": "integer"
        }
      },
      "statisticsResource": {
        "deprecated": false,
        "in": "query",
        "name": "resource",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/StatisticsResource"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Device"
    },
    {
      "name": "Device Component"
    },
    {
      "name": "Device Attribute"
    },
    {
      "name": "Device Model"
    },
    {
      "name": "Device Group"
    },
    {
      "name": "Device Configuration"
    },
    {
      "name": "Device Log"
    },
    {
      "name": "Device Maintenance"
    },
    {
      "name": "Package"
    },
    {
      "name": "Package Group"
    },
    {
      "name": "Package Manifest Entry"
    },
    {
      "name": "Package Attachment"
    },
    {
      "name": "Image"
    },
    {
      "name": "Image Region"
    },
    {
      "name": "Fault Mode Map"
    },
    {
      "name": "Decoder Mapping"
    },
    {
      "name": "Signal Fault Mode Map"
    },
    {
      "name": "Log Rule"
    },
    {
      "name": "Selective Log Config"
    },
    {
      "name": "Deployment"
    },
    {
      "name": "Deployment Log"
    },
    {
      "name": "User Consent"
    },
    {
      "name": "Rollout"
    },
    {
      "name": "Rollout Attachment"
    },
    {
      "name": "Stage"
    },
    {
      "name": "Statistics"
    },
    {
      "name": "Default State"
    },
    {
      "name": "Controller"
    },
    {
      "name": "Hardware Revision"
    },
    {
      "name": "Notary Collection"
    },
    {
      "name": "Template"
    },
    {
      "name": "Template Category"
    },
    {
      "name": "Role-Based Access Control (RBAC)"
    },
    {
      "name": "User"
    },
    {
      "name": "Master Token"
    },
    {
      "name": "Company Information"
    },
    {
      "name": "Command Request"
    },
    {
      "name": "Command Response"
    },
    {
      "name": "Command Metadata"
    },
    {
      "name": "Command Sequence Definition"
    },
    {
      "name": "Command Sequence Request"
    },
    {
      "name": "Signal"
    },
    {
      "name": "Tag"
    },
    {
      "name": "Customer File"
    },
    {
      "name": "Provisioning"
    },
    {
      "name": "Health"
    }
  ]
}